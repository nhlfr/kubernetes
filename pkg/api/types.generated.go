/*
Copyright 2016 The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// ************************************************************
// DO NOT EDIT.
// THIS FILE IS AUTO-GENERATED BY codecgen.
// ************************************************************

package api

import (
	"errors"
	"fmt"
	codec1978 "github.com/ugorji/go/codec"
	pkg3_resource "k8s.io/kubernetes/pkg/api/resource"
	pkg2_unversioned "k8s.io/kubernetes/pkg/api/unversioned"
	pkg6_fields "k8s.io/kubernetes/pkg/fields"
	pkg5_labels "k8s.io/kubernetes/pkg/labels"
	pkg7_runtime "k8s.io/kubernetes/pkg/runtime"
	pkg1_types "k8s.io/kubernetes/pkg/types"
	pkg4_intstr "k8s.io/kubernetes/pkg/util/intstr"
	"reflect"
	"runtime"
	time "time"
)

const (
	// ----- content types ----
	codecSelferC_UTF81234 = 1
	codecSelferC_RAW1234  = 0
	// ----- value types used ----
	codecSelferValueTypeArray1234 = 10
	codecSelferValueTypeMap1234   = 9
	// ----- containerStateValues ----
	codecSelfer_containerMapKey1234    = 2
	codecSelfer_containerMapValue1234  = 3
	codecSelfer_containerMapEnd1234    = 4
	codecSelfer_containerArrayElem1234 = 6
	codecSelfer_containerArrayEnd1234  = 7
)

var (
	codecSelferBitsize1234                         = uint8(reflect.TypeOf(uint(0)).Bits())
	codecSelferOnlyMapOrArrayEncodeToStructErr1234 = errors.New(`only encoded map or array can be decoded into a struct`)
)

type codecSelfer1234 struct{}

func init() {
	if codec1978.GenVersion != 5 {
		_, file, _, _ := runtime.Caller(0)
		err := fmt.Errorf("codecgen version mismatch: current: %v, need %v. Re-generate file: %v",
			5, codec1978.GenVersion, file)
		panic(err)
	}
	if false { // reference the types, but skip this branch at build/run time
		var v0 pkg3_resource.Quantity
		var v1 pkg2_unversioned.Time
		var v2 pkg6_fields.Selector
		var v3 pkg5_labels.Selector
		var v4 pkg7_runtime.Object
		var v5 pkg1_types.UID
		var v6 pkg4_intstr.IntOrString
		var v7 time.Time
		_, _, _, _, _, _, _, _ = v0, v1, v2, v3, v4, v5, v6, v7
	}
}

func (x *ObjectMeta) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1 := z.EncBinary()
		_ = yym1
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2 := !z.EncBinary()
			yy2arr2 := z.EncBasicHandle().StructToArray
			var yyq2 [14]bool
			_, _, _ = yysep2, yyq2, yy2arr2
			const yyr2 bool = false
			yyq2[0] = x.Name != ""
			yyq2[1] = x.GenerateName != ""
			yyq2[2] = x.Namespace != ""
			yyq2[3] = x.SelfLink != ""
			yyq2[4] = x.UID != ""
			yyq2[5] = x.ResourceVersion != ""
			yyq2[6] = x.Generation != 0
			yyq2[7] = true
			yyq2[8] = x.DeletionTimestamp != nil
			yyq2[9] = x.DeletionGracePeriodSeconds != nil
			yyq2[10] = len(x.Labels) != 0
			yyq2[11] = len(x.Annotations) != 0
			yyq2[12] = len(x.OwnerReferences) != 0
			yyq2[13] = len(x.Finalizers) != 0
			var yynn2 int
			if yyr2 || yy2arr2 {
				r.EncodeArrayStart(14)
			} else {
				yynn2 = 0
				for _, b := range yyq2 {
					if b {
						yynn2++
					}
				}
				r.EncodeMapStart(yynn2)
				yynn2 = 0
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[0] {
					yym4 := z.EncBinary()
					_ = yym4
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym5 := z.EncBinary()
					_ = yym5
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[1] {
					yym7 := z.EncBinary()
					_ = yym7
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generateName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym8 := z.EncBinary()
					_ = yym8
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.GenerateName))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[2] {
					yym10 := z.EncBinary()
					_ = yym10
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym11 := z.EncBinary()
					_ = yym11
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[3] {
					yym13 := z.EncBinary()
					_ = yym13
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selfLink"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym14 := z.EncBinary()
					_ = yym14
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SelfLink))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[4] {
					yym16 := z.EncBinary()
					_ = yym16
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym17 := z.EncBinary()
					_ = yym17
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[5] {
					yym19 := z.EncBinary()
					_ = yym19
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym20 := z.EncBinary()
					_ = yym20
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[6] {
					yym22 := z.EncBinary()
					_ = yym22
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("generation"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym23 := z.EncBinary()
					_ = yym23
					if false {
					} else {
						r.EncodeInt(int64(x.Generation))
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[7] {
					yy25 := &x.CreationTimestamp
					yym26 := z.EncBinary()
					_ = yym26
					if false {
					} else if z.HasExtensions() && z.EncExt(yy25) {
					} else if yym26 {
						z.EncBinaryMarshal(yy25)
					} else if !yym26 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy25)
					} else {
						z.EncFallback(yy25)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("creationTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy27 := &x.CreationTimestamp
					yym28 := z.EncBinary()
					_ = yym28
					if false {
					} else if z.HasExtensions() && z.EncExt(yy27) {
					} else if yym28 {
						z.EncBinaryMarshal(yy27)
					} else if !yym28 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy27)
					} else {
						z.EncFallback(yy27)
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[8] {
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym30 := z.EncBinary()
						_ = yym30
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym30 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym30 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionTimestamp == nil {
						r.EncodeNil()
					} else {
						yym31 := z.EncBinary()
						_ = yym31
						if false {
						} else if z.HasExtensions() && z.EncExt(x.DeletionTimestamp) {
						} else if yym31 {
							z.EncBinaryMarshal(x.DeletionTimestamp)
						} else if !yym31 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.DeletionTimestamp)
						} else {
							z.EncFallback(x.DeletionTimestamp)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[9] {
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy33 := *x.DeletionGracePeriodSeconds
						yym34 := z.EncBinary()
						_ = yym34
						if false {
						} else {
							r.EncodeInt(int64(yy33))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("deletionGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DeletionGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy35 := *x.DeletionGracePeriodSeconds
						yym36 := z.EncBinary()
						_ = yym36
						if false {
						} else {
							r.EncodeInt(int64(yy35))
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[10] {
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym38 := z.EncBinary()
						_ = yym38
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labels"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Labels == nil {
						r.EncodeNil()
					} else {
						yym39 := z.EncBinary()
						_ = yym39
						if false {
						} else {
							z.F.EncMapStringStringV(x.Labels, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[11] {
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym41 := z.EncBinary()
						_ = yym41
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("annotations"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Annotations == nil {
						r.EncodeNil()
					} else {
						yym42 := z.EncBinary()
						_ = yym42
						if false {
						} else {
							z.F.EncMapStringStringV(x.Annotations, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[12] {
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym44 := z.EncBinary()
						_ = yym44
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ownerReferences"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OwnerReferences == nil {
						r.EncodeNil()
					} else {
						yym45 := z.EncBinary()
						_ = yym45
						if false {
						} else {
							h.encSliceOwnerReference(([]OwnerReference)(x.OwnerReferences), e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2[13] {
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym47 := z.EncBinary()
						_ = yym47
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finalizers"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Finalizers == nil {
						r.EncodeNil()
					} else {
						yym48 := z.EncBinary()
						_ = yym48
						if false {
						} else {
							z.F.EncSliceStringV(x.Finalizers, false, e)
						}
					}
				}
			}
			if yyr2 || yy2arr2 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectMeta) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym49 := z.DecBinary()
	_ = yym49
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct50 := r.ContainerType()
		if yyct50 == codecSelferValueTypeMap1234 {
			yyl50 := r.ReadMapStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl50, d)
			}
		} else if yyct50 == codecSelferValueTypeArray1234 {
			yyl50 := r.ReadArrayStart()
			if yyl50 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl50, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectMeta) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys51Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys51Slc
	var yyhl51 bool = l >= 0
	for yyj51 := 0; ; yyj51++ {
		if yyhl51 {
			if yyj51 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys51Slc = r.DecodeBytes(yys51Slc, true, true)
		yys51 := string(yys51Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys51 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "generateName":
			if r.TryDecodeAsNil() {
				x.GenerateName = ""
			} else {
				x.GenerateName = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "selfLink":
			if r.TryDecodeAsNil() {
				x.SelfLink = ""
			} else {
				x.SelfLink = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "generation":
			if r.TryDecodeAsNil() {
				x.Generation = 0
			} else {
				x.Generation = int64(r.DecodeInt(64))
			}
		case "creationTimestamp":
			if r.TryDecodeAsNil() {
				x.CreationTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv59 := &x.CreationTimestamp
				yym60 := z.DecBinary()
				_ = yym60
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv59) {
				} else if yym60 {
					z.DecBinaryUnmarshal(yyv59)
				} else if !yym60 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv59)
				} else {
					z.DecFallback(yyv59, false)
				}
			}
		case "deletionTimestamp":
			if r.TryDecodeAsNil() {
				if x.DeletionTimestamp != nil {
					x.DeletionTimestamp = nil
				}
			} else {
				if x.DeletionTimestamp == nil {
					x.DeletionTimestamp = new(pkg2_unversioned.Time)
				}
				yym62 := z.DecBinary()
				_ = yym62
				if false {
				} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
				} else if yym62 {
					z.DecBinaryUnmarshal(x.DeletionTimestamp)
				} else if !yym62 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.DeletionTimestamp)
				} else {
					z.DecFallback(x.DeletionTimestamp, false)
				}
			}
		case "deletionGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.DeletionGracePeriodSeconds != nil {
					x.DeletionGracePeriodSeconds = nil
				}
			} else {
				if x.DeletionGracePeriodSeconds == nil {
					x.DeletionGracePeriodSeconds = new(int64)
				}
				yym64 := z.DecBinary()
				_ = yym64
				if false {
				} else {
					*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "labels":
			if r.TryDecodeAsNil() {
				x.Labels = nil
			} else {
				yyv65 := &x.Labels
				yym66 := z.DecBinary()
				_ = yym66
				if false {
				} else {
					z.F.DecMapStringStringX(yyv65, false, d)
				}
			}
		case "annotations":
			if r.TryDecodeAsNil() {
				x.Annotations = nil
			} else {
				yyv67 := &x.Annotations
				yym68 := z.DecBinary()
				_ = yym68
				if false {
				} else {
					z.F.DecMapStringStringX(yyv67, false, d)
				}
			}
		case "ownerReferences":
			if r.TryDecodeAsNil() {
				x.OwnerReferences = nil
			} else {
				yyv69 := &x.OwnerReferences
				yym70 := z.DecBinary()
				_ = yym70
				if false {
				} else {
					h.decSliceOwnerReference((*[]OwnerReference)(yyv69), d)
				}
			}
		case "finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv71 := &x.Finalizers
				yym72 := z.DecBinary()
				_ = yym72
				if false {
				} else {
					z.F.DecSliceStringX(yyv71, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys51)
		} // end switch yys51
	} // end for yyj51
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectMeta) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj73 int
	var yyb73 bool
	var yyhl73 bool = l >= 0
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.GenerateName = ""
	} else {
		x.GenerateName = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SelfLink = ""
	} else {
		x.SelfLink = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Generation = 0
	} else {
		x.Generation = int64(r.DecodeInt(64))
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CreationTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv81 := &x.CreationTimestamp
		yym82 := z.DecBinary()
		_ = yym82
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv81) {
		} else if yym82 {
			z.DecBinaryUnmarshal(yyv81)
		} else if !yym82 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv81)
		} else {
			z.DecFallback(yyv81, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionTimestamp != nil {
			x.DeletionTimestamp = nil
		}
	} else {
		if x.DeletionTimestamp == nil {
			x.DeletionTimestamp = new(pkg2_unversioned.Time)
		}
		yym84 := z.DecBinary()
		_ = yym84
		if false {
		} else if z.HasExtensions() && z.DecExt(x.DeletionTimestamp) {
		} else if yym84 {
			z.DecBinaryUnmarshal(x.DeletionTimestamp)
		} else if !yym84 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.DeletionTimestamp)
		} else {
			z.DecFallback(x.DeletionTimestamp, false)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DeletionGracePeriodSeconds != nil {
			x.DeletionGracePeriodSeconds = nil
		}
	} else {
		if x.DeletionGracePeriodSeconds == nil {
			x.DeletionGracePeriodSeconds = new(int64)
		}
		yym86 := z.DecBinary()
		_ = yym86
		if false {
		} else {
			*((*int64)(x.DeletionGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Labels = nil
	} else {
		yyv87 := &x.Labels
		yym88 := z.DecBinary()
		_ = yym88
		if false {
		} else {
			z.F.DecMapStringStringX(yyv87, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Annotations = nil
	} else {
		yyv89 := &x.Annotations
		yym90 := z.DecBinary()
		_ = yym90
		if false {
		} else {
			z.F.DecMapStringStringX(yyv89, false, d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OwnerReferences = nil
	} else {
		yyv91 := &x.OwnerReferences
		yym92 := z.DecBinary()
		_ = yym92
		if false {
		} else {
			h.decSliceOwnerReference((*[]OwnerReference)(yyv91), d)
		}
	}
	yyj73++
	if yyhl73 {
		yyb73 = yyj73 > l
	} else {
		yyb73 = r.CheckBreak()
	}
	if yyb73 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv93 := &x.Finalizers
		yym94 := z.DecBinary()
		_ = yym94
		if false {
		} else {
			z.F.DecSliceStringX(yyv93, false, d)
		}
	}
	for {
		yyj73++
		if yyhl73 {
			yyb73 = yyj73 > l
		} else {
			yyb73 = r.CheckBreak()
		}
		if yyb73 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj73-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Volume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym95 := z.EncBinary()
		_ = yym95
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep96 := !z.EncBinary()
			yy2arr96 := z.EncBasicHandle().StructToArray
			var yyq96 [22]bool
			_, _, _ = yysep96, yyq96, yy2arr96
			const yyr96 bool = false
			yyq96[1] = x.VolumeSource.HostPath != nil && x.HostPath != nil
			yyq96[2] = x.VolumeSource.EmptyDir != nil && x.EmptyDir != nil
			yyq96[3] = x.VolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq96[4] = x.VolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq96[5] = x.VolumeSource.GitRepo != nil && x.GitRepo != nil
			yyq96[6] = x.VolumeSource.Secret != nil && x.Secret != nil
			yyq96[7] = x.VolumeSource.NFS != nil && x.NFS != nil
			yyq96[8] = x.VolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq96[9] = x.VolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq96[10] = x.VolumeSource.PersistentVolumeClaim != nil && x.PersistentVolumeClaim != nil
			yyq96[11] = x.VolumeSource.RBD != nil && x.RBD != nil
			yyq96[12] = x.VolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq96[13] = x.VolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq96[14] = x.VolumeSource.Cinder != nil && x.Cinder != nil
			yyq96[15] = x.VolumeSource.CephFS != nil && x.CephFS != nil
			yyq96[16] = x.VolumeSource.Flocker != nil && x.Flocker != nil
			yyq96[17] = x.VolumeSource.DownwardAPI != nil && x.DownwardAPI != nil
			yyq96[18] = x.VolumeSource.FC != nil && x.FC != nil
			yyq96[19] = x.VolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq96[20] = x.VolumeSource.ConfigMap != nil && x.ConfigMap != nil
			yyq96[21] = x.VolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			var yynn96 int
			if yyr96 || yy2arr96 {
				r.EncodeArrayStart(22)
			} else {
				yynn96 = 1
				for _, b := range yyq96 {
					if b {
						yynn96++
					}
				}
				r.EncodeMapStart(yynn96)
				yynn96 = 0
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym98 := z.EncBinary()
				_ = yym98
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym99 := z.EncBinary()
				_ = yym99
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			var yyn100 bool
			if x.VolumeSource.HostPath == nil {
				yyn100 = true
				goto LABEL100
			}
		LABEL100:
			if yyr96 || yy2arr96 {
				if yyn100 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[1] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn100 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn101 bool
			if x.VolumeSource.EmptyDir == nil {
				yyn101 = true
				goto LABEL101
			}
		LABEL101:
			if yyr96 || yy2arr96 {
				if yyn101 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[2] {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn101 {
						r.EncodeNil()
					} else {
						if x.EmptyDir == nil {
							r.EncodeNil()
						} else {
							x.EmptyDir.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn102 bool
			if x.VolumeSource.GCEPersistentDisk == nil {
				yyn102 = true
				goto LABEL102
			}
		LABEL102:
			if yyr96 || yy2arr96 {
				if yyn102 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[3] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn102 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn103 bool
			if x.VolumeSource.AWSElasticBlockStore == nil {
				yyn103 = true
				goto LABEL103
			}
		LABEL103:
			if yyr96 || yy2arr96 {
				if yyn103 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[4] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn103 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn104 bool
			if x.VolumeSource.GitRepo == nil {
				yyn104 = true
				goto LABEL104
			}
		LABEL104:
			if yyr96 || yy2arr96 {
				if yyn104 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[5] {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn104 {
						r.EncodeNil()
					} else {
						if x.GitRepo == nil {
							r.EncodeNil()
						} else {
							x.GitRepo.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn105 bool
			if x.VolumeSource.Secret == nil {
				yyn105 = true
				goto LABEL105
			}
		LABEL105:
			if yyr96 || yy2arr96 {
				if yyn105 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[6] {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn105 {
						r.EncodeNil()
					} else {
						if x.Secret == nil {
							r.EncodeNil()
						} else {
							x.Secret.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn106 bool
			if x.VolumeSource.NFS == nil {
				yyn106 = true
				goto LABEL106
			}
		LABEL106:
			if yyr96 || yy2arr96 {
				if yyn106 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[7] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn106 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn107 bool
			if x.VolumeSource.ISCSI == nil {
				yyn107 = true
				goto LABEL107
			}
		LABEL107:
			if yyr96 || yy2arr96 {
				if yyn107 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn107 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn108 bool
			if x.VolumeSource.Glusterfs == nil {
				yyn108 = true
				goto LABEL108
			}
		LABEL108:
			if yyr96 || yy2arr96 {
				if yyn108 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[9] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn108 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn109 bool
			if x.VolumeSource.PersistentVolumeClaim == nil {
				yyn109 = true
				goto LABEL109
			}
		LABEL109:
			if yyr96 || yy2arr96 {
				if yyn109 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[10] {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn109 {
						r.EncodeNil()
					} else {
						if x.PersistentVolumeClaim == nil {
							r.EncodeNil()
						} else {
							x.PersistentVolumeClaim.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn110 bool
			if x.VolumeSource.RBD == nil {
				yyn110 = true
				goto LABEL110
			}
		LABEL110:
			if yyr96 || yy2arr96 {
				if yyn110 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[11] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn110 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn111 bool
			if x.VolumeSource.Quobyte == nil {
				yyn111 = true
				goto LABEL111
			}
		LABEL111:
			if yyr96 || yy2arr96 {
				if yyn111 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[12] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn111 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn112 bool
			if x.VolumeSource.FlexVolume == nil {
				yyn112 = true
				goto LABEL112
			}
		LABEL112:
			if yyr96 || yy2arr96 {
				if yyn112 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[13] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn112 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn113 bool
			if x.VolumeSource.Cinder == nil {
				yyn113 = true
				goto LABEL113
			}
		LABEL113:
			if yyr96 || yy2arr96 {
				if yyn113 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[14] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn113 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn114 bool
			if x.VolumeSource.CephFS == nil {
				yyn114 = true
				goto LABEL114
			}
		LABEL114:
			if yyr96 || yy2arr96 {
				if yyn114 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[15] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn114 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn115 bool
			if x.VolumeSource.Flocker == nil {
				yyn115 = true
				goto LABEL115
			}
		LABEL115:
			if yyr96 || yy2arr96 {
				if yyn115 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[16] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn115 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn116 bool
			if x.VolumeSource.DownwardAPI == nil {
				yyn116 = true
				goto LABEL116
			}
		LABEL116:
			if yyr96 || yy2arr96 {
				if yyn116 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[17] {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn116 {
						r.EncodeNil()
					} else {
						if x.DownwardAPI == nil {
							r.EncodeNil()
						} else {
							x.DownwardAPI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn117 bool
			if x.VolumeSource.FC == nil {
				yyn117 = true
				goto LABEL117
			}
		LABEL117:
			if yyr96 || yy2arr96 {
				if yyn117 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[18] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn117 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn118 bool
			if x.VolumeSource.AzureFile == nil {
				yyn118 = true
				goto LABEL118
			}
		LABEL118:
			if yyr96 || yy2arr96 {
				if yyn118 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[19] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn118 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn119 bool
			if x.VolumeSource.ConfigMap == nil {
				yyn119 = true
				goto LABEL119
			}
		LABEL119:
			if yyr96 || yy2arr96 {
				if yyn119 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[20] {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn119 {
						r.EncodeNil()
					} else {
						if x.ConfigMap == nil {
							r.EncodeNil()
						} else {
							x.ConfigMap.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn120 bool
			if x.VolumeSource.VsphereVolume == nil {
				yyn120 = true
				goto LABEL120
			}
		LABEL120:
			if yyr96 || yy2arr96 {
				if yyn120 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq96[21] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq96[21] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn120 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr96 || yy2arr96 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Volume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym121 := z.DecBinary()
	_ = yym121
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct122 := r.ContainerType()
		if yyct122 == codecSelferValueTypeMap1234 {
			yyl122 := r.ReadMapStart()
			if yyl122 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl122, d)
			}
		} else if yyct122 == codecSelferValueTypeArray1234 {
			yyl122 := r.ReadArrayStart()
			if yyl122 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl122, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Volume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys123Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys123Slc
	var yyhl123 bool = l >= 0
	for yyj123 := 0; ; yyj123++ {
		if yyhl123 {
			if yyj123 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys123Slc = r.DecodeBytes(yys123Slc, true, true)
		yys123 := string(yys123Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys123 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPath":
			if x.VolumeSource.HostPath == nil {
				x.VolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if x.VolumeSource.EmptyDir == nil {
				x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.VolumeSource.GCEPersistentDisk == nil {
				x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.VolumeSource.AWSElasticBlockStore == nil {
				x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if x.VolumeSource.GitRepo == nil {
				x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if x.VolumeSource.Secret == nil {
				x.VolumeSource.Secret = new(SecretVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.VolumeSource.NFS == nil {
				x.VolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.VolumeSource.ISCSI == nil {
				x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.VolumeSource.Glusterfs == nil {
				x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if x.VolumeSource.PersistentVolumeClaim == nil {
				x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.VolumeSource.RBD == nil {
				x.VolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.VolumeSource.Quobyte == nil {
				x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.VolumeSource.FlexVolume == nil {
				x.VolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.VolumeSource.Cinder == nil {
				x.VolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.VolumeSource.CephFS == nil {
				x.VolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.VolumeSource.Flocker == nil {
				x.VolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if x.VolumeSource.DownwardAPI == nil {
				x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if x.VolumeSource.FC == nil {
				x.VolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.VolumeSource.AzureFile == nil {
				x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if x.VolumeSource.ConfigMap == nil {
				x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.VolumeSource.VsphereVolume == nil {
				x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys123)
		} // end switch yys123
	} // end for yyj123
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Volume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj146 int
	var yyb146 bool
	var yyhl146 bool = l >= 0
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	if x.VolumeSource.HostPath == nil {
		x.VolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.VolumeSource.EmptyDir == nil {
		x.VolumeSource.EmptyDir = new(EmptyDirVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GCEPersistentDisk == nil {
		x.VolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AWSElasticBlockStore == nil {
		x.VolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.VolumeSource.GitRepo == nil {
		x.VolumeSource.GitRepo = new(GitRepoVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Secret == nil {
		x.VolumeSource.Secret = new(SecretVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	if x.VolumeSource.NFS == nil {
		x.VolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ISCSI == nil {
		x.VolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Glusterfs == nil {
		x.VolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.VolumeSource.PersistentVolumeClaim == nil {
		x.VolumeSource.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	if x.VolumeSource.RBD == nil {
		x.VolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Quobyte == nil {
		x.VolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FlexVolume == nil {
		x.VolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Cinder == nil {
		x.VolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.VolumeSource.CephFS == nil {
		x.VolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.VolumeSource.Flocker == nil {
		x.VolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.VolumeSource.DownwardAPI == nil {
		x.VolumeSource.DownwardAPI = new(DownwardAPIVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	if x.VolumeSource.FC == nil {
		x.VolumeSource.FC = new(FCVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.VolumeSource.AzureFile == nil {
		x.VolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.VolumeSource.ConfigMap == nil {
		x.VolumeSource.ConfigMap = new(ConfigMapVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	if x.VolumeSource.VsphereVolume == nil {
		x.VolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj146++
	if yyhl146 {
		yyb146 = yyj146 > l
	} else {
		yyb146 = r.CheckBreak()
	}
	if yyb146 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj146++
		if yyhl146 {
			yyb146 = yyj146 > l
		} else {
			yyb146 = r.CheckBreak()
		}
		if yyb146 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj146-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym169 := z.EncBinary()
		_ = yym169
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep170 := !z.EncBinary()
			yy2arr170 := z.EncBasicHandle().StructToArray
			var yyq170 [21]bool
			_, _, _ = yysep170, yyq170, yy2arr170
			const yyr170 bool = false
			yyq170[0] = x.HostPath != nil
			yyq170[1] = x.EmptyDir != nil
			yyq170[2] = x.GCEPersistentDisk != nil
			yyq170[3] = x.AWSElasticBlockStore != nil
			yyq170[4] = x.GitRepo != nil
			yyq170[5] = x.Secret != nil
			yyq170[6] = x.NFS != nil
			yyq170[7] = x.ISCSI != nil
			yyq170[8] = x.Glusterfs != nil
			yyq170[9] = x.PersistentVolumeClaim != nil
			yyq170[10] = x.RBD != nil
			yyq170[11] = x.Quobyte != nil
			yyq170[12] = x.FlexVolume != nil
			yyq170[13] = x.Cinder != nil
			yyq170[14] = x.CephFS != nil
			yyq170[15] = x.Flocker != nil
			yyq170[16] = x.DownwardAPI != nil
			yyq170[17] = x.FC != nil
			yyq170[18] = x.AzureFile != nil
			yyq170[19] = x.ConfigMap != nil
			yyq170[20] = x.VsphereVolume != nil
			var yynn170 int
			if yyr170 || yy2arr170 {
				r.EncodeArrayStart(21)
			} else {
				yynn170 = 0
				for _, b := range yyq170 {
					if b {
						yynn170++
					}
				}
				r.EncodeMapStart(yynn170)
				yynn170 = 0
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[0] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[1] {
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("emptyDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.EmptyDir == nil {
						r.EncodeNil()
					} else {
						x.EmptyDir.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[2] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[3] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[4] {
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gitRepo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GitRepo == nil {
						r.EncodeNil()
					} else {
						x.GitRepo.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[5] {
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secret"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Secret == nil {
						r.EncodeNil()
					} else {
						x.Secret.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[6] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[8] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[9] {
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeClaim"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PersistentVolumeClaim == nil {
						r.EncodeNil()
					} else {
						x.PersistentVolumeClaim.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[10] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[11] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[12] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[13] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[14] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[15] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[16] {
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("downwardAPI"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DownwardAPI == nil {
						r.EncodeNil()
					} else {
						x.DownwardAPI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[17] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[18] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[19] {
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[19] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMap"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMap == nil {
						r.EncodeNil()
					} else {
						x.ConfigMap.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq170[20] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq170[20] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr170 || yy2arr170 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym192 := z.DecBinary()
	_ = yym192
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct193 := r.ContainerType()
		if yyct193 == codecSelferValueTypeMap1234 {
			yyl193 := r.ReadMapStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl193, d)
			}
		} else if yyct193 == codecSelferValueTypeArray1234 {
			yyl193 := r.ReadArrayStart()
			if yyl193 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl193, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys194Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys194Slc
	var yyhl194 bool = l >= 0
	for yyj194 := 0; ; yyj194++ {
		if yyhl194 {
			if yyj194 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys194Slc = r.DecodeBytes(yys194Slc, true, true)
		yys194 := string(yys194Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys194 {
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "emptyDir":
			if r.TryDecodeAsNil() {
				if x.EmptyDir != nil {
					x.EmptyDir = nil
				}
			} else {
				if x.EmptyDir == nil {
					x.EmptyDir = new(EmptyDirVolumeSource)
				}
				x.EmptyDir.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "gitRepo":
			if r.TryDecodeAsNil() {
				if x.GitRepo != nil {
					x.GitRepo = nil
				}
			} else {
				if x.GitRepo == nil {
					x.GitRepo = new(GitRepoVolumeSource)
				}
				x.GitRepo.CodecDecodeSelf(d)
			}
		case "secret":
			if r.TryDecodeAsNil() {
				if x.Secret != nil {
					x.Secret = nil
				}
			} else {
				if x.Secret == nil {
					x.Secret = new(SecretVolumeSource)
				}
				x.Secret.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "persistentVolumeClaim":
			if r.TryDecodeAsNil() {
				if x.PersistentVolumeClaim != nil {
					x.PersistentVolumeClaim = nil
				}
			} else {
				if x.PersistentVolumeClaim == nil {
					x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
				}
				x.PersistentVolumeClaim.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "downwardAPI":
			if r.TryDecodeAsNil() {
				if x.DownwardAPI != nil {
					x.DownwardAPI = nil
				}
			} else {
				if x.DownwardAPI == nil {
					x.DownwardAPI = new(DownwardAPIVolumeSource)
				}
				x.DownwardAPI.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "configMap":
			if r.TryDecodeAsNil() {
				if x.ConfigMap != nil {
					x.ConfigMap = nil
				}
			} else {
				if x.ConfigMap == nil {
					x.ConfigMap = new(ConfigMapVolumeSource)
				}
				x.ConfigMap.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys194)
		} // end switch yys194
	} // end for yyj194
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj216 int
	var yyb216 bool
	var yyhl216 bool = l >= 0
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.EmptyDir != nil {
			x.EmptyDir = nil
		}
	} else {
		if x.EmptyDir == nil {
			x.EmptyDir = new(EmptyDirVolumeSource)
		}
		x.EmptyDir.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GitRepo != nil {
			x.GitRepo = nil
		}
	} else {
		if x.GitRepo == nil {
			x.GitRepo = new(GitRepoVolumeSource)
		}
		x.GitRepo.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Secret != nil {
			x.Secret = nil
		}
	} else {
		if x.Secret == nil {
			x.Secret = new(SecretVolumeSource)
		}
		x.Secret.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PersistentVolumeClaim != nil {
			x.PersistentVolumeClaim = nil
		}
	} else {
		if x.PersistentVolumeClaim == nil {
			x.PersistentVolumeClaim = new(PersistentVolumeClaimVolumeSource)
		}
		x.PersistentVolumeClaim.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DownwardAPI != nil {
			x.DownwardAPI = nil
		}
	} else {
		if x.DownwardAPI == nil {
			x.DownwardAPI = new(DownwardAPIVolumeSource)
		}
		x.DownwardAPI.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMap != nil {
			x.ConfigMap = nil
		}
	} else {
		if x.ConfigMap == nil {
			x.ConfigMap = new(ConfigMapVolumeSource)
		}
		x.ConfigMap.CodecDecodeSelf(d)
	}
	yyj216++
	if yyhl216 {
		yyb216 = yyj216 > l
	} else {
		yyb216 = r.CheckBreak()
	}
	if yyb216 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj216++
		if yyhl216 {
			yyb216 = yyj216 > l
		} else {
			yyb216 = r.CheckBreak()
		}
		if yyb216 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj216-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym238 := z.EncBinary()
		_ = yym238
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep239 := !z.EncBinary()
			yy2arr239 := z.EncBasicHandle().StructToArray
			var yyq239 [15]bool
			_, _, _ = yysep239, yyq239, yy2arr239
			const yyr239 bool = false
			yyq239[0] = x.GCEPersistentDisk != nil
			yyq239[1] = x.AWSElasticBlockStore != nil
			yyq239[2] = x.HostPath != nil
			yyq239[3] = x.Glusterfs != nil
			yyq239[4] = x.NFS != nil
			yyq239[5] = x.RBD != nil
			yyq239[6] = x.Quobyte != nil
			yyq239[7] = x.ISCSI != nil
			yyq239[8] = x.FlexVolume != nil
			yyq239[9] = x.Cinder != nil
			yyq239[10] = x.CephFS != nil
			yyq239[11] = x.FC != nil
			yyq239[12] = x.Flocker != nil
			yyq239[13] = x.AzureFile != nil
			yyq239[14] = x.VsphereVolume != nil
			var yynn239 int
			if yyr239 || yy2arr239 {
				r.EncodeArrayStart(15)
			} else {
				yynn239 = 0
				for _, b := range yyq239 {
					if b {
						yynn239++
					}
				}
				r.EncodeMapStart(yynn239)
				yynn239 = 0
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[0] {
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GCEPersistentDisk == nil {
						r.EncodeNil()
					} else {
						x.GCEPersistentDisk.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[1] {
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AWSElasticBlockStore == nil {
						r.EncodeNil()
					} else {
						x.AWSElasticBlockStore.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[2] {
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HostPath == nil {
						r.EncodeNil()
					} else {
						x.HostPath.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[3] {
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Glusterfs == nil {
						r.EncodeNil()
					} else {
						x.Glusterfs.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[4] {
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NFS == nil {
						r.EncodeNil()
					} else {
						x.NFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[5] {
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RBD == nil {
						r.EncodeNil()
					} else {
						x.RBD.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[6] {
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Quobyte == nil {
						r.EncodeNil()
					} else {
						x.Quobyte.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[7] {
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ISCSI == nil {
						r.EncodeNil()
					} else {
						x.ISCSI.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[8] {
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FlexVolume == nil {
						r.EncodeNil()
					} else {
						x.FlexVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[9] {
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Cinder == nil {
						r.EncodeNil()
					} else {
						x.Cinder.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[10] {
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.CephFS == nil {
						r.EncodeNil()
					} else {
						x.CephFS.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[11] {
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FC == nil {
						r.EncodeNil()
					} else {
						x.FC.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[12] {
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Flocker == nil {
						r.EncodeNil()
					} else {
						x.Flocker.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[13] {
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AzureFile == nil {
						r.EncodeNil()
					} else {
						x.AzureFile.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq239[14] {
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq239[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VsphereVolume == nil {
						r.EncodeNil()
					} else {
						x.VsphereVolume.CodecEncodeSelf(e)
					}
				}
			}
			if yyr239 || yy2arr239 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym255 := z.DecBinary()
	_ = yym255
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct256 := r.ContainerType()
		if yyct256 == codecSelferValueTypeMap1234 {
			yyl256 := r.ReadMapStart()
			if yyl256 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl256, d)
			}
		} else if yyct256 == codecSelferValueTypeArray1234 {
			yyl256 := r.ReadArrayStart()
			if yyl256 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl256, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys257Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys257Slc
	var yyhl257 bool = l >= 0
	for yyj257 := 0; ; yyj257++ {
		if yyhl257 {
			if yyj257 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys257Slc = r.DecodeBytes(yys257Slc, true, true)
		yys257 := string(yys257Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys257 {
		case "gcePersistentDisk":
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys257)
		} // end switch yys257
	} // end for yyj257
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj273 int
	var yyb273 bool
	var yyhl273 bool = l >= 0
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	yyj273++
	if yyhl273 {
		yyb273 = yyj273 > l
	} else {
		yyb273 = r.CheckBreak()
	}
	if yyb273 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	for {
		yyj273++
		if yyhl273 {
			yyb273 = yyj273 > l
		} else {
			yyb273 = r.CheckBreak()
		}
		if yyb273 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj273-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym289 := z.EncBinary()
		_ = yym289
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep290 := !z.EncBinary()
			yy2arr290 := z.EncBasicHandle().StructToArray
			var yyq290 [2]bool
			_, _, _ = yysep290, yyq290, yy2arr290
			const yyr290 bool = false
			yyq290[1] = x.ReadOnly != false
			var yynn290 int
			if yyr290 || yy2arr290 {
				r.EncodeArrayStart(2)
			} else {
				yynn290 = 1
				for _, b := range yyq290 {
					if b {
						yynn290++
					}
				}
				r.EncodeMapStart(yynn290)
				yynn290 = 0
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym292 := z.EncBinary()
				_ = yym292
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("claimName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym293 := z.EncBinary()
				_ = yym293
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ClaimName))
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq290[1] {
					yym295 := z.EncBinary()
					_ = yym295
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq290[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym296 := z.EncBinary()
					_ = yym296
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr290 || yy2arr290 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym297 := z.DecBinary()
	_ = yym297
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct298 := r.ContainerType()
		if yyct298 == codecSelferValueTypeMap1234 {
			yyl298 := r.ReadMapStart()
			if yyl298 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl298, d)
			}
		} else if yyct298 == codecSelferValueTypeArray1234 {
			yyl298 := r.ReadArrayStart()
			if yyl298 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl298, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys299Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys299Slc
	var yyhl299 bool = l >= 0
	for yyj299 := 0; ; yyj299++ {
		if yyhl299 {
			if yyj299 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys299Slc = r.DecodeBytes(yys299Slc, true, true)
		yys299 := string(yys299Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys299 {
		case "claimName":
			if r.TryDecodeAsNil() {
				x.ClaimName = ""
			} else {
				x.ClaimName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys299)
		} // end switch yys299
	} // end for yyj299
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj302 int
	var yyb302 bool
	var yyhl302 bool = l >= 0
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClaimName = ""
	} else {
		x.ClaimName = string(r.DecodeString())
	}
	yyj302++
	if yyhl302 {
		yyb302 = yyj302 > l
	} else {
		yyb302 = r.CheckBreak()
	}
	if yyb302 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj302++
		if yyhl302 {
			yyb302 = yyj302 > l
		} else {
			yyb302 = r.CheckBreak()
		}
		if yyb302 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj302-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym305 := z.EncBinary()
		_ = yym305
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep306 := !z.EncBinary()
			yy2arr306 := z.EncBasicHandle().StructToArray
			var yyq306 [5]bool
			_, _, _ = yysep306, yyq306, yy2arr306
			const yyr306 bool = false
			yyq306[0] = x.Kind != ""
			yyq306[1] = x.APIVersion != ""
			yyq306[2] = true
			yyq306[3] = true
			yyq306[4] = true
			var yynn306 int
			if yyr306 || yy2arr306 {
				r.EncodeArrayStart(5)
			} else {
				yynn306 = 0
				for _, b := range yyq306 {
					if b {
						yynn306++
					}
				}
				r.EncodeMapStart(yynn306)
				yynn306 = 0
			}
			if yyr306 || yy2arr306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq306[0] {
					yym308 := z.EncBinary()
					_ = yym308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq306[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym309 := z.EncBinary()
					_ = yym309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr306 || yy2arr306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq306[1] {
					yym311 := z.EncBinary()
					_ = yym311
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq306[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym312 := z.EncBinary()
					_ = yym312
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr306 || yy2arr306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq306[2] {
					yy314 := &x.ObjectMeta
					yy314.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq306[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy315 := &x.ObjectMeta
					yy315.CodecEncodeSelf(e)
				}
			}
			if yyr306 || yy2arr306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq306[3] {
					yy317 := &x.Spec
					yy317.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq306[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy318 := &x.Spec
					yy318.CodecEncodeSelf(e)
				}
			}
			if yyr306 || yy2arr306 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq306[4] {
					yy320 := &x.Status
					yy320.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq306[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy321 := &x.Status
					yy321.CodecEncodeSelf(e)
				}
			}
			if yyr306 || yy2arr306 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym322 := z.DecBinary()
	_ = yym322
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct323 := r.ContainerType()
		if yyct323 == codecSelferValueTypeMap1234 {
			yyl323 := r.ReadMapStart()
			if yyl323 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl323, d)
			}
		} else if yyct323 == codecSelferValueTypeArray1234 {
			yyl323 := r.ReadArrayStart()
			if yyl323 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl323, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys324Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys324Slc
	var yyhl324 bool = l >= 0
	for yyj324 := 0; ; yyj324++ {
		if yyhl324 {
			if yyj324 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys324Slc = r.DecodeBytes(yys324Slc, true, true)
		yys324 := string(yys324Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys324 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv327 := &x.ObjectMeta
				yyv327.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeSpec{}
			} else {
				yyv328 := &x.Spec
				yyv328.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeStatus{}
			} else {
				yyv329 := &x.Status
				yyv329.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys324)
		} // end switch yys324
	} // end for yyj324
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj330 int
	var yyb330 bool
	var yyhl330 bool = l >= 0
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv333 := &x.ObjectMeta
		yyv333.CodecDecodeSelf(d)
	}
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeSpec{}
	} else {
		yyv334 := &x.Spec
		yyv334.CodecDecodeSelf(d)
	}
	yyj330++
	if yyhl330 {
		yyb330 = yyj330 > l
	} else {
		yyb330 = r.CheckBreak()
	}
	if yyb330 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeStatus{}
	} else {
		yyv335 := &x.Status
		yyv335.CodecDecodeSelf(d)
	}
	for {
		yyj330++
		if yyhl330 {
			yyb330 = yyj330 > l
		} else {
			yyb330 = r.CheckBreak()
		}
		if yyb330 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj330-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym336 := z.EncBinary()
		_ = yym336
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep337 := !z.EncBinary()
			yy2arr337 := z.EncBasicHandle().StructToArray
			var yyq337 [19]bool
			_, _, _ = yysep337, yyq337, yy2arr337
			const yyr337 bool = false
			yyq337[1] = x.PersistentVolumeSource.GCEPersistentDisk != nil && x.GCEPersistentDisk != nil
			yyq337[2] = x.PersistentVolumeSource.AWSElasticBlockStore != nil && x.AWSElasticBlockStore != nil
			yyq337[3] = x.PersistentVolumeSource.HostPath != nil && x.HostPath != nil
			yyq337[4] = x.PersistentVolumeSource.Glusterfs != nil && x.Glusterfs != nil
			yyq337[5] = x.PersistentVolumeSource.NFS != nil && x.NFS != nil
			yyq337[6] = x.PersistentVolumeSource.RBD != nil && x.RBD != nil
			yyq337[7] = x.PersistentVolumeSource.Quobyte != nil && x.Quobyte != nil
			yyq337[8] = x.PersistentVolumeSource.ISCSI != nil && x.ISCSI != nil
			yyq337[9] = x.PersistentVolumeSource.FlexVolume != nil && x.FlexVolume != nil
			yyq337[10] = x.PersistentVolumeSource.Cinder != nil && x.Cinder != nil
			yyq337[11] = x.PersistentVolumeSource.CephFS != nil && x.CephFS != nil
			yyq337[12] = x.PersistentVolumeSource.FC != nil && x.FC != nil
			yyq337[13] = x.PersistentVolumeSource.Flocker != nil && x.Flocker != nil
			yyq337[14] = x.PersistentVolumeSource.AzureFile != nil && x.AzureFile != nil
			yyq337[15] = x.PersistentVolumeSource.VsphereVolume != nil && x.VsphereVolume != nil
			yyq337[16] = len(x.AccessModes) != 0
			yyq337[17] = x.ClaimRef != nil
			yyq337[18] = x.PersistentVolumeReclaimPolicy != ""
			var yynn337 int
			if yyr337 || yy2arr337 {
				r.EncodeArrayStart(19)
			} else {
				yynn337 = 1
				for _, b := range yyq337 {
					if b {
						yynn337++
					}
				}
				r.EncodeMapStart(yynn337)
				yynn337 = 0
			}
			if yyr337 || yy2arr337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("capacity"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Capacity == nil {
					r.EncodeNil()
				} else {
					x.Capacity.CodecEncodeSelf(e)
				}
			}
			var yyn339 bool
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				yyn339 = true
				goto LABEL339
			}
		LABEL339:
			if yyr337 || yy2arr337 {
				if yyn339 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[1] {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gcePersistentDisk"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn339 {
						r.EncodeNil()
					} else {
						if x.GCEPersistentDisk == nil {
							r.EncodeNil()
						} else {
							x.GCEPersistentDisk.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn340 bool
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				yyn340 = true
				goto LABEL340
			}
		LABEL340:
			if yyr337 || yy2arr337 {
				if yyn340 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[2] {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("awsElasticBlockStore"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn340 {
						r.EncodeNil()
					} else {
						if x.AWSElasticBlockStore == nil {
							r.EncodeNil()
						} else {
							x.AWSElasticBlockStore.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn341 bool
			if x.PersistentVolumeSource.HostPath == nil {
				yyn341 = true
				goto LABEL341
			}
		LABEL341:
			if yyr337 || yy2arr337 {
				if yyn341 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[3] {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn341 {
						r.EncodeNil()
					} else {
						if x.HostPath == nil {
							r.EncodeNil()
						} else {
							x.HostPath.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn342 bool
			if x.PersistentVolumeSource.Glusterfs == nil {
				yyn342 = true
				goto LABEL342
			}
		LABEL342:
			if yyr337 || yy2arr337 {
				if yyn342 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[4] {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("glusterfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn342 {
						r.EncodeNil()
					} else {
						if x.Glusterfs == nil {
							r.EncodeNil()
						} else {
							x.Glusterfs.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn343 bool
			if x.PersistentVolumeSource.NFS == nil {
				yyn343 = true
				goto LABEL343
			}
		LABEL343:
			if yyr337 || yy2arr337 {
				if yyn343 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[5] {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn343 {
						r.EncodeNil()
					} else {
						if x.NFS == nil {
							r.EncodeNil()
						} else {
							x.NFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn344 bool
			if x.PersistentVolumeSource.RBD == nil {
				yyn344 = true
				goto LABEL344
			}
		LABEL344:
			if yyr337 || yy2arr337 {
				if yyn344 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[6] {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("rbd"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn344 {
						r.EncodeNil()
					} else {
						if x.RBD == nil {
							r.EncodeNil()
						} else {
							x.RBD.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn345 bool
			if x.PersistentVolumeSource.Quobyte == nil {
				yyn345 = true
				goto LABEL345
			}
		LABEL345:
			if yyr337 || yy2arr337 {
				if yyn345 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[7] {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("quobyte"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn345 {
						r.EncodeNil()
					} else {
						if x.Quobyte == nil {
							r.EncodeNil()
						} else {
							x.Quobyte.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn346 bool
			if x.PersistentVolumeSource.ISCSI == nil {
				yyn346 = true
				goto LABEL346
			}
		LABEL346:
			if yyr337 || yy2arr337 {
				if yyn346 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[8] {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsi"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn346 {
						r.EncodeNil()
					} else {
						if x.ISCSI == nil {
							r.EncodeNil()
						} else {
							x.ISCSI.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn347 bool
			if x.PersistentVolumeSource.FlexVolume == nil {
				yyn347 = true
				goto LABEL347
			}
		LABEL347:
			if yyr337 || yy2arr337 {
				if yyn347 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[9] {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flexVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn347 {
						r.EncodeNil()
					} else {
						if x.FlexVolume == nil {
							r.EncodeNil()
						} else {
							x.FlexVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn348 bool
			if x.PersistentVolumeSource.Cinder == nil {
				yyn348 = true
				goto LABEL348
			}
		LABEL348:
			if yyr337 || yy2arr337 {
				if yyn348 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[10] {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cinder"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn348 {
						r.EncodeNil()
					} else {
						if x.Cinder == nil {
							r.EncodeNil()
						} else {
							x.Cinder.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn349 bool
			if x.PersistentVolumeSource.CephFS == nil {
				yyn349 = true
				goto LABEL349
			}
		LABEL349:
			if yyr337 || yy2arr337 {
				if yyn349 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[11] {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("cephfs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn349 {
						r.EncodeNil()
					} else {
						if x.CephFS == nil {
							r.EncodeNil()
						} else {
							x.CephFS.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn350 bool
			if x.PersistentVolumeSource.FC == nil {
				yyn350 = true
				goto LABEL350
			}
		LABEL350:
			if yyr337 || yy2arr337 {
				if yyn350 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[12] {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fc"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn350 {
						r.EncodeNil()
					} else {
						if x.FC == nil {
							r.EncodeNil()
						} else {
							x.FC.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn351 bool
			if x.PersistentVolumeSource.Flocker == nil {
				yyn351 = true
				goto LABEL351
			}
		LABEL351:
			if yyr337 || yy2arr337 {
				if yyn351 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[13] {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[13] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("flocker"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn351 {
						r.EncodeNil()
					} else {
						if x.Flocker == nil {
							r.EncodeNil()
						} else {
							x.Flocker.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn352 bool
			if x.PersistentVolumeSource.AzureFile == nil {
				yyn352 = true
				goto LABEL352
			}
		LABEL352:
			if yyr337 || yy2arr337 {
				if yyn352 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[14] {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("azureFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn352 {
						r.EncodeNil()
					} else {
						if x.AzureFile == nil {
							r.EncodeNil()
						} else {
							x.AzureFile.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn353 bool
			if x.PersistentVolumeSource.VsphereVolume == nil {
				yyn353 = true
				goto LABEL353
			}
		LABEL353:
			if yyr337 || yy2arr337 {
				if yyn353 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq337[15] {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq337[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("vsphereVolume"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn353 {
						r.EncodeNil()
					} else {
						if x.VsphereVolume == nil {
							r.EncodeNil()
						} else {
							x.VsphereVolume.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr337 || yy2arr337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq337[16] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym355 := z.EncBinary()
						_ = yym355
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq337[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym356 := z.EncBinary()
						_ = yym356
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr337 || yy2arr337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq337[17] {
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq337[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("claimRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ClaimRef == nil {
						r.EncodeNil()
					} else {
						x.ClaimRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr337 || yy2arr337 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq337[18] {
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq337[18] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("persistentVolumeReclaimPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.PersistentVolumeReclaimPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr337 || yy2arr337 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym359 := z.DecBinary()
	_ = yym359
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct360 := r.ContainerType()
		if yyct360 == codecSelferValueTypeMap1234 {
			yyl360 := r.ReadMapStart()
			if yyl360 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl360, d)
			}
		} else if yyct360 == codecSelferValueTypeArray1234 {
			yyl360 := r.ReadArrayStart()
			if yyl360 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl360, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys361Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys361Slc
	var yyhl361 bool = l >= 0
	for yyj361 := 0; ; yyj361++ {
		if yyhl361 {
			if yyj361 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys361Slc = r.DecodeBytes(yys361Slc, true, true)
		yys361 := string(yys361Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys361 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv362 := &x.Capacity
				yyv362.CodecDecodeSelf(d)
			}
		case "gcePersistentDisk":
			if x.PersistentVolumeSource.GCEPersistentDisk == nil {
				x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.GCEPersistentDisk != nil {
					x.GCEPersistentDisk = nil
				}
			} else {
				if x.GCEPersistentDisk == nil {
					x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
				}
				x.GCEPersistentDisk.CodecDecodeSelf(d)
			}
		case "awsElasticBlockStore":
			if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
				x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AWSElasticBlockStore != nil {
					x.AWSElasticBlockStore = nil
				}
			} else {
				if x.AWSElasticBlockStore == nil {
					x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
				}
				x.AWSElasticBlockStore.CodecDecodeSelf(d)
			}
		case "hostPath":
			if x.PersistentVolumeSource.HostPath == nil {
				x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.HostPath != nil {
					x.HostPath = nil
				}
			} else {
				if x.HostPath == nil {
					x.HostPath = new(HostPathVolumeSource)
				}
				x.HostPath.CodecDecodeSelf(d)
			}
		case "glusterfs":
			if x.PersistentVolumeSource.Glusterfs == nil {
				x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Glusterfs != nil {
					x.Glusterfs = nil
				}
			} else {
				if x.Glusterfs == nil {
					x.Glusterfs = new(GlusterfsVolumeSource)
				}
				x.Glusterfs.CodecDecodeSelf(d)
			}
		case "nfs":
			if x.PersistentVolumeSource.NFS == nil {
				x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.NFS != nil {
					x.NFS = nil
				}
			} else {
				if x.NFS == nil {
					x.NFS = new(NFSVolumeSource)
				}
				x.NFS.CodecDecodeSelf(d)
			}
		case "rbd":
			if x.PersistentVolumeSource.RBD == nil {
				x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.RBD != nil {
					x.RBD = nil
				}
			} else {
				if x.RBD == nil {
					x.RBD = new(RBDVolumeSource)
				}
				x.RBD.CodecDecodeSelf(d)
			}
		case "quobyte":
			if x.PersistentVolumeSource.Quobyte == nil {
				x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Quobyte != nil {
					x.Quobyte = nil
				}
			} else {
				if x.Quobyte == nil {
					x.Quobyte = new(QuobyteVolumeSource)
				}
				x.Quobyte.CodecDecodeSelf(d)
			}
		case "iscsi":
			if x.PersistentVolumeSource.ISCSI == nil {
				x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.ISCSI != nil {
					x.ISCSI = nil
				}
			} else {
				if x.ISCSI == nil {
					x.ISCSI = new(ISCSIVolumeSource)
				}
				x.ISCSI.CodecDecodeSelf(d)
			}
		case "flexVolume":
			if x.PersistentVolumeSource.FlexVolume == nil {
				x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FlexVolume != nil {
					x.FlexVolume = nil
				}
			} else {
				if x.FlexVolume == nil {
					x.FlexVolume = new(FlexVolumeSource)
				}
				x.FlexVolume.CodecDecodeSelf(d)
			}
		case "cinder":
			if x.PersistentVolumeSource.Cinder == nil {
				x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Cinder != nil {
					x.Cinder = nil
				}
			} else {
				if x.Cinder == nil {
					x.Cinder = new(CinderVolumeSource)
				}
				x.Cinder.CodecDecodeSelf(d)
			}
		case "cephfs":
			if x.PersistentVolumeSource.CephFS == nil {
				x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.CephFS != nil {
					x.CephFS = nil
				}
			} else {
				if x.CephFS == nil {
					x.CephFS = new(CephFSVolumeSource)
				}
				x.CephFS.CodecDecodeSelf(d)
			}
		case "fc":
			if x.PersistentVolumeSource.FC == nil {
				x.PersistentVolumeSource.FC = new(FCVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.FC != nil {
					x.FC = nil
				}
			} else {
				if x.FC == nil {
					x.FC = new(FCVolumeSource)
				}
				x.FC.CodecDecodeSelf(d)
			}
		case "flocker":
			if x.PersistentVolumeSource.Flocker == nil {
				x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.Flocker != nil {
					x.Flocker = nil
				}
			} else {
				if x.Flocker == nil {
					x.Flocker = new(FlockerVolumeSource)
				}
				x.Flocker.CodecDecodeSelf(d)
			}
		case "azureFile":
			if x.PersistentVolumeSource.AzureFile == nil {
				x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.AzureFile != nil {
					x.AzureFile = nil
				}
			} else {
				if x.AzureFile == nil {
					x.AzureFile = new(AzureFileVolumeSource)
				}
				x.AzureFile.CodecDecodeSelf(d)
			}
		case "vsphereVolume":
			if x.PersistentVolumeSource.VsphereVolume == nil {
				x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
			}
			if r.TryDecodeAsNil() {
				if x.VsphereVolume != nil {
					x.VsphereVolume = nil
				}
			} else {
				if x.VsphereVolume == nil {
					x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
				}
				x.VsphereVolume.CodecDecodeSelf(d)
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv378 := &x.AccessModes
				yym379 := z.DecBinary()
				_ = yym379
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv378), d)
				}
			}
		case "claimRef":
			if r.TryDecodeAsNil() {
				if x.ClaimRef != nil {
					x.ClaimRef = nil
				}
			} else {
				if x.ClaimRef == nil {
					x.ClaimRef = new(ObjectReference)
				}
				x.ClaimRef.CodecDecodeSelf(d)
			}
		case "persistentVolumeReclaimPolicy":
			if r.TryDecodeAsNil() {
				x.PersistentVolumeReclaimPolicy = ""
			} else {
				x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys361)
		} // end switch yys361
	} // end for yyj361
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj382 int
	var yyb382 bool
	var yyhl382 bool = l >= 0
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv383 := &x.Capacity
		yyv383.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.GCEPersistentDisk == nil {
		x.PersistentVolumeSource.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GCEPersistentDisk != nil {
			x.GCEPersistentDisk = nil
		}
	} else {
		if x.GCEPersistentDisk == nil {
			x.GCEPersistentDisk = new(GCEPersistentDiskVolumeSource)
		}
		x.GCEPersistentDisk.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AWSElasticBlockStore == nil {
		x.PersistentVolumeSource.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AWSElasticBlockStore != nil {
			x.AWSElasticBlockStore = nil
		}
	} else {
		if x.AWSElasticBlockStore == nil {
			x.AWSElasticBlockStore = new(AWSElasticBlockStoreVolumeSource)
		}
		x.AWSElasticBlockStore.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.HostPath == nil {
		x.PersistentVolumeSource.HostPath = new(HostPathVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HostPath != nil {
			x.HostPath = nil
		}
	} else {
		if x.HostPath == nil {
			x.HostPath = new(HostPathVolumeSource)
		}
		x.HostPath.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Glusterfs == nil {
		x.PersistentVolumeSource.Glusterfs = new(GlusterfsVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Glusterfs != nil {
			x.Glusterfs = nil
		}
	} else {
		if x.Glusterfs == nil {
			x.Glusterfs = new(GlusterfsVolumeSource)
		}
		x.Glusterfs.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.NFS == nil {
		x.PersistentVolumeSource.NFS = new(NFSVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NFS != nil {
			x.NFS = nil
		}
	} else {
		if x.NFS == nil {
			x.NFS = new(NFSVolumeSource)
		}
		x.NFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.RBD == nil {
		x.PersistentVolumeSource.RBD = new(RBDVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RBD != nil {
			x.RBD = nil
		}
	} else {
		if x.RBD == nil {
			x.RBD = new(RBDVolumeSource)
		}
		x.RBD.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Quobyte == nil {
		x.PersistentVolumeSource.Quobyte = new(QuobyteVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Quobyte != nil {
			x.Quobyte = nil
		}
	} else {
		if x.Quobyte == nil {
			x.Quobyte = new(QuobyteVolumeSource)
		}
		x.Quobyte.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.ISCSI == nil {
		x.PersistentVolumeSource.ISCSI = new(ISCSIVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ISCSI != nil {
			x.ISCSI = nil
		}
	} else {
		if x.ISCSI == nil {
			x.ISCSI = new(ISCSIVolumeSource)
		}
		x.ISCSI.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FlexVolume == nil {
		x.PersistentVolumeSource.FlexVolume = new(FlexVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FlexVolume != nil {
			x.FlexVolume = nil
		}
	} else {
		if x.FlexVolume == nil {
			x.FlexVolume = new(FlexVolumeSource)
		}
		x.FlexVolume.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Cinder == nil {
		x.PersistentVolumeSource.Cinder = new(CinderVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Cinder != nil {
			x.Cinder = nil
		}
	} else {
		if x.Cinder == nil {
			x.Cinder = new(CinderVolumeSource)
		}
		x.Cinder.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.CephFS == nil {
		x.PersistentVolumeSource.CephFS = new(CephFSVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.CephFS != nil {
			x.CephFS = nil
		}
	} else {
		if x.CephFS == nil {
			x.CephFS = new(CephFSVolumeSource)
		}
		x.CephFS.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.FC == nil {
		x.PersistentVolumeSource.FC = new(FCVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FC != nil {
			x.FC = nil
		}
	} else {
		if x.FC == nil {
			x.FC = new(FCVolumeSource)
		}
		x.FC.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.Flocker == nil {
		x.PersistentVolumeSource.Flocker = new(FlockerVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Flocker != nil {
			x.Flocker = nil
		}
	} else {
		if x.Flocker == nil {
			x.Flocker = new(FlockerVolumeSource)
		}
		x.Flocker.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.AzureFile == nil {
		x.PersistentVolumeSource.AzureFile = new(AzureFileVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.AzureFile != nil {
			x.AzureFile = nil
		}
	} else {
		if x.AzureFile == nil {
			x.AzureFile = new(AzureFileVolumeSource)
		}
		x.AzureFile.CodecDecodeSelf(d)
	}
	if x.PersistentVolumeSource.VsphereVolume == nil {
		x.PersistentVolumeSource.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.VsphereVolume != nil {
			x.VsphereVolume = nil
		}
	} else {
		if x.VsphereVolume == nil {
			x.VsphereVolume = new(VsphereVirtualDiskVolumeSource)
		}
		x.VsphereVolume.CodecDecodeSelf(d)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv399 := &x.AccessModes
		yym400 := z.DecBinary()
		_ = yym400
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv399), d)
		}
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ClaimRef != nil {
			x.ClaimRef = nil
		}
	} else {
		if x.ClaimRef == nil {
			x.ClaimRef = new(ObjectReference)
		}
		x.ClaimRef.CodecDecodeSelf(d)
	}
	yyj382++
	if yyhl382 {
		yyb382 = yyj382 > l
	} else {
		yyb382 = r.CheckBreak()
	}
	if yyb382 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PersistentVolumeReclaimPolicy = ""
	} else {
		x.PersistentVolumeReclaimPolicy = PersistentVolumeReclaimPolicy(r.DecodeString())
	}
	for {
		yyj382++
		if yyhl382 {
			yyb382 = yyj382 > l
		} else {
			yyb382 = r.CheckBreak()
		}
		if yyb382 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj382-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeReclaimPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym403 := z.EncBinary()
	_ = yym403
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeReclaimPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym404 := z.DecBinary()
	_ = yym404
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PersistentVolumeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym405 := z.EncBinary()
		_ = yym405
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep406 := !z.EncBinary()
			yy2arr406 := z.EncBasicHandle().StructToArray
			var yyq406 [3]bool
			_, _, _ = yysep406, yyq406, yy2arr406
			const yyr406 bool = false
			yyq406[0] = x.Phase != ""
			yyq406[1] = x.Message != ""
			yyq406[2] = x.Reason != ""
			var yynn406 int
			if yyr406 || yy2arr406 {
				r.EncodeArrayStart(3)
			} else {
				yynn406 = 0
				for _, b := range yyq406 {
					if b {
						yynn406++
					}
				}
				r.EncodeMapStart(yynn406)
				yynn406 = 0
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[1] {
					yym409 := z.EncBinary()
					_ = yym409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym410 := z.EncBinary()
					_ = yym410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq406[2] {
					yym412 := z.EncBinary()
					_ = yym412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq406[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym413 := z.EncBinary()
					_ = yym413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr406 || yy2arr406 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym414 := z.DecBinary()
	_ = yym414
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct415 := r.ContainerType()
		if yyct415 == codecSelferValueTypeMap1234 {
			yyl415 := r.ReadMapStart()
			if yyl415 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl415, d)
			}
		} else if yyct415 == codecSelferValueTypeArray1234 {
			yyl415 := r.ReadArrayStart()
			if yyl415 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl415, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys416Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys416Slc
	var yyhl416 bool = l >= 0
	for yyj416 := 0; ; yyj416++ {
		if yyhl416 {
			if yyj416 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys416Slc = r.DecodeBytes(yys416Slc, true, true)
		yys416 := string(yys416Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys416 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumePhase(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys416)
		} // end switch yys416
	} // end for yyj416
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj420 int
	var yyb420 bool
	var yyhl420 bool = l >= 0
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumePhase(r.DecodeString())
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj420++
	if yyhl420 {
		yyb420 = yyj420 > l
	} else {
		yyb420 = r.CheckBreak()
	}
	if yyb420 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	for {
		yyj420++
		if yyhl420 {
			yyb420 = yyj420 > l
		} else {
			yyb420 = r.CheckBreak()
		}
		if yyb420 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj420-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym424 := z.EncBinary()
		_ = yym424
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep425 := !z.EncBinary()
			yy2arr425 := z.EncBasicHandle().StructToArray
			var yyq425 [4]bool
			_, _, _ = yysep425, yyq425, yy2arr425
			const yyr425 bool = false
			yyq425[0] = x.Kind != ""
			yyq425[1] = x.APIVersion != ""
			yyq425[2] = true
			var yynn425 int
			if yyr425 || yy2arr425 {
				r.EncodeArrayStart(4)
			} else {
				yynn425 = 1
				for _, b := range yyq425 {
					if b {
						yynn425++
					}
				}
				r.EncodeMapStart(yynn425)
				yynn425 = 0
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq425[0] {
					yym427 := z.EncBinary()
					_ = yym427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq425[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym428 := z.EncBinary()
					_ = yym428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq425[1] {
					yym430 := z.EncBinary()
					_ = yym430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq425[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym431 := z.EncBinary()
					_ = yym431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq425[2] {
					yy433 := &x.ListMeta
					yym434 := z.EncBinary()
					_ = yym434
					if false {
					} else if z.HasExtensions() && z.EncExt(yy433) {
					} else {
						z.EncFallback(yy433)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq425[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy435 := &x.ListMeta
					yym436 := z.EncBinary()
					_ = yym436
					if false {
					} else if z.HasExtensions() && z.EncExt(yy435) {
					} else {
						z.EncFallback(yy435)
					}
				}
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym438 := z.EncBinary()
					_ = yym438
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym439 := z.EncBinary()
					_ = yym439
					if false {
					} else {
						h.encSlicePersistentVolume(([]PersistentVolume)(x.Items), e)
					}
				}
			}
			if yyr425 || yy2arr425 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym440 := z.DecBinary()
	_ = yym440
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct441 := r.ContainerType()
		if yyct441 == codecSelferValueTypeMap1234 {
			yyl441 := r.ReadMapStart()
			if yyl441 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl441, d)
			}
		} else if yyct441 == codecSelferValueTypeArray1234 {
			yyl441 := r.ReadArrayStart()
			if yyl441 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl441, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys442Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys442Slc
	var yyhl442 bool = l >= 0
	for yyj442 := 0; ; yyj442++ {
		if yyhl442 {
			if yyj442 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys442Slc = r.DecodeBytes(yys442Slc, true, true)
		yys442 := string(yys442Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys442 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv445 := &x.ListMeta
				yym446 := z.DecBinary()
				_ = yym446
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv445) {
				} else {
					z.DecFallback(yyv445, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv447 := &x.Items
				yym448 := z.DecBinary()
				_ = yym448
				if false {
				} else {
					h.decSlicePersistentVolume((*[]PersistentVolume)(yyv447), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys442)
		} // end switch yys442
	} // end for yyj442
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj449 int
	var yyb449 bool
	var yyhl449 bool = l >= 0
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv452 := &x.ListMeta
		yym453 := z.DecBinary()
		_ = yym453
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv452) {
		} else {
			z.DecFallback(yyv452, false)
		}
	}
	yyj449++
	if yyhl449 {
		yyb449 = yyj449 > l
	} else {
		yyb449 = r.CheckBreak()
	}
	if yyb449 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv454 := &x.Items
		yym455 := z.DecBinary()
		_ = yym455
		if false {
		} else {
			h.decSlicePersistentVolume((*[]PersistentVolume)(yyv454), d)
		}
	}
	for {
		yyj449++
		if yyhl449 {
			yyb449 = yyj449 > l
		} else {
			yyb449 = r.CheckBreak()
		}
		if yyb449 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj449-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaim) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym456 := z.EncBinary()
		_ = yym456
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep457 := !z.EncBinary()
			yy2arr457 := z.EncBasicHandle().StructToArray
			var yyq457 [5]bool
			_, _, _ = yysep457, yyq457, yy2arr457
			const yyr457 bool = false
			yyq457[0] = x.Kind != ""
			yyq457[1] = x.APIVersion != ""
			yyq457[2] = true
			yyq457[3] = true
			yyq457[4] = true
			var yynn457 int
			if yyr457 || yy2arr457 {
				r.EncodeArrayStart(5)
			} else {
				yynn457 = 0
				for _, b := range yyq457 {
					if b {
						yynn457++
					}
				}
				r.EncodeMapStart(yynn457)
				yynn457 = 0
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq457[0] {
					yym459 := z.EncBinary()
					_ = yym459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq457[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym460 := z.EncBinary()
					_ = yym460
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq457[1] {
					yym462 := z.EncBinary()
					_ = yym462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq457[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym463 := z.EncBinary()
					_ = yym463
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq457[2] {
					yy465 := &x.ObjectMeta
					yy465.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq457[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy466 := &x.ObjectMeta
					yy466.CodecEncodeSelf(e)
				}
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq457[3] {
					yy468 := &x.Spec
					yy468.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq457[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy469 := &x.Spec
					yy469.CodecEncodeSelf(e)
				}
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq457[4] {
					yy471 := &x.Status
					yy471.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq457[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy472 := &x.Status
					yy472.CodecEncodeSelf(e)
				}
			}
			if yyr457 || yy2arr457 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaim) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym473 := z.DecBinary()
	_ = yym473
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct474 := r.ContainerType()
		if yyct474 == codecSelferValueTypeMap1234 {
			yyl474 := r.ReadMapStart()
			if yyl474 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl474, d)
			}
		} else if yyct474 == codecSelferValueTypeArray1234 {
			yyl474 := r.ReadArrayStart()
			if yyl474 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl474, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys475Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys475Slc
	var yyhl475 bool = l >= 0
	for yyj475 := 0; ; yyj475++ {
		if yyhl475 {
			if yyj475 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys475Slc = r.DecodeBytes(yys475Slc, true, true)
		yys475 := string(yys475Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys475 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv478 := &x.ObjectMeta
				yyv478.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PersistentVolumeClaimSpec{}
			} else {
				yyv479 := &x.Spec
				yyv479.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PersistentVolumeClaimStatus{}
			} else {
				yyv480 := &x.Status
				yyv480.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys475)
		} // end switch yys475
	} // end for yyj475
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaim) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj481 int
	var yyb481 bool
	var yyhl481 bool = l >= 0
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv484 := &x.ObjectMeta
		yyv484.CodecDecodeSelf(d)
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PersistentVolumeClaimSpec{}
	} else {
		yyv485 := &x.Spec
		yyv485.CodecDecodeSelf(d)
	}
	yyj481++
	if yyhl481 {
		yyb481 = yyj481 > l
	} else {
		yyb481 = r.CheckBreak()
	}
	if yyb481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PersistentVolumeClaimStatus{}
	} else {
		yyv486 := &x.Status
		yyv486.CodecDecodeSelf(d)
	}
	for {
		yyj481++
		if yyhl481 {
			yyb481 = yyj481 > l
		} else {
			yyb481 = r.CheckBreak()
		}
		if yyb481 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj481-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym487 := z.EncBinary()
		_ = yym487
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep488 := !z.EncBinary()
			yy2arr488 := z.EncBasicHandle().StructToArray
			var yyq488 [4]bool
			_, _, _ = yysep488, yyq488, yy2arr488
			const yyr488 bool = false
			yyq488[0] = x.Kind != ""
			yyq488[1] = x.APIVersion != ""
			yyq488[2] = true
			var yynn488 int
			if yyr488 || yy2arr488 {
				r.EncodeArrayStart(4)
			} else {
				yynn488 = 1
				for _, b := range yyq488 {
					if b {
						yynn488++
					}
				}
				r.EncodeMapStart(yynn488)
				yynn488 = 0
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq488[0] {
					yym490 := z.EncBinary()
					_ = yym490
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq488[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym491 := z.EncBinary()
					_ = yym491
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq488[1] {
					yym493 := z.EncBinary()
					_ = yym493
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq488[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym494 := z.EncBinary()
					_ = yym494
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq488[2] {
					yy496 := &x.ListMeta
					yym497 := z.EncBinary()
					_ = yym497
					if false {
					} else if z.HasExtensions() && z.EncExt(yy496) {
					} else {
						z.EncFallback(yy496)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq488[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy498 := &x.ListMeta
					yym499 := z.EncBinary()
					_ = yym499
					if false {
					} else if z.HasExtensions() && z.EncExt(yy498) {
					} else {
						z.EncFallback(yy498)
					}
				}
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym501 := z.EncBinary()
					_ = yym501
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym502 := z.EncBinary()
					_ = yym502
					if false {
					} else {
						h.encSlicePersistentVolumeClaim(([]PersistentVolumeClaim)(x.Items), e)
					}
				}
			}
			if yyr488 || yy2arr488 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym503 := z.DecBinary()
	_ = yym503
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct504 := r.ContainerType()
		if yyct504 == codecSelferValueTypeMap1234 {
			yyl504 := r.ReadMapStart()
			if yyl504 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl504, d)
			}
		} else if yyct504 == codecSelferValueTypeArray1234 {
			yyl504 := r.ReadArrayStart()
			if yyl504 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl504, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys505Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys505Slc
	var yyhl505 bool = l >= 0
	for yyj505 := 0; ; yyj505++ {
		if yyhl505 {
			if yyj505 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys505Slc = r.DecodeBytes(yys505Slc, true, true)
		yys505 := string(yys505Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys505 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv508 := &x.ListMeta
				yym509 := z.DecBinary()
				_ = yym509
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv508) {
				} else {
					z.DecFallback(yyv508, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv510 := &x.Items
				yym511 := z.DecBinary()
				_ = yym511
				if false {
				} else {
					h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv510), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys505)
		} // end switch yys505
	} // end for yyj505
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj512 int
	var yyb512 bool
	var yyhl512 bool = l >= 0
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv515 := &x.ListMeta
		yym516 := z.DecBinary()
		_ = yym516
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv515) {
		} else {
			z.DecFallback(yyv515, false)
		}
	}
	yyj512++
	if yyhl512 {
		yyb512 = yyj512 > l
	} else {
		yyb512 = r.CheckBreak()
	}
	if yyb512 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv517 := &x.Items
		yym518 := z.DecBinary()
		_ = yym518
		if false {
		} else {
			h.decSlicePersistentVolumeClaim((*[]PersistentVolumeClaim)(yyv517), d)
		}
	}
	for {
		yyj512++
		if yyhl512 {
			yyb512 = yyj512 > l
		} else {
			yyb512 = r.CheckBreak()
		}
		if yyb512 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj512-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym519 := z.EncBinary()
		_ = yym519
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep520 := !z.EncBinary()
			yy2arr520 := z.EncBasicHandle().StructToArray
			var yyq520 [4]bool
			_, _, _ = yysep520, yyq520, yy2arr520
			const yyr520 bool = false
			yyq520[0] = len(x.AccessModes) != 0
			yyq520[1] = x.Selector != nil
			yyq520[2] = true
			yyq520[3] = x.VolumeName != ""
			var yynn520 int
			if yyr520 || yy2arr520 {
				r.EncodeArrayStart(4)
			} else {
				yynn520 = 0
				for _, b := range yyq520 {
					if b {
						yynn520++
					}
				}
				r.EncodeMapStart(yynn520)
				yynn520 = 0
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq520[0] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym522 := z.EncBinary()
						_ = yym522
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq520[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym523 := z.EncBinary()
						_ = yym523
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq520[1] {
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym525 := z.EncBinary()
						_ = yym525
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq520[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("selector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Selector == nil {
						r.EncodeNil()
					} else {
						yym526 := z.EncBinary()
						_ = yym526
						if false {
						} else if z.HasExtensions() && z.EncExt(x.Selector) {
						} else {
							z.EncFallback(x.Selector)
						}
					}
				}
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq520[2] {
					yy528 := &x.Resources
					yy528.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq520[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy529 := &x.Resources
					yy529.CodecEncodeSelf(e)
				}
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq520[3] {
					yym531 := z.EncBinary()
					_ = yym531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq520[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym532 := z.EncBinary()
					_ = yym532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.VolumeName))
					}
				}
			}
			if yyr520 || yy2arr520 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym533 := z.DecBinary()
	_ = yym533
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct534 := r.ContainerType()
		if yyct534 == codecSelferValueTypeMap1234 {
			yyl534 := r.ReadMapStart()
			if yyl534 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl534, d)
			}
		} else if yyct534 == codecSelferValueTypeArray1234 {
			yyl534 := r.ReadArrayStart()
			if yyl534 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl534, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys535Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys535Slc
	var yyhl535 bool = l >= 0
	for yyj535 := 0; ; yyj535++ {
		if yyhl535 {
			if yyj535 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys535Slc = r.DecodeBytes(yys535Slc, true, true)
		yys535 := string(yys535Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys535 {
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv536 := &x.AccessModes
				yym537 := z.DecBinary()
				_ = yym537
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv536), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				if x.Selector != nil {
					x.Selector = nil
				}
			} else {
				if x.Selector == nil {
					x.Selector = new(pkg2_unversioned.LabelSelector)
				}
				yym539 := z.DecBinary()
				_ = yym539
				if false {
				} else if z.HasExtensions() && z.DecExt(x.Selector) {
				} else {
					z.DecFallback(x.Selector, false)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv540 := &x.Resources
				yyv540.CodecDecodeSelf(d)
			}
		case "volumeName":
			if r.TryDecodeAsNil() {
				x.VolumeName = ""
			} else {
				x.VolumeName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys535)
		} // end switch yys535
	} // end for yyj535
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj542 int
	var yyb542 bool
	var yyhl542 bool = l >= 0
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv543 := &x.AccessModes
		yym544 := z.DecBinary()
		_ = yym544
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv543), d)
		}
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Selector != nil {
			x.Selector = nil
		}
	} else {
		if x.Selector == nil {
			x.Selector = new(pkg2_unversioned.LabelSelector)
		}
		yym546 := z.DecBinary()
		_ = yym546
		if false {
		} else if z.HasExtensions() && z.DecExt(x.Selector) {
		} else {
			z.DecFallback(x.Selector, false)
		}
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv547 := &x.Resources
		yyv547.CodecDecodeSelf(d)
	}
	yyj542++
	if yyhl542 {
		yyb542 = yyj542 > l
	} else {
		yyb542 = r.CheckBreak()
	}
	if yyb542 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeName = ""
	} else {
		x.VolumeName = string(r.DecodeString())
	}
	for {
		yyj542++
		if yyhl542 {
			yyb542 = yyj542 > l
		} else {
			yyb542 = r.CheckBreak()
		}
		if yyb542 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj542-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PersistentVolumeClaimStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym549 := z.EncBinary()
		_ = yym549
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep550 := !z.EncBinary()
			yy2arr550 := z.EncBasicHandle().StructToArray
			var yyq550 [3]bool
			_, _, _ = yysep550, yyq550, yy2arr550
			const yyr550 bool = false
			yyq550[0] = x.Phase != ""
			yyq550[1] = len(x.AccessModes) != 0
			yyq550[2] = len(x.Capacity) != 0
			var yynn550 int
			if yyr550 || yy2arr550 {
				r.EncodeArrayStart(3)
			} else {
				yynn550 = 0
				for _, b := range yyq550 {
					if b {
						yynn550++
					}
				}
				r.EncodeMapStart(yynn550)
				yynn550 = 0
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq550[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[1] {
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym553 := z.EncBinary()
						_ = yym553
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq550[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("accessModes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.AccessModes == nil {
						r.EncodeNil()
					} else {
						yym554 := z.EncBinary()
						_ = yym554
						if false {
						} else {
							h.encSlicePersistentVolumeAccessMode(([]PersistentVolumeAccessMode)(x.AccessModes), e)
						}
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq550[2] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq550[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr550 || yy2arr550 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PersistentVolumeClaimStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym556 := z.DecBinary()
	_ = yym556
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct557 := r.ContainerType()
		if yyct557 == codecSelferValueTypeMap1234 {
			yyl557 := r.ReadMapStart()
			if yyl557 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl557, d)
			}
		} else if yyct557 == codecSelferValueTypeArray1234 {
			yyl557 := r.ReadArrayStart()
			if yyl557 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl557, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys558Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys558Slc
	var yyhl558 bool = l >= 0
	for yyj558 := 0; ; yyj558++ {
		if yyhl558 {
			if yyj558 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys558Slc = r.DecodeBytes(yys558Slc, true, true)
		yys558 := string(yys558Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys558 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
			}
		case "accessModes":
			if r.TryDecodeAsNil() {
				x.AccessModes = nil
			} else {
				yyv560 := &x.AccessModes
				yym561 := z.DecBinary()
				_ = yym561
				if false {
				} else {
					h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv560), d)
				}
			}
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv562 := &x.Capacity
				yyv562.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys558)
		} // end switch yys558
	} // end for yyj558
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PersistentVolumeClaimStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj563 int
	var yyb563 bool
	var yyhl563 bool = l >= 0
	yyj563++
	if yyhl563 {
		yyb563 = yyj563 > l
	} else {
		yyb563 = r.CheckBreak()
	}
	if yyb563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PersistentVolumeClaimPhase(r.DecodeString())
	}
	yyj563++
	if yyhl563 {
		yyb563 = yyj563 > l
	} else {
		yyb563 = r.CheckBreak()
	}
	if yyb563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.AccessModes = nil
	} else {
		yyv565 := &x.AccessModes
		yym566 := z.DecBinary()
		_ = yym566
		if false {
		} else {
			h.decSlicePersistentVolumeAccessMode((*[]PersistentVolumeAccessMode)(yyv565), d)
		}
	}
	yyj563++
	if yyhl563 {
		yyb563 = yyj563 > l
	} else {
		yyb563 = r.CheckBreak()
	}
	if yyb563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv567 := &x.Capacity
		yyv567.CodecDecodeSelf(d)
	}
	for {
		yyj563++
		if yyhl563 {
			yyb563 = yyj563 > l
		} else {
			yyb563 = r.CheckBreak()
		}
		if yyb563 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj563-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PersistentVolumeAccessMode) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym568 := z.EncBinary()
	_ = yym568
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeAccessMode) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym569 := z.DecBinary()
	_ = yym569
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym570 := z.EncBinary()
	_ = yym570
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym571 := z.DecBinary()
	_ = yym571
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PersistentVolumeClaimPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym572 := z.EncBinary()
	_ = yym572
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PersistentVolumeClaimPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym573 := z.DecBinary()
	_ = yym573
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *HostPathVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym574 := z.EncBinary()
		_ = yym574
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep575 := !z.EncBinary()
			yy2arr575 := z.EncBasicHandle().StructToArray
			var yyq575 [1]bool
			_, _, _ = yysep575, yyq575, yy2arr575
			const yyr575 bool = false
			var yynn575 int
			if yyr575 || yy2arr575 {
				r.EncodeArrayStart(1)
			} else {
				yynn575 = 1
				for _, b := range yyq575 {
					if b {
						yynn575++
					}
				}
				r.EncodeMapStart(yynn575)
				yynn575 = 0
			}
			if yyr575 || yy2arr575 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym577 := z.EncBinary()
				_ = yym577
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym578 := z.EncBinary()
				_ = yym578
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr575 || yy2arr575 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HostPathVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym579 := z.DecBinary()
	_ = yym579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct580 := r.ContainerType()
		if yyct580 == codecSelferValueTypeMap1234 {
			yyl580 := r.ReadMapStart()
			if yyl580 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl580, d)
			}
		} else if yyct580 == codecSelferValueTypeArray1234 {
			yyl580 := r.ReadArrayStart()
			if yyl580 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl580, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HostPathVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys581Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys581Slc
	var yyhl581 bool = l >= 0
	for yyj581 := 0; ; yyj581++ {
		if yyhl581 {
			if yyj581 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys581Slc = r.DecodeBytes(yys581Slc, true, true)
		yys581 := string(yys581Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys581 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys581)
		} // end switch yys581
	} // end for yyj581
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HostPathVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj583 int
	var yyb583 bool
	var yyhl583 bool = l >= 0
	yyj583++
	if yyhl583 {
		yyb583 = yyj583 > l
	} else {
		yyb583 = r.CheckBreak()
	}
	if yyb583 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj583++
		if yyhl583 {
			yyb583 = yyj583 > l
		} else {
			yyb583 = r.CheckBreak()
		}
		if yyb583 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj583-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EmptyDirVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym585 := z.EncBinary()
		_ = yym585
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep586 := !z.EncBinary()
			yy2arr586 := z.EncBasicHandle().StructToArray
			var yyq586 [1]bool
			_, _, _ = yysep586, yyq586, yy2arr586
			const yyr586 bool = false
			yyq586[0] = x.Medium != ""
			var yynn586 int
			if yyr586 || yy2arr586 {
				r.EncodeArrayStart(1)
			} else {
				yynn586 = 0
				for _, b := range yyq586 {
					if b {
						yynn586++
					}
				}
				r.EncodeMapStart(yynn586)
				yynn586 = 0
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq586[0] {
					x.Medium.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq586[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("medium"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Medium.CodecEncodeSelf(e)
				}
			}
			if yyr586 || yy2arr586 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EmptyDirVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym588 := z.DecBinary()
	_ = yym588
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct589 := r.ContainerType()
		if yyct589 == codecSelferValueTypeMap1234 {
			yyl589 := r.ReadMapStart()
			if yyl589 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl589, d)
			}
		} else if yyct589 == codecSelferValueTypeArray1234 {
			yyl589 := r.ReadArrayStart()
			if yyl589 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl589, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys590Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys590Slc
	var yyhl590 bool = l >= 0
	for yyj590 := 0; ; yyj590++ {
		if yyhl590 {
			if yyj590 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys590Slc = r.DecodeBytes(yys590Slc, true, true)
		yys590 := string(yys590Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys590 {
		case "medium":
			if r.TryDecodeAsNil() {
				x.Medium = ""
			} else {
				x.Medium = StorageMedium(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys590)
		} // end switch yys590
	} // end for yyj590
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EmptyDirVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj592 int
	var yyb592 bool
	var yyhl592 bool = l >= 0
	yyj592++
	if yyhl592 {
		yyb592 = yyj592 > l
	} else {
		yyb592 = r.CheckBreak()
	}
	if yyb592 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Medium = ""
	} else {
		x.Medium = StorageMedium(r.DecodeString())
	}
	for {
		yyj592++
		if yyhl592 {
			yyb592 = yyj592 > l
		} else {
			yyb592 = r.CheckBreak()
		}
		if yyb592 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj592-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x StorageMedium) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym594 := z.EncBinary()
	_ = yym594
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *StorageMedium) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym595 := z.DecBinary()
	_ = yym595
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Protocol) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym596 := z.EncBinary()
	_ = yym596
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Protocol) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym597 := z.DecBinary()
	_ = yym597
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym598 := z.EncBinary()
		_ = yym598
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep599 := !z.EncBinary()
			yy2arr599 := z.EncBasicHandle().StructToArray
			var yyq599 [4]bool
			_, _, _ = yysep599, yyq599, yy2arr599
			const yyr599 bool = false
			yyq599[1] = x.FSType != ""
			yyq599[2] = x.Partition != 0
			yyq599[3] = x.ReadOnly != false
			var yynn599 int
			if yyr599 || yy2arr599 {
				r.EncodeArrayStart(4)
			} else {
				yynn599 = 1
				for _, b := range yyq599 {
					if b {
						yynn599++
					}
				}
				r.EncodeMapStart(yynn599)
				yynn599 = 0
			}
			if yyr599 || yy2arr599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym601 := z.EncBinary()
				_ = yym601
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("pdName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym602 := z.EncBinary()
				_ = yym602
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.PDName))
				}
			}
			if yyr599 || yy2arr599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq599[1] {
					yym604 := z.EncBinary()
					_ = yym604
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq599[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym605 := z.EncBinary()
					_ = yym605
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr599 || yy2arr599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq599[2] {
					yym607 := z.EncBinary()
					_ = yym607
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq599[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym608 := z.EncBinary()
					_ = yym608
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr599 || yy2arr599 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq599[3] {
					yym610 := z.EncBinary()
					_ = yym610
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq599[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym611 := z.EncBinary()
					_ = yym611
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr599 || yy2arr599 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym612 := z.DecBinary()
	_ = yym612
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct613 := r.ContainerType()
		if yyct613 == codecSelferValueTypeMap1234 {
			yyl613 := r.ReadMapStart()
			if yyl613 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl613, d)
			}
		} else if yyct613 == codecSelferValueTypeArray1234 {
			yyl613 := r.ReadArrayStart()
			if yyl613 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl613, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys614Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys614Slc
	var yyhl614 bool = l >= 0
	for yyj614 := 0; ; yyj614++ {
		if yyhl614 {
			if yyj614 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys614Slc = r.DecodeBytes(yys614Slc, true, true)
		yys614 := string(yys614Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys614 {
		case "pdName":
			if r.TryDecodeAsNil() {
				x.PDName = ""
			} else {
				x.PDName = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys614)
		} // end switch yys614
	} // end for yyj614
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GCEPersistentDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj619 int
	var yyb619 bool
	var yyhl619 bool = l >= 0
	yyj619++
	if yyhl619 {
		yyb619 = yyj619 > l
	} else {
		yyb619 = r.CheckBreak()
	}
	if yyb619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PDName = ""
	} else {
		x.PDName = string(r.DecodeString())
	}
	yyj619++
	if yyhl619 {
		yyb619 = yyj619 > l
	} else {
		yyb619 = r.CheckBreak()
	}
	if yyb619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj619++
	if yyhl619 {
		yyb619 = yyj619 > l
	} else {
		yyb619 = r.CheckBreak()
	}
	if yyb619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj619++
	if yyhl619 {
		yyb619 = yyj619 > l
	} else {
		yyb619 = r.CheckBreak()
	}
	if yyb619 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj619++
		if yyhl619 {
			yyb619 = yyj619 > l
		} else {
			yyb619 = r.CheckBreak()
		}
		if yyb619 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj619-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ISCSIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym624 := z.EncBinary()
		_ = yym624
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep625 := !z.EncBinary()
			yy2arr625 := z.EncBasicHandle().StructToArray
			var yyq625 [6]bool
			_, _, _ = yysep625, yyq625, yy2arr625
			const yyr625 bool = false
			yyq625[0] = x.TargetPortal != ""
			yyq625[1] = x.IQN != ""
			yyq625[2] = x.Lun != 0
			yyq625[3] = x.ISCSIInterface != ""
			yyq625[4] = x.FSType != ""
			yyq625[5] = x.ReadOnly != false
			var yynn625 int
			if yyr625 || yy2arr625 {
				r.EncodeArrayStart(6)
			} else {
				yynn625 = 0
				for _, b := range yyq625 {
					if b {
						yynn625++
					}
				}
				r.EncodeMapStart(yynn625)
				yynn625 = 0
			}
			if yyr625 || yy2arr625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq625[0] {
					yym627 := z.EncBinary()
					_ = yym627
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq625[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("targetPortal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym628 := z.EncBinary()
					_ = yym628
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TargetPortal))
					}
				}
			}
			if yyr625 || yy2arr625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq625[1] {
					yym630 := z.EncBinary()
					_ = yym630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq625[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iqn"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym631 := z.EncBinary()
					_ = yym631
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IQN))
					}
				}
			}
			if yyr625 || yy2arr625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq625[2] {
					yym633 := z.EncBinary()
					_ = yym633
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq625[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lun"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym634 := z.EncBinary()
					_ = yym634
					if false {
					} else {
						r.EncodeInt(int64(x.Lun))
					}
				}
			}
			if yyr625 || yy2arr625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq625[3] {
					yym636 := z.EncBinary()
					_ = yym636
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq625[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("iscsiInterface"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym637 := z.EncBinary()
					_ = yym637
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ISCSIInterface))
					}
				}
			}
			if yyr625 || yy2arr625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq625[4] {
					yym639 := z.EncBinary()
					_ = yym639
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq625[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym640 := z.EncBinary()
					_ = yym640
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr625 || yy2arr625 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq625[5] {
					yym642 := z.EncBinary()
					_ = yym642
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq625[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym643 := z.EncBinary()
					_ = yym643
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr625 || yy2arr625 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ISCSIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym644 := z.DecBinary()
	_ = yym644
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct645 := r.ContainerType()
		if yyct645 == codecSelferValueTypeMap1234 {
			yyl645 := r.ReadMapStart()
			if yyl645 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl645, d)
			}
		} else if yyct645 == codecSelferValueTypeArray1234 {
			yyl645 := r.ReadArrayStart()
			if yyl645 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl645, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys646Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys646Slc
	var yyhl646 bool = l >= 0
	for yyj646 := 0; ; yyj646++ {
		if yyhl646 {
			if yyj646 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys646Slc = r.DecodeBytes(yys646Slc, true, true)
		yys646 := string(yys646Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys646 {
		case "targetPortal":
			if r.TryDecodeAsNil() {
				x.TargetPortal = ""
			} else {
				x.TargetPortal = string(r.DecodeString())
			}
		case "iqn":
			if r.TryDecodeAsNil() {
				x.IQN = ""
			} else {
				x.IQN = string(r.DecodeString())
			}
		case "lun":
			if r.TryDecodeAsNil() {
				x.Lun = 0
			} else {
				x.Lun = int32(r.DecodeInt(32))
			}
		case "iscsiInterface":
			if r.TryDecodeAsNil() {
				x.ISCSIInterface = ""
			} else {
				x.ISCSIInterface = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys646)
		} // end switch yys646
	} // end for yyj646
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ISCSIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj653 int
	var yyb653 bool
	var yyhl653 bool = l >= 0
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPortal = ""
	} else {
		x.TargetPortal = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IQN = ""
	} else {
		x.IQN = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Lun = 0
	} else {
		x.Lun = int32(r.DecodeInt(32))
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ISCSIInterface = ""
	} else {
		x.ISCSIInterface = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj653++
	if yyhl653 {
		yyb653 = yyj653 > l
	} else {
		yyb653 = r.CheckBreak()
	}
	if yyb653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj653++
		if yyhl653 {
			yyb653 = yyj653 > l
		} else {
			yyb653 = r.CheckBreak()
		}
		if yyb653 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj653-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FCVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym660 := z.EncBinary()
		_ = yym660
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep661 := !z.EncBinary()
			yy2arr661 := z.EncBasicHandle().StructToArray
			var yyq661 [4]bool
			_, _, _ = yysep661, yyq661, yy2arr661
			const yyr661 bool = false
			yyq661[2] = x.FSType != ""
			yyq661[3] = x.ReadOnly != false
			var yynn661 int
			if yyr661 || yy2arr661 {
				r.EncodeArrayStart(4)
			} else {
				yynn661 = 2
				for _, b := range yyq661 {
					if b {
						yynn661++
					}
				}
				r.EncodeMapStart(yynn661)
				yynn661 = 0
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym663 := z.EncBinary()
					_ = yym663
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetWWNs"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetWWNs == nil {
					r.EncodeNil()
				} else {
					yym664 := z.EncBinary()
					_ = yym664
					if false {
					} else {
						z.F.EncSliceStringV(x.TargetWWNs, false, e)
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy666 := *x.Lun
					yym667 := z.EncBinary()
					_ = yym667
					if false {
					} else {
						r.EncodeInt(int64(yy666))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("lun"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Lun == nil {
					r.EncodeNil()
				} else {
					yy668 := *x.Lun
					yym669 := z.EncBinary()
					_ = yym669
					if false {
					} else {
						r.EncodeInt(int64(yy668))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[2] {
					yym671 := z.EncBinary()
					_ = yym671
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq661[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym672 := z.EncBinary()
					_ = yym672
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq661[3] {
					yym674 := z.EncBinary()
					_ = yym674
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq661[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym675 := z.EncBinary()
					_ = yym675
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr661 || yy2arr661 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FCVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym676 := z.DecBinary()
	_ = yym676
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct677 := r.ContainerType()
		if yyct677 == codecSelferValueTypeMap1234 {
			yyl677 := r.ReadMapStart()
			if yyl677 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl677, d)
			}
		} else if yyct677 == codecSelferValueTypeArray1234 {
			yyl677 := r.ReadArrayStart()
			if yyl677 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl677, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FCVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys678Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys678Slc
	var yyhl678 bool = l >= 0
	for yyj678 := 0; ; yyj678++ {
		if yyhl678 {
			if yyj678 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys678Slc = r.DecodeBytes(yys678Slc, true, true)
		yys678 := string(yys678Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys678 {
		case "targetWWNs":
			if r.TryDecodeAsNil() {
				x.TargetWWNs = nil
			} else {
				yyv679 := &x.TargetWWNs
				yym680 := z.DecBinary()
				_ = yym680
				if false {
				} else {
					z.F.DecSliceStringX(yyv679, false, d)
				}
			}
		case "lun":
			if r.TryDecodeAsNil() {
				if x.Lun != nil {
					x.Lun = nil
				}
			} else {
				if x.Lun == nil {
					x.Lun = new(int32)
				}
				yym682 := z.DecBinary()
				_ = yym682
				if false {
				} else {
					*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
				}
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys678)
		} // end switch yys678
	} // end for yyj678
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FCVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj685 int
	var yyb685 bool
	var yyhl685 bool = l >= 0
	yyj685++
	if yyhl685 {
		yyb685 = yyj685 > l
	} else {
		yyb685 = r.CheckBreak()
	}
	if yyb685 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetWWNs = nil
	} else {
		yyv686 := &x.TargetWWNs
		yym687 := z.DecBinary()
		_ = yym687
		if false {
		} else {
			z.F.DecSliceStringX(yyv686, false, d)
		}
	}
	yyj685++
	if yyhl685 {
		yyb685 = yyj685 > l
	} else {
		yyb685 = r.CheckBreak()
	}
	if yyb685 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lun != nil {
			x.Lun = nil
		}
	} else {
		if x.Lun == nil {
			x.Lun = new(int32)
		}
		yym689 := z.DecBinary()
		_ = yym689
		if false {
		} else {
			*((*int32)(x.Lun)) = int32(r.DecodeInt(32))
		}
	}
	yyj685++
	if yyhl685 {
		yyb685 = yyj685 > l
	} else {
		yyb685 = r.CheckBreak()
	}
	if yyb685 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj685++
	if yyhl685 {
		yyb685 = yyj685 > l
	} else {
		yyb685 = r.CheckBreak()
	}
	if yyb685 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj685++
		if yyhl685 {
			yyb685 = yyj685 > l
		} else {
			yyb685 = r.CheckBreak()
		}
		if yyb685 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj685-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlexVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym692 := z.EncBinary()
		_ = yym692
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep693 := !z.EncBinary()
			yy2arr693 := z.EncBasicHandle().StructToArray
			var yyq693 [5]bool
			_, _, _ = yysep693, yyq693, yy2arr693
			const yyr693 bool = false
			yyq693[1] = x.FSType != ""
			yyq693[2] = x.SecretRef != nil
			yyq693[3] = x.ReadOnly != false
			yyq693[4] = len(x.Options) != 0
			var yynn693 int
			if yyr693 || yy2arr693 {
				r.EncodeArrayStart(5)
			} else {
				yynn693 = 1
				for _, b := range yyq693 {
					if b {
						yynn693++
					}
				}
				r.EncodeMapStart(yynn693)
				yynn693 = 0
			}
			if yyr693 || yy2arr693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym695 := z.EncBinary()
				_ = yym695
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("driver"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym696 := z.EncBinary()
				_ = yym696
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Driver))
				}
			}
			if yyr693 || yy2arr693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq693[1] {
					yym698 := z.EncBinary()
					_ = yym698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq693[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym699 := z.EncBinary()
					_ = yym699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr693 || yy2arr693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq693[2] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq693[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr693 || yy2arr693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq693[3] {
					yym702 := z.EncBinary()
					_ = yym702
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq693[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym703 := z.EncBinary()
					_ = yym703
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr693 || yy2arr693 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq693[4] {
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym705 := z.EncBinary()
						_ = yym705
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq693[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("options"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Options == nil {
						r.EncodeNil()
					} else {
						yym706 := z.EncBinary()
						_ = yym706
						if false {
						} else {
							z.F.EncMapStringStringV(x.Options, false, e)
						}
					}
				}
			}
			if yyr693 || yy2arr693 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlexVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym707 := z.DecBinary()
	_ = yym707
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct708 := r.ContainerType()
		if yyct708 == codecSelferValueTypeMap1234 {
			yyl708 := r.ReadMapStart()
			if yyl708 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl708, d)
			}
		} else if yyct708 == codecSelferValueTypeArray1234 {
			yyl708 := r.ReadArrayStart()
			if yyl708 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl708, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlexVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys709Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys709Slc
	var yyhl709 bool = l >= 0
	for yyj709 := 0; ; yyj709++ {
		if yyhl709 {
			if yyj709 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys709Slc = r.DecodeBytes(yys709Slc, true, true)
		yys709 := string(yys709Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys709 {
		case "driver":
			if r.TryDecodeAsNil() {
				x.Driver = ""
			} else {
				x.Driver = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "options":
			if r.TryDecodeAsNil() {
				x.Options = nil
			} else {
				yyv714 := &x.Options
				yym715 := z.DecBinary()
				_ = yym715
				if false {
				} else {
					z.F.DecMapStringStringX(yyv714, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys709)
		} // end switch yys709
	} // end for yyj709
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlexVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj716 int
	var yyb716 bool
	var yyhl716 bool = l >= 0
	yyj716++
	if yyhl716 {
		yyb716 = yyj716 > l
	} else {
		yyb716 = r.CheckBreak()
	}
	if yyb716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Driver = ""
	} else {
		x.Driver = string(r.DecodeString())
	}
	yyj716++
	if yyhl716 {
		yyb716 = yyj716 > l
	} else {
		yyb716 = r.CheckBreak()
	}
	if yyb716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj716++
	if yyhl716 {
		yyb716 = yyj716 > l
	} else {
		yyb716 = r.CheckBreak()
	}
	if yyb716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj716++
	if yyhl716 {
		yyb716 = yyj716 > l
	} else {
		yyb716 = r.CheckBreak()
	}
	if yyb716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj716++
	if yyhl716 {
		yyb716 = yyj716 > l
	} else {
		yyb716 = r.CheckBreak()
	}
	if yyb716 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Options = nil
	} else {
		yyv721 := &x.Options
		yym722 := z.DecBinary()
		_ = yym722
		if false {
		} else {
			z.F.DecMapStringStringX(yyv721, false, d)
		}
	}
	for {
		yyj716++
		if yyhl716 {
			yyb716 = yyj716 > l
		} else {
			yyb716 = r.CheckBreak()
		}
		if yyb716 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj716-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym723 := z.EncBinary()
		_ = yym723
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep724 := !z.EncBinary()
			yy2arr724 := z.EncBasicHandle().StructToArray
			var yyq724 [4]bool
			_, _, _ = yysep724, yyq724, yy2arr724
			const yyr724 bool = false
			yyq724[1] = x.FSType != ""
			yyq724[2] = x.Partition != 0
			yyq724[3] = x.ReadOnly != false
			var yynn724 int
			if yyr724 || yy2arr724 {
				r.EncodeArrayStart(4)
			} else {
				yynn724 = 1
				for _, b := range yyq724 {
					if b {
						yynn724++
					}
				}
				r.EncodeMapStart(yynn724)
				yynn724 = 0
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym726 := z.EncBinary()
				_ = yym726
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym727 := z.EncBinary()
				_ = yym727
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq724[1] {
					yym729 := z.EncBinary()
					_ = yym729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq724[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym730 := z.EncBinary()
					_ = yym730
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq724[2] {
					yym732 := z.EncBinary()
					_ = yym732
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq724[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("partition"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym733 := z.EncBinary()
					_ = yym733
					if false {
					} else {
						r.EncodeInt(int64(x.Partition))
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq724[3] {
					yym735 := z.EncBinary()
					_ = yym735
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq724[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym736 := z.EncBinary()
					_ = yym736
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr724 || yy2arr724 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym737 := z.DecBinary()
	_ = yym737
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct738 := r.ContainerType()
		if yyct738 == codecSelferValueTypeMap1234 {
			yyl738 := r.ReadMapStart()
			if yyl738 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl738, d)
			}
		} else if yyct738 == codecSelferValueTypeArray1234 {
			yyl738 := r.ReadArrayStart()
			if yyl738 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl738, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys739Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys739Slc
	var yyhl739 bool = l >= 0
	for yyj739 := 0; ; yyj739++ {
		if yyhl739 {
			if yyj739 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys739Slc = r.DecodeBytes(yys739Slc, true, true)
		yys739 := string(yys739Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys739 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "partition":
			if r.TryDecodeAsNil() {
				x.Partition = 0
			} else {
				x.Partition = int32(r.DecodeInt(32))
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys739)
		} // end switch yys739
	} // end for yyj739
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AWSElasticBlockStoreVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj744 int
	var yyb744 bool
	var yyhl744 bool = l >= 0
	yyj744++
	if yyhl744 {
		yyb744 = yyj744 > l
	} else {
		yyb744 = r.CheckBreak()
	}
	if yyb744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj744++
	if yyhl744 {
		yyb744 = yyj744 > l
	} else {
		yyb744 = r.CheckBreak()
	}
	if yyb744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj744++
	if yyhl744 {
		yyb744 = yyj744 > l
	} else {
		yyb744 = r.CheckBreak()
	}
	if yyb744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Partition = 0
	} else {
		x.Partition = int32(r.DecodeInt(32))
	}
	yyj744++
	if yyhl744 {
		yyb744 = yyj744 > l
	} else {
		yyb744 = r.CheckBreak()
	}
	if yyb744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj744++
		if yyhl744 {
			yyb744 = yyj744 > l
		} else {
			yyb744 = r.CheckBreak()
		}
		if yyb744 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj744-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GitRepoVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym749 := z.EncBinary()
		_ = yym749
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep750 := !z.EncBinary()
			yy2arr750 := z.EncBasicHandle().StructToArray
			var yyq750 [3]bool
			_, _, _ = yysep750, yyq750, yy2arr750
			const yyr750 bool = false
			yyq750[1] = x.Revision != ""
			yyq750[2] = x.Directory != ""
			var yynn750 int
			if yyr750 || yy2arr750 {
				r.EncodeArrayStart(3)
			} else {
				yynn750 = 1
				for _, b := range yyq750 {
					if b {
						yynn750++
					}
				}
				r.EncodeMapStart(yynn750)
				yynn750 = 0
			}
			if yyr750 || yy2arr750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym752 := z.EncBinary()
				_ = yym752
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("repository"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym753 := z.EncBinary()
				_ = yym753
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Repository))
				}
			}
			if yyr750 || yy2arr750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq750[1] {
					yym755 := z.EncBinary()
					_ = yym755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq750[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("revision"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym756 := z.EncBinary()
					_ = yym756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Revision))
					}
				}
			}
			if yyr750 || yy2arr750 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq750[2] {
					yym758 := z.EncBinary()
					_ = yym758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq750[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("directory"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym759 := z.EncBinary()
					_ = yym759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Directory))
					}
				}
			}
			if yyr750 || yy2arr750 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GitRepoVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym760 := z.DecBinary()
	_ = yym760
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct761 := r.ContainerType()
		if yyct761 == codecSelferValueTypeMap1234 {
			yyl761 := r.ReadMapStart()
			if yyl761 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl761, d)
			}
		} else if yyct761 == codecSelferValueTypeArray1234 {
			yyl761 := r.ReadArrayStart()
			if yyl761 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl761, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys762Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys762Slc
	var yyhl762 bool = l >= 0
	for yyj762 := 0; ; yyj762++ {
		if yyhl762 {
			if yyj762 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys762Slc = r.DecodeBytes(yys762Slc, true, true)
		yys762 := string(yys762Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys762 {
		case "repository":
			if r.TryDecodeAsNil() {
				x.Repository = ""
			} else {
				x.Repository = string(r.DecodeString())
			}
		case "revision":
			if r.TryDecodeAsNil() {
				x.Revision = ""
			} else {
				x.Revision = string(r.DecodeString())
			}
		case "directory":
			if r.TryDecodeAsNil() {
				x.Directory = ""
			} else {
				x.Directory = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys762)
		} // end switch yys762
	} // end for yyj762
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GitRepoVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj766 int
	var yyb766 bool
	var yyhl766 bool = l >= 0
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Repository = ""
	} else {
		x.Repository = string(r.DecodeString())
	}
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Revision = ""
	} else {
		x.Revision = string(r.DecodeString())
	}
	yyj766++
	if yyhl766 {
		yyb766 = yyj766 > l
	} else {
		yyb766 = r.CheckBreak()
	}
	if yyb766 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Directory = ""
	} else {
		x.Directory = string(r.DecodeString())
	}
	for {
		yyj766++
		if yyhl766 {
			yyb766 = yyj766 > l
		} else {
			yyb766 = r.CheckBreak()
		}
		if yyb766 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj766-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym770 := z.EncBinary()
		_ = yym770
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep771 := !z.EncBinary()
			yy2arr771 := z.EncBasicHandle().StructToArray
			var yyq771 [3]bool
			_, _, _ = yysep771, yyq771, yy2arr771
			const yyr771 bool = false
			yyq771[0] = x.SecretName != ""
			yyq771[1] = len(x.Items) != 0
			yyq771[2] = x.DefaultMode != nil
			var yynn771 int
			if yyr771 || yy2arr771 {
				r.EncodeArrayStart(3)
			} else {
				yynn771 = 0
				for _, b := range yyq771 {
					if b {
						yynn771++
					}
				}
				r.EncodeMapStart(yynn771)
				yynn771 = 0
			}
			if yyr771 || yy2arr771 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq771[0] {
					yym773 := z.EncBinary()
					_ = yym773
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq771[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym774 := z.EncBinary()
					_ = yym774
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
					}
				}
			}
			if yyr771 || yy2arr771 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq771[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym776 := z.EncBinary()
						_ = yym776
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq771[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym777 := z.EncBinary()
						_ = yym777
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr771 || yy2arr771 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq771[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy779 := *x.DefaultMode
						yym780 := z.EncBinary()
						_ = yym780
						if false {
						} else {
							r.EncodeInt(int64(yy779))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq771[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy781 := *x.DefaultMode
						yym782 := z.EncBinary()
						_ = yym782
						if false {
						} else {
							r.EncodeInt(int64(yy781))
						}
					}
				}
			}
			if yyr771 || yy2arr771 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym783 := z.DecBinary()
	_ = yym783
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct784 := r.ContainerType()
		if yyct784 == codecSelferValueTypeMap1234 {
			yyl784 := r.ReadMapStart()
			if yyl784 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl784, d)
			}
		} else if yyct784 == codecSelferValueTypeArray1234 {
			yyl784 := r.ReadArrayStart()
			if yyl784 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl784, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys785Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys785Slc
	var yyhl785 bool = l >= 0
	for yyj785 := 0; ; yyj785++ {
		if yyhl785 {
			if yyj785 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys785Slc = r.DecodeBytes(yys785Slc, true, true)
		yys785 := string(yys785Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys785 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv787 := &x.Items
				yym788 := z.DecBinary()
				_ = yym788
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv787), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym790 := z.DecBinary()
				_ = yym790
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys785)
		} // end switch yys785
	} // end for yyj785
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj791 int
	var yyb791 bool
	var yyhl791 bool = l >= 0
	yyj791++
	if yyhl791 {
		yyb791 = yyj791 > l
	} else {
		yyb791 = r.CheckBreak()
	}
	if yyb791 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj791++
	if yyhl791 {
		yyb791 = yyj791 > l
	} else {
		yyb791 = r.CheckBreak()
	}
	if yyb791 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv793 := &x.Items
		yym794 := z.DecBinary()
		_ = yym794
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv793), d)
		}
	}
	yyj791++
	if yyhl791 {
		yyb791 = yyj791 > l
	} else {
		yyb791 = r.CheckBreak()
	}
	if yyb791 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym796 := z.DecBinary()
		_ = yym796
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj791++
		if yyhl791 {
			yyb791 = yyj791 > l
		} else {
			yyb791 = r.CheckBreak()
		}
		if yyb791 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj791-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym797 := z.EncBinary()
		_ = yym797
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep798 := !z.EncBinary()
			yy2arr798 := z.EncBasicHandle().StructToArray
			var yyq798 [3]bool
			_, _, _ = yysep798, yyq798, yy2arr798
			const yyr798 bool = false
			yyq798[2] = x.ReadOnly != false
			var yynn798 int
			if yyr798 || yy2arr798 {
				r.EncodeArrayStart(3)
			} else {
				yynn798 = 2
				for _, b := range yyq798 {
					if b {
						yynn798++
					}
				}
				r.EncodeMapStart(yynn798)
				yynn798 = 0
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym800 := z.EncBinary()
				_ = yym800
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("server"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym801 := z.EncBinary()
				_ = yym801
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Server))
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym803 := z.EncBinary()
				_ = yym803
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym804 := z.EncBinary()
				_ = yym804
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq798[2] {
					yym806 := z.EncBinary()
					_ = yym806
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq798[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym807 := z.EncBinary()
					_ = yym807
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr798 || yy2arr798 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym808 := z.DecBinary()
	_ = yym808
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct809 := r.ContainerType()
		if yyct809 == codecSelferValueTypeMap1234 {
			yyl809 := r.ReadMapStart()
			if yyl809 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl809, d)
			}
		} else if yyct809 == codecSelferValueTypeArray1234 {
			yyl809 := r.ReadArrayStart()
			if yyl809 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl809, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys810Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys810Slc
	var yyhl810 bool = l >= 0
	for yyj810 := 0; ; yyj810++ {
		if yyhl810 {
			if yyj810 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys810Slc = r.DecodeBytes(yys810Slc, true, true)
		yys810 := string(yys810Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys810 {
		case "server":
			if r.TryDecodeAsNil() {
				x.Server = ""
			} else {
				x.Server = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys810)
		} // end switch yys810
	} // end for yyj810
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj814 int
	var yyb814 bool
	var yyhl814 bool = l >= 0
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Server = ""
	} else {
		x.Server = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj814++
	if yyhl814 {
		yyb814 = yyj814 > l
	} else {
		yyb814 = r.CheckBreak()
	}
	if yyb814 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj814++
		if yyhl814 {
			yyb814 = yyj814 > l
		} else {
			yyb814 = r.CheckBreak()
		}
		if yyb814 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj814-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *QuobyteVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym818 := z.EncBinary()
		_ = yym818
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep819 := !z.EncBinary()
			yy2arr819 := z.EncBasicHandle().StructToArray
			var yyq819 [5]bool
			_, _, _ = yysep819, yyq819, yy2arr819
			const yyr819 bool = false
			yyq819[2] = x.ReadOnly != false
			yyq819[3] = x.User != ""
			yyq819[4] = x.Group != ""
			var yynn819 int
			if yyr819 || yy2arr819 {
				r.EncodeArrayStart(5)
			} else {
				yynn819 = 2
				for _, b := range yyq819 {
					if b {
						yynn819++
					}
				}
				r.EncodeMapStart(yynn819)
				yynn819 = 0
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym821 := z.EncBinary()
				_ = yym821
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("registry"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym822 := z.EncBinary()
				_ = yym822
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Registry))
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym824 := z.EncBinary()
				_ = yym824
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volume"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym825 := z.EncBinary()
				_ = yym825
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Volume))
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[2] {
					yym827 := z.EncBinary()
					_ = yym827
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq819[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym828 := z.EncBinary()
					_ = yym828
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[3] {
					yym830 := z.EncBinary()
					_ = yym830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym831 := z.EncBinary()
					_ = yym831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq819[4] {
					yym833 := z.EncBinary()
					_ = yym833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq819[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("group"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym834 := z.EncBinary()
					_ = yym834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Group))
					}
				}
			}
			if yyr819 || yy2arr819 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *QuobyteVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym835 := z.DecBinary()
	_ = yym835
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct836 := r.ContainerType()
		if yyct836 == codecSelferValueTypeMap1234 {
			yyl836 := r.ReadMapStart()
			if yyl836 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl836, d)
			}
		} else if yyct836 == codecSelferValueTypeArray1234 {
			yyl836 := r.ReadArrayStart()
			if yyl836 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl836, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys837Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys837Slc
	var yyhl837 bool = l >= 0
	for yyj837 := 0; ; yyj837++ {
		if yyhl837 {
			if yyj837 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys837Slc = r.DecodeBytes(yys837Slc, true, true)
		yys837 := string(yys837Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys837 {
		case "registry":
			if r.TryDecodeAsNil() {
				x.Registry = ""
			} else {
				x.Registry = string(r.DecodeString())
			}
		case "volume":
			if r.TryDecodeAsNil() {
				x.Volume = ""
			} else {
				x.Volume = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "group":
			if r.TryDecodeAsNil() {
				x.Group = ""
			} else {
				x.Group = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys837)
		} // end switch yys837
	} // end for yyj837
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *QuobyteVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj843 int
	var yyb843 bool
	var yyhl843 bool = l >= 0
	yyj843++
	if yyhl843 {
		yyb843 = yyj843 > l
	} else {
		yyb843 = r.CheckBreak()
	}
	if yyb843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Registry = ""
	} else {
		x.Registry = string(r.DecodeString())
	}
	yyj843++
	if yyhl843 {
		yyb843 = yyj843 > l
	} else {
		yyb843 = r.CheckBreak()
	}
	if yyb843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volume = ""
	} else {
		x.Volume = string(r.DecodeString())
	}
	yyj843++
	if yyhl843 {
		yyb843 = yyj843 > l
	} else {
		yyb843 = r.CheckBreak()
	}
	if yyb843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj843++
	if yyhl843 {
		yyb843 = yyj843 > l
	} else {
		yyb843 = r.CheckBreak()
	}
	if yyb843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj843++
	if yyhl843 {
		yyb843 = yyj843 > l
	} else {
		yyb843 = r.CheckBreak()
	}
	if yyb843 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Group = ""
	} else {
		x.Group = string(r.DecodeString())
	}
	for {
		yyj843++
		if yyhl843 {
			yyb843 = yyj843 > l
		} else {
			yyb843 = r.CheckBreak()
		}
		if yyb843 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj843-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *GlusterfsVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym849 := z.EncBinary()
		_ = yym849
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep850 := !z.EncBinary()
			yy2arr850 := z.EncBasicHandle().StructToArray
			var yyq850 [3]bool
			_, _, _ = yysep850, yyq850, yy2arr850
			const yyr850 bool = false
			yyq850[2] = x.ReadOnly != false
			var yynn850 int
			if yyr850 || yy2arr850 {
				r.EncodeArrayStart(3)
			} else {
				yynn850 = 2
				for _, b := range yyq850 {
					if b {
						yynn850++
					}
				}
				r.EncodeMapStart(yynn850)
				yynn850 = 0
			}
			if yyr850 || yy2arr850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym852 := z.EncBinary()
				_ = yym852
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("endpoints"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym853 := z.EncBinary()
				_ = yym853
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.EndpointsName))
				}
			}
			if yyr850 || yy2arr850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym855 := z.EncBinary()
				_ = yym855
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym856 := z.EncBinary()
				_ = yym856
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr850 || yy2arr850 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq850[2] {
					yym858 := z.EncBinary()
					_ = yym858
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq850[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym859 := z.EncBinary()
					_ = yym859
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr850 || yy2arr850 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *GlusterfsVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym860 := z.DecBinary()
	_ = yym860
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct861 := r.ContainerType()
		if yyct861 == codecSelferValueTypeMap1234 {
			yyl861 := r.ReadMapStart()
			if yyl861 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl861, d)
			}
		} else if yyct861 == codecSelferValueTypeArray1234 {
			yyl861 := r.ReadArrayStart()
			if yyl861 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl861, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys862Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys862Slc
	var yyhl862 bool = l >= 0
	for yyj862 := 0; ; yyj862++ {
		if yyhl862 {
			if yyj862 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys862Slc = r.DecodeBytes(yys862Slc, true, true)
		yys862 := string(yys862Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys862 {
		case "endpoints":
			if r.TryDecodeAsNil() {
				x.EndpointsName = ""
			} else {
				x.EndpointsName = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys862)
		} // end switch yys862
	} // end for yyj862
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *GlusterfsVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj866 int
	var yyb866 bool
	var yyhl866 bool = l >= 0
	yyj866++
	if yyhl866 {
		yyb866 = yyj866 > l
	} else {
		yyb866 = r.CheckBreak()
	}
	if yyb866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EndpointsName = ""
	} else {
		x.EndpointsName = string(r.DecodeString())
	}
	yyj866++
	if yyhl866 {
		yyb866 = yyj866 > l
	} else {
		yyb866 = r.CheckBreak()
	}
	if yyb866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj866++
	if yyhl866 {
		yyb866 = yyj866 > l
	} else {
		yyb866 = r.CheckBreak()
	}
	if yyb866 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj866++
		if yyhl866 {
			yyb866 = yyj866 > l
		} else {
			yyb866 = r.CheckBreak()
		}
		if yyb866 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj866-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RBDVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym870 := z.EncBinary()
		_ = yym870
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep871 := !z.EncBinary()
			yy2arr871 := z.EncBasicHandle().StructToArray
			var yyq871 [8]bool
			_, _, _ = yysep871, yyq871, yy2arr871
			const yyr871 bool = false
			yyq871[2] = x.FSType != ""
			yyq871[3] = x.RBDPool != ""
			yyq871[4] = x.RadosUser != ""
			yyq871[5] = x.Keyring != ""
			yyq871[6] = x.SecretRef != nil
			yyq871[7] = x.ReadOnly != false
			var yynn871 int
			if yyr871 || yy2arr871 {
				r.EncodeArrayStart(8)
			} else {
				yynn871 = 2
				for _, b := range yyq871 {
					if b {
						yynn871++
					}
				}
				r.EncodeMapStart(yynn871)
				yynn871 = 0
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym873 := z.EncBinary()
					_ = yym873
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.CephMonitors == nil {
					r.EncodeNil()
				} else {
					yym874 := z.EncBinary()
					_ = yym874
					if false {
					} else {
						z.F.EncSliceStringV(x.CephMonitors, false, e)
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym876 := z.EncBinary()
				_ = yym876
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym877 := z.EncBinary()
				_ = yym877
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.RBDImage))
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[2] {
					yym879 := z.EncBinary()
					_ = yym879
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq871[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym880 := z.EncBinary()
					_ = yym880
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[3] {
					yym882 := z.EncBinary()
					_ = yym882
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq871[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("pool"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym883 := z.EncBinary()
					_ = yym883
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RBDPool))
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[4] {
					yym885 := z.EncBinary()
					_ = yym885
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq871[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym886 := z.EncBinary()
					_ = yym886
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.RadosUser))
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[5] {
					yym888 := z.EncBinary()
					_ = yym888
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq871[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("keyring"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym889 := z.EncBinary()
					_ = yym889
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Keyring))
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[6] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq871[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq871[7] {
					yym892 := z.EncBinary()
					_ = yym892
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq871[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym893 := z.EncBinary()
					_ = yym893
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr871 || yy2arr871 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RBDVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym894 := z.DecBinary()
	_ = yym894
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct895 := r.ContainerType()
		if yyct895 == codecSelferValueTypeMap1234 {
			yyl895 := r.ReadMapStart()
			if yyl895 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl895, d)
			}
		} else if yyct895 == codecSelferValueTypeArray1234 {
			yyl895 := r.ReadArrayStart()
			if yyl895 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl895, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RBDVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys896Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys896Slc
	var yyhl896 bool = l >= 0
	for yyj896 := 0; ; yyj896++ {
		if yyhl896 {
			if yyj896 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys896Slc = r.DecodeBytes(yys896Slc, true, true)
		yys896 := string(yys896Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys896 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.CephMonitors = nil
			} else {
				yyv897 := &x.CephMonitors
				yym898 := z.DecBinary()
				_ = yym898
				if false {
				} else {
					z.F.DecSliceStringX(yyv897, false, d)
				}
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.RBDImage = ""
			} else {
				x.RBDImage = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "pool":
			if r.TryDecodeAsNil() {
				x.RBDPool = ""
			} else {
				x.RBDPool = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.RadosUser = ""
			} else {
				x.RadosUser = string(r.DecodeString())
			}
		case "keyring":
			if r.TryDecodeAsNil() {
				x.Keyring = ""
			} else {
				x.Keyring = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys896)
		} // end switch yys896
	} // end for yyj896
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RBDVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj906 int
	var yyb906 bool
	var yyhl906 bool = l >= 0
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.CephMonitors = nil
	} else {
		yyv907 := &x.CephMonitors
		yym908 := z.DecBinary()
		_ = yym908
		if false {
		} else {
			z.F.DecSliceStringX(yyv907, false, d)
		}
	}
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDImage = ""
	} else {
		x.RBDImage = string(r.DecodeString())
	}
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RBDPool = ""
	} else {
		x.RBDPool = string(r.DecodeString())
	}
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RadosUser = ""
	} else {
		x.RadosUser = string(r.DecodeString())
	}
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Keyring = ""
	} else {
		x.Keyring = string(r.DecodeString())
	}
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj906++
	if yyhl906 {
		yyb906 = yyj906 > l
	} else {
		yyb906 = r.CheckBreak()
	}
	if yyb906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj906++
		if yyhl906 {
			yyb906 = yyj906 > l
		} else {
			yyb906 = r.CheckBreak()
		}
		if yyb906 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj906-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CinderVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym916 := z.EncBinary()
		_ = yym916
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep917 := !z.EncBinary()
			yy2arr917 := z.EncBasicHandle().StructToArray
			var yyq917 [3]bool
			_, _, _ = yysep917, yyq917, yy2arr917
			const yyr917 bool = false
			yyq917[1] = x.FSType != ""
			yyq917[2] = x.ReadOnly != false
			var yynn917 int
			if yyr917 || yy2arr917 {
				r.EncodeArrayStart(3)
			} else {
				yynn917 = 1
				for _, b := range yyq917 {
					if b {
						yynn917++
					}
				}
				r.EncodeMapStart(yynn917)
				yynn917 = 0
			}
			if yyr917 || yy2arr917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym919 := z.EncBinary()
				_ = yym919
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumeID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym920 := z.EncBinary()
				_ = yym920
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumeID))
				}
			}
			if yyr917 || yy2arr917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq917[1] {
					yym922 := z.EncBinary()
					_ = yym922
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq917[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym923 := z.EncBinary()
					_ = yym923
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr917 || yy2arr917 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq917[2] {
					yym925 := z.EncBinary()
					_ = yym925
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq917[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym926 := z.EncBinary()
					_ = yym926
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr917 || yy2arr917 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CinderVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym927 := z.DecBinary()
	_ = yym927
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct928 := r.ContainerType()
		if yyct928 == codecSelferValueTypeMap1234 {
			yyl928 := r.ReadMapStart()
			if yyl928 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl928, d)
			}
		} else if yyct928 == codecSelferValueTypeArray1234 {
			yyl928 := r.ReadArrayStart()
			if yyl928 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl928, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CinderVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys929Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys929Slc
	var yyhl929 bool = l >= 0
	for yyj929 := 0; ; yyj929++ {
		if yyhl929 {
			if yyj929 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys929Slc = r.DecodeBytes(yys929Slc, true, true)
		yys929 := string(yys929Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys929 {
		case "volumeID":
			if r.TryDecodeAsNil() {
				x.VolumeID = ""
			} else {
				x.VolumeID = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys929)
		} // end switch yys929
	} // end for yyj929
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CinderVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj933 int
	var yyb933 bool
	var yyhl933 bool = l >= 0
	yyj933++
	if yyhl933 {
		yyb933 = yyj933 > l
	} else {
		yyb933 = r.CheckBreak()
	}
	if yyb933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeID = ""
	} else {
		x.VolumeID = string(r.DecodeString())
	}
	yyj933++
	if yyhl933 {
		yyb933 = yyj933 > l
	} else {
		yyb933 = r.CheckBreak()
	}
	if yyb933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	yyj933++
	if yyhl933 {
		yyb933 = yyj933 > l
	} else {
		yyb933 = r.CheckBreak()
	}
	if yyb933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj933++
		if yyhl933 {
			yyb933 = yyj933 > l
		} else {
			yyb933 = r.CheckBreak()
		}
		if yyb933 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj933-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *CephFSVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym937 := z.EncBinary()
		_ = yym937
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep938 := !z.EncBinary()
			yy2arr938 := z.EncBasicHandle().StructToArray
			var yyq938 [6]bool
			_, _, _ = yysep938, yyq938, yy2arr938
			const yyr938 bool = false
			yyq938[1] = x.Path != ""
			yyq938[2] = x.User != ""
			yyq938[3] = x.SecretFile != ""
			yyq938[4] = x.SecretRef != nil
			yyq938[5] = x.ReadOnly != false
			var yynn938 int
			if yyr938 || yy2arr938 {
				r.EncodeArrayStart(6)
			} else {
				yynn938 = 1
				for _, b := range yyq938 {
					if b {
						yynn938++
					}
				}
				r.EncodeMapStart(yynn938)
				yynn938 = 0
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym940 := z.EncBinary()
					_ = yym940
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("monitors"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Monitors == nil {
					r.EncodeNil()
				} else {
					yym941 := z.EncBinary()
					_ = yym941
					if false {
					} else {
						z.F.EncSliceStringV(x.Monitors, false, e)
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq938[1] {
					yym943 := z.EncBinary()
					_ = yym943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq938[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym944 := z.EncBinary()
					_ = yym944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq938[2] {
					yym946 := z.EncBinary()
					_ = yym946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq938[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym947 := z.EncBinary()
					_ = yym947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq938[3] {
					yym949 := z.EncBinary()
					_ = yym949
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq938[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretFile"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym950 := z.EncBinary()
					_ = yym950
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SecretFile))
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq938[4] {
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq938[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretRef == nil {
						r.EncodeNil()
					} else {
						x.SecretRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq938[5] {
					yym953 := z.EncBinary()
					_ = yym953
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq938[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym954 := z.EncBinary()
					_ = yym954
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr938 || yy2arr938 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *CephFSVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym955 := z.DecBinary()
	_ = yym955
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct956 := r.ContainerType()
		if yyct956 == codecSelferValueTypeMap1234 {
			yyl956 := r.ReadMapStart()
			if yyl956 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl956, d)
			}
		} else if yyct956 == codecSelferValueTypeArray1234 {
			yyl956 := r.ReadArrayStart()
			if yyl956 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl956, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *CephFSVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys957Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys957Slc
	var yyhl957 bool = l >= 0
	for yyj957 := 0; ; yyj957++ {
		if yyhl957 {
			if yyj957 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys957Slc = r.DecodeBytes(yys957Slc, true, true)
		yys957 := string(yys957Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys957 {
		case "monitors":
			if r.TryDecodeAsNil() {
				x.Monitors = nil
			} else {
				yyv958 := &x.Monitors
				yym959 := z.DecBinary()
				_ = yym959
				if false {
				} else {
					z.F.DecSliceStringX(yyv958, false, d)
				}
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "secretFile":
			if r.TryDecodeAsNil() {
				x.SecretFile = ""
			} else {
				x.SecretFile = string(r.DecodeString())
			}
		case "secretRef":
			if r.TryDecodeAsNil() {
				if x.SecretRef != nil {
					x.SecretRef = nil
				}
			} else {
				if x.SecretRef == nil {
					x.SecretRef = new(LocalObjectReference)
				}
				x.SecretRef.CodecDecodeSelf(d)
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys957)
		} // end switch yys957
	} // end for yyj957
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *CephFSVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj965 int
	var yyb965 bool
	var yyhl965 bool = l >= 0
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Monitors = nil
	} else {
		yyv966 := &x.Monitors
		yym967 := z.DecBinary()
		_ = yym967
		if false {
		} else {
			z.F.DecSliceStringX(yyv966, false, d)
		}
	}
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretFile = ""
	} else {
		x.SecretFile = string(r.DecodeString())
	}
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretRef != nil {
			x.SecretRef = nil
		}
	} else {
		if x.SecretRef == nil {
			x.SecretRef = new(LocalObjectReference)
		}
		x.SecretRef.CodecDecodeSelf(d)
	}
	yyj965++
	if yyhl965 {
		yyb965 = yyj965 > l
	} else {
		yyb965 = r.CheckBreak()
	}
	if yyb965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj965++
		if yyhl965 {
			yyb965 = yyj965 > l
		} else {
			yyb965 = r.CheckBreak()
		}
		if yyb965 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj965-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *FlockerVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym973 := z.EncBinary()
		_ = yym973
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep974 := !z.EncBinary()
			yy2arr974 := z.EncBasicHandle().StructToArray
			var yyq974 [1]bool
			_, _, _ = yysep974, yyq974, yy2arr974
			const yyr974 bool = false
			var yynn974 int
			if yyr974 || yy2arr974 {
				r.EncodeArrayStart(1)
			} else {
				yynn974 = 1
				for _, b := range yyq974 {
					if b {
						yynn974++
					}
				}
				r.EncodeMapStart(yynn974)
				yynn974 = 0
			}
			if yyr974 || yy2arr974 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym976 := z.EncBinary()
				_ = yym976
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("datasetName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym977 := z.EncBinary()
				_ = yym977
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DatasetName))
				}
			}
			if yyr974 || yy2arr974 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *FlockerVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym978 := z.DecBinary()
	_ = yym978
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct979 := r.ContainerType()
		if yyct979 == codecSelferValueTypeMap1234 {
			yyl979 := r.ReadMapStart()
			if yyl979 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl979, d)
			}
		} else if yyct979 == codecSelferValueTypeArray1234 {
			yyl979 := r.ReadArrayStart()
			if yyl979 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl979, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *FlockerVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys980Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys980Slc
	var yyhl980 bool = l >= 0
	for yyj980 := 0; ; yyj980++ {
		if yyhl980 {
			if yyj980 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys980Slc = r.DecodeBytes(yys980Slc, true, true)
		yys980 := string(yys980Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys980 {
		case "datasetName":
			if r.TryDecodeAsNil() {
				x.DatasetName = ""
			} else {
				x.DatasetName = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys980)
		} // end switch yys980
	} // end for yyj980
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *FlockerVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj982 int
	var yyb982 bool
	var yyhl982 bool = l >= 0
	yyj982++
	if yyhl982 {
		yyb982 = yyj982 > l
	} else {
		yyb982 = r.CheckBreak()
	}
	if yyb982 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DatasetName = ""
	} else {
		x.DatasetName = string(r.DecodeString())
	}
	for {
		yyj982++
		if yyhl982 {
			yyb982 = yyj982 > l
		} else {
			yyb982 = r.CheckBreak()
		}
		if yyb982 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj982-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym984 := z.EncBinary()
		_ = yym984
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep985 := !z.EncBinary()
			yy2arr985 := z.EncBasicHandle().StructToArray
			var yyq985 [2]bool
			_, _, _ = yysep985, yyq985, yy2arr985
			const yyr985 bool = false
			yyq985[0] = len(x.Items) != 0
			yyq985[1] = x.DefaultMode != nil
			var yynn985 int
			if yyr985 || yy2arr985 {
				r.EncodeArrayStart(2)
			} else {
				yynn985 = 0
				for _, b := range yyq985 {
					if b {
						yynn985++
					}
				}
				r.EncodeMapStart(yynn985)
				yynn985 = 0
			}
			if yyr985 || yy2arr985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq985[0] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym987 := z.EncBinary()
						_ = yym987
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq985[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym988 := z.EncBinary()
						_ = yym988
						if false {
						} else {
							h.encSliceDownwardAPIVolumeFile(([]DownwardAPIVolumeFile)(x.Items), e)
						}
					}
				}
			}
			if yyr985 || yy2arr985 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq985[1] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy990 := *x.DefaultMode
						yym991 := z.EncBinary()
						_ = yym991
						if false {
						} else {
							r.EncodeInt(int64(yy990))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq985[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy992 := *x.DefaultMode
						yym993 := z.EncBinary()
						_ = yym993
						if false {
						} else {
							r.EncodeInt(int64(yy992))
						}
					}
				}
			}
			if yyr985 || yy2arr985 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym994 := z.DecBinary()
	_ = yym994
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct995 := r.ContainerType()
		if yyct995 == codecSelferValueTypeMap1234 {
			yyl995 := r.ReadMapStart()
			if yyl995 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl995, d)
			}
		} else if yyct995 == codecSelferValueTypeArray1234 {
			yyl995 := r.ReadArrayStart()
			if yyl995 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl995, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys996Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys996Slc
	var yyhl996 bool = l >= 0
	for yyj996 := 0; ; yyj996++ {
		if yyhl996 {
			if yyj996 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys996Slc = r.DecodeBytes(yys996Slc, true, true)
		yys996 := string(yys996Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys996 {
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv997 := &x.Items
				yym998 := z.DecBinary()
				_ = yym998
				if false {
				} else {
					h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv997), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1000 := z.DecBinary()
				_ = yym1000
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys996)
		} // end switch yys996
	} // end for yyj996
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1001 int
	var yyb1001 bool
	var yyhl1001 bool = l >= 0
	yyj1001++
	if yyhl1001 {
		yyb1001 = yyj1001 > l
	} else {
		yyb1001 = r.CheckBreak()
	}
	if yyb1001 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1002 := &x.Items
		yym1003 := z.DecBinary()
		_ = yym1003
		if false {
		} else {
			h.decSliceDownwardAPIVolumeFile((*[]DownwardAPIVolumeFile)(yyv1002), d)
		}
	}
	yyj1001++
	if yyhl1001 {
		yyb1001 = yyj1001 > l
	} else {
		yyb1001 = r.CheckBreak()
	}
	if yyb1001 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1005 := z.DecBinary()
		_ = yym1005
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1001++
		if yyhl1001 {
			yyb1001 = yyj1001 > l
		} else {
			yyb1001 = r.CheckBreak()
		}
		if yyb1001 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1001-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DownwardAPIVolumeFile) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1006 := z.EncBinary()
		_ = yym1006
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1007 := !z.EncBinary()
			yy2arr1007 := z.EncBasicHandle().StructToArray
			var yyq1007 [4]bool
			_, _, _ = yysep1007, yyq1007, yy2arr1007
			const yyr1007 bool = false
			yyq1007[1] = x.FieldRef != nil
			yyq1007[2] = x.ResourceFieldRef != nil
			yyq1007[3] = x.Mode != nil
			var yynn1007 int
			if yyr1007 || yy2arr1007 {
				r.EncodeArrayStart(4)
			} else {
				yynn1007 = 1
				for _, b := range yyq1007 {
					if b {
						yynn1007++
					}
				}
				r.EncodeMapStart(yynn1007)
				yynn1007 = 0
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1009 := z.EncBinary()
				_ = yym1009
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1010 := z.EncBinary()
				_ = yym1010
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1007[1] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1007[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1007[2] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1007[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1007[3] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1014 := *x.Mode
						yym1015 := z.EncBinary()
						_ = yym1015
						if false {
						} else {
							r.EncodeInt(int64(yy1014))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1007[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1016 := *x.Mode
						yym1017 := z.EncBinary()
						_ = yym1017
						if false {
						} else {
							r.EncodeInt(int64(yy1016))
						}
					}
				}
			}
			if yyr1007 || yy2arr1007 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DownwardAPIVolumeFile) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1018 := z.DecBinary()
	_ = yym1018
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1019 := r.ContainerType()
		if yyct1019 == codecSelferValueTypeMap1234 {
			yyl1019 := r.ReadMapStart()
			if yyl1019 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1019, d)
			}
		} else if yyct1019 == codecSelferValueTypeArray1234 {
			yyl1019 := r.ReadArrayStart()
			if yyl1019 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1019, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1020Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1020Slc
	var yyhl1020 bool = l >= 0
	for yyj1020 := 0; ; yyj1020++ {
		if yyhl1020 {
			if yyj1020 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1020Slc = r.DecodeBytes(yys1020Slc, true, true)
		yys1020 := string(yys1020Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1020 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1025 := z.DecBinary()
				_ = yym1025
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1020)
		} // end switch yys1020
	} // end for yyj1020
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DownwardAPIVolumeFile) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1026 int
	var yyb1026 bool
	var yyhl1026 bool = l >= 0
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1026++
	if yyhl1026 {
		yyb1026 = yyj1026 > l
	} else {
		yyb1026 = r.CheckBreak()
	}
	if yyb1026 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1031 := z.DecBinary()
		_ = yym1031
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1026++
		if yyhl1026 {
			yyb1026 = yyj1026 > l
		} else {
			yyb1026 = r.CheckBreak()
		}
		if yyb1026 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1026-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AzureFileVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1032 := z.EncBinary()
		_ = yym1032
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1033 := !z.EncBinary()
			yy2arr1033 := z.EncBasicHandle().StructToArray
			var yyq1033 [3]bool
			_, _, _ = yysep1033, yyq1033, yy2arr1033
			const yyr1033 bool = false
			yyq1033[2] = x.ReadOnly != false
			var yynn1033 int
			if yyr1033 || yy2arr1033 {
				r.EncodeArrayStart(3)
			} else {
				yynn1033 = 2
				for _, b := range yyq1033 {
					if b {
						yynn1033++
					}
				}
				r.EncodeMapStart(yynn1033)
				yynn1033 = 0
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1035 := z.EncBinary()
				_ = yym1035
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secretName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1036 := z.EncBinary()
				_ = yym1036
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SecretName))
				}
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1038 := z.EncBinary()
				_ = yym1038
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("shareName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1039 := z.EncBinary()
				_ = yym1039
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ShareName))
				}
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1033[2] {
					yym1041 := z.EncBinary()
					_ = yym1041
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1033[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1042 := z.EncBinary()
					_ = yym1042
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1033 || yy2arr1033 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AzureFileVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1043 := z.DecBinary()
	_ = yym1043
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1044 := r.ContainerType()
		if yyct1044 == codecSelferValueTypeMap1234 {
			yyl1044 := r.ReadMapStart()
			if yyl1044 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1044, d)
			}
		} else if yyct1044 == codecSelferValueTypeArray1234 {
			yyl1044 := r.ReadArrayStart()
			if yyl1044 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1044, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1045Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1045Slc
	var yyhl1045 bool = l >= 0
	for yyj1045 := 0; ; yyj1045++ {
		if yyhl1045 {
			if yyj1045 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1045Slc = r.DecodeBytes(yys1045Slc, true, true)
		yys1045 := string(yys1045Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1045 {
		case "secretName":
			if r.TryDecodeAsNil() {
				x.SecretName = ""
			} else {
				x.SecretName = string(r.DecodeString())
			}
		case "shareName":
			if r.TryDecodeAsNil() {
				x.ShareName = ""
			} else {
				x.ShareName = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1045)
		} // end switch yys1045
	} // end for yyj1045
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AzureFileVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1049 int
	var yyb1049 bool
	var yyhl1049 bool = l >= 0
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SecretName = ""
	} else {
		x.SecretName = string(r.DecodeString())
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ShareName = ""
	} else {
		x.ShareName = string(r.DecodeString())
	}
	yyj1049++
	if yyhl1049 {
		yyb1049 = yyj1049 > l
	} else {
		yyb1049 = r.CheckBreak()
	}
	if yyb1049 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	for {
		yyj1049++
		if yyhl1049 {
			yyb1049 = yyj1049 > l
		} else {
			yyb1049 = r.CheckBreak()
		}
		if yyb1049 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1049-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1053 := z.EncBinary()
		_ = yym1053
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1054 := !z.EncBinary()
			yy2arr1054 := z.EncBasicHandle().StructToArray
			var yyq1054 [2]bool
			_, _, _ = yysep1054, yyq1054, yy2arr1054
			const yyr1054 bool = false
			yyq1054[1] = x.FSType != ""
			var yynn1054 int
			if yyr1054 || yy2arr1054 {
				r.EncodeArrayStart(2)
			} else {
				yynn1054 = 1
				for _, b := range yyq1054 {
					if b {
						yynn1054++
					}
				}
				r.EncodeMapStart(yynn1054)
				yynn1054 = 0
			}
			if yyr1054 || yy2arr1054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1056 := z.EncBinary()
				_ = yym1056
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1057 := z.EncBinary()
				_ = yym1057
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.VolumePath))
				}
			}
			if yyr1054 || yy2arr1054 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1054[1] {
					yym1059 := z.EncBinary()
					_ = yym1059
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1054[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsType"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1060 := z.EncBinary()
					_ = yym1060
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FSType))
					}
				}
			}
			if yyr1054 || yy2arr1054 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1061 := z.DecBinary()
	_ = yym1061
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1062 := r.ContainerType()
		if yyct1062 == codecSelferValueTypeMap1234 {
			yyl1062 := r.ReadMapStart()
			if yyl1062 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1062, d)
			}
		} else if yyct1062 == codecSelferValueTypeArray1234 {
			yyl1062 := r.ReadArrayStart()
			if yyl1062 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1062, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1063Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1063Slc
	var yyhl1063 bool = l >= 0
	for yyj1063 := 0; ; yyj1063++ {
		if yyhl1063 {
			if yyj1063 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1063Slc = r.DecodeBytes(yys1063Slc, true, true)
		yys1063 := string(yys1063Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1063 {
		case "volumePath":
			if r.TryDecodeAsNil() {
				x.VolumePath = ""
			} else {
				x.VolumePath = string(r.DecodeString())
			}
		case "fsType":
			if r.TryDecodeAsNil() {
				x.FSType = ""
			} else {
				x.FSType = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1063)
		} // end switch yys1063
	} // end for yyj1063
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VsphereVirtualDiskVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1066 int
	var yyb1066 bool
	var yyhl1066 bool = l >= 0
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumePath = ""
	} else {
		x.VolumePath = string(r.DecodeString())
	}
	yyj1066++
	if yyhl1066 {
		yyb1066 = yyj1066 > l
	} else {
		yyb1066 = r.CheckBreak()
	}
	if yyb1066 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FSType = ""
	} else {
		x.FSType = string(r.DecodeString())
	}
	for {
		yyj1066++
		if yyhl1066 {
			yyb1066 = yyj1066 > l
		} else {
			yyb1066 = r.CheckBreak()
		}
		if yyb1066 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1066-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapVolumeSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1069 := z.EncBinary()
		_ = yym1069
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1070 := !z.EncBinary()
			yy2arr1070 := z.EncBasicHandle().StructToArray
			var yyq1070 [3]bool
			_, _, _ = yysep1070, yyq1070, yy2arr1070
			const yyr1070 bool = false
			yyq1070[1] = len(x.Items) != 0
			yyq1070[2] = x.DefaultMode != nil
			var yynn1070 int
			if yyr1070 || yy2arr1070 {
				r.EncodeArrayStart(3)
			} else {
				yynn1070 = 1
				for _, b := range yyq1070 {
					if b {
						yynn1070++
					}
				}
				r.EncodeMapStart(yynn1070)
				yynn1070 = 0
			}
			if yyr1070 || yy2arr1070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1072 := z.EncBinary()
				_ = yym1072
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1073 := z.EncBinary()
				_ = yym1073
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1070 || yy2arr1070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1070[1] {
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1075 := z.EncBinary()
						_ = yym1075
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1070[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("items"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Items == nil {
						r.EncodeNil()
					} else {
						yym1076 := z.EncBinary()
						_ = yym1076
						if false {
						} else {
							h.encSliceKeyToPath(([]KeyToPath)(x.Items), e)
						}
					}
				}
			}
			if yyr1070 || yy2arr1070 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1070[2] {
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1078 := *x.DefaultMode
						yym1079 := z.EncBinary()
						_ = yym1079
						if false {
						} else {
							r.EncodeInt(int64(yy1078))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1070[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultMode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultMode == nil {
						r.EncodeNil()
					} else {
						yy1080 := *x.DefaultMode
						yym1081 := z.EncBinary()
						_ = yym1081
						if false {
						} else {
							r.EncodeInt(int64(yy1080))
						}
					}
				}
			}
			if yyr1070 || yy2arr1070 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapVolumeSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1082 := z.DecBinary()
	_ = yym1082
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1083 := r.ContainerType()
		if yyct1083 == codecSelferValueTypeMap1234 {
			yyl1083 := r.ReadMapStart()
			if yyl1083 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1083, d)
			}
		} else if yyct1083 == codecSelferValueTypeArray1234 {
			yyl1083 := r.ReadArrayStart()
			if yyl1083 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1083, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1084Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1084Slc
	var yyhl1084 bool = l >= 0
	for yyj1084 := 0; ; yyj1084++ {
		if yyhl1084 {
			if yyj1084 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1084Slc = r.DecodeBytes(yys1084Slc, true, true)
		yys1084 := string(yys1084Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1084 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1086 := &x.Items
				yym1087 := z.DecBinary()
				_ = yym1087
				if false {
				} else {
					h.decSliceKeyToPath((*[]KeyToPath)(yyv1086), d)
				}
			}
		case "defaultMode":
			if r.TryDecodeAsNil() {
				if x.DefaultMode != nil {
					x.DefaultMode = nil
				}
			} else {
				if x.DefaultMode == nil {
					x.DefaultMode = new(int32)
				}
				yym1089 := z.DecBinary()
				_ = yym1089
				if false {
				} else {
					*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1084)
		} // end switch yys1084
	} // end for yyj1084
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapVolumeSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1090 int
	var yyb1090 bool
	var yyhl1090 bool = l >= 0
	yyj1090++
	if yyhl1090 {
		yyb1090 = yyj1090 > l
	} else {
		yyb1090 = r.CheckBreak()
	}
	if yyb1090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1090++
	if yyhl1090 {
		yyb1090 = yyj1090 > l
	} else {
		yyb1090 = r.CheckBreak()
	}
	if yyb1090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1092 := &x.Items
		yym1093 := z.DecBinary()
		_ = yym1093
		if false {
		} else {
			h.decSliceKeyToPath((*[]KeyToPath)(yyv1092), d)
		}
	}
	yyj1090++
	if yyhl1090 {
		yyb1090 = yyj1090 > l
	} else {
		yyb1090 = r.CheckBreak()
	}
	if yyb1090 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.DefaultMode != nil {
			x.DefaultMode = nil
		}
	} else {
		if x.DefaultMode == nil {
			x.DefaultMode = new(int32)
		}
		yym1095 := z.DecBinary()
		_ = yym1095
		if false {
		} else {
			*((*int32)(x.DefaultMode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1090++
		if yyhl1090 {
			yyb1090 = yyj1090 > l
		} else {
			yyb1090 = r.CheckBreak()
		}
		if yyb1090 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1090-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *KeyToPath) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1096 := z.EncBinary()
		_ = yym1096
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1097 := !z.EncBinary()
			yy2arr1097 := z.EncBasicHandle().StructToArray
			var yyq1097 [3]bool
			_, _, _ = yysep1097, yyq1097, yy2arr1097
			const yyr1097 bool = false
			yyq1097[2] = x.Mode != nil
			var yynn1097 int
			if yyr1097 || yy2arr1097 {
				r.EncodeArrayStart(3)
			} else {
				yynn1097 = 2
				for _, b := range yyq1097 {
					if b {
						yynn1097++
					}
				}
				r.EncodeMapStart(yynn1097)
				yynn1097 = 0
			}
			if yyr1097 || yy2arr1097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1099 := z.EncBinary()
				_ = yym1099
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1100 := z.EncBinary()
				_ = yym1100
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1097 || yy2arr1097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1102 := z.EncBinary()
				_ = yym1102
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1103 := z.EncBinary()
				_ = yym1103
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr1097 || yy2arr1097 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1097[2] {
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1105 := *x.Mode
						yym1106 := z.EncBinary()
						_ = yym1106
						if false {
						} else {
							r.EncodeInt(int64(yy1105))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1097[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("mode"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Mode == nil {
						r.EncodeNil()
					} else {
						yy1107 := *x.Mode
						yym1108 := z.EncBinary()
						_ = yym1108
						if false {
						} else {
							r.EncodeInt(int64(yy1107))
						}
					}
				}
			}
			if yyr1097 || yy2arr1097 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *KeyToPath) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1109 := z.DecBinary()
	_ = yym1109
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1110 := r.ContainerType()
		if yyct1110 == codecSelferValueTypeMap1234 {
			yyl1110 := r.ReadMapStart()
			if yyl1110 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1110, d)
			}
		} else if yyct1110 == codecSelferValueTypeArray1234 {
			yyl1110 := r.ReadArrayStart()
			if yyl1110 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1110, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *KeyToPath) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1111Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1111Slc
	var yyhl1111 bool = l >= 0
	for yyj1111 := 0; ; yyj1111++ {
		if yyhl1111 {
			if yyj1111 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1111Slc = r.DecodeBytes(yys1111Slc, true, true)
		yys1111 := string(yys1111Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1111 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "mode":
			if r.TryDecodeAsNil() {
				if x.Mode != nil {
					x.Mode = nil
				}
			} else {
				if x.Mode == nil {
					x.Mode = new(int32)
				}
				yym1115 := z.DecBinary()
				_ = yym1115
				if false {
				} else {
					*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1111)
		} // end switch yys1111
	} // end for yyj1111
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *KeyToPath) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1116 int
	var yyb1116 bool
	var yyhl1116 bool = l >= 0
	yyj1116++
	if yyhl1116 {
		yyb1116 = yyj1116 > l
	} else {
		yyb1116 = r.CheckBreak()
	}
	if yyb1116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1116++
	if yyhl1116 {
		yyb1116 = yyj1116 > l
	} else {
		yyb1116 = r.CheckBreak()
	}
	if yyb1116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1116++
	if yyhl1116 {
		yyb1116 = yyj1116 > l
	} else {
		yyb1116 = r.CheckBreak()
	}
	if yyb1116 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Mode != nil {
			x.Mode = nil
		}
	} else {
		if x.Mode == nil {
			x.Mode = new(int32)
		}
		yym1120 := z.DecBinary()
		_ = yym1120
		if false {
		} else {
			*((*int32)(x.Mode)) = int32(r.DecodeInt(32))
		}
	}
	for {
		yyj1116++
		if yyhl1116 {
			yyb1116 = yyj1116 > l
		} else {
			yyb1116 = r.CheckBreak()
		}
		if yyb1116 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1116-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1121 := z.EncBinary()
		_ = yym1121
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1122 := !z.EncBinary()
			yy2arr1122 := z.EncBasicHandle().StructToArray
			var yyq1122 [5]bool
			_, _, _ = yysep1122, yyq1122, yy2arr1122
			const yyr1122 bool = false
			yyq1122[0] = x.Name != ""
			yyq1122[1] = x.HostPort != 0
			yyq1122[3] = x.Protocol != ""
			yyq1122[4] = x.HostIP != ""
			var yynn1122 int
			if yyr1122 || yy2arr1122 {
				r.EncodeArrayStart(5)
			} else {
				yynn1122 = 1
				for _, b := range yyq1122 {
					if b {
						yynn1122++
					}
				}
				r.EncodeMapStart(yynn1122)
				yynn1122 = 0
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[0] {
					yym1124 := z.EncBinary()
					_ = yym1124
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1122[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1125 := z.EncBinary()
					_ = yym1125
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[1] {
					yym1127 := z.EncBinary()
					_ = yym1127
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1122[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPort"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1128 := z.EncBinary()
					_ = yym1128
					if false {
					} else {
						r.EncodeInt(int64(x.HostPort))
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1130 := z.EncBinary()
				_ = yym1130
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1131 := z.EncBinary()
				_ = yym1131
				if false {
				} else {
					r.EncodeInt(int64(x.ContainerPort))
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[3] {
					x.Protocol.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1122[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("protocol"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Protocol.CodecEncodeSelf(e)
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1122[4] {
					yym1134 := z.EncBinary()
					_ = yym1134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1122[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1135 := z.EncBinary()
					_ = yym1135
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr1122 || yy2arr1122 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1136 := z.DecBinary()
	_ = yym1136
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1137 := r.ContainerType()
		if yyct1137 == codecSelferValueTypeMap1234 {
			yyl1137 := r.ReadMapStart()
			if yyl1137 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1137, d)
			}
		} else if yyct1137 == codecSelferValueTypeArray1234 {
			yyl1137 := r.ReadArrayStart()
			if yyl1137 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1137, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1138Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1138Slc
	var yyhl1138 bool = l >= 0
	for yyj1138 := 0; ; yyj1138++ {
		if yyhl1138 {
			if yyj1138 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1138Slc = r.DecodeBytes(yys1138Slc, true, true)
		yys1138 := string(yys1138Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1138 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "hostPort":
			if r.TryDecodeAsNil() {
				x.HostPort = 0
			} else {
				x.HostPort = int32(r.DecodeInt(32))
			}
		case "containerPort":
			if r.TryDecodeAsNil() {
				x.ContainerPort = 0
			} else {
				x.ContainerPort = int32(r.DecodeInt(32))
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1138)
		} // end switch yys1138
	} // end for yyj1138
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1144 int
	var yyb1144 bool
	var yyhl1144 bool = l >= 0
	yyj1144++
	if yyhl1144 {
		yyb1144 = yyj1144 > l
	} else {
		yyb1144 = r.CheckBreak()
	}
	if yyb1144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1144++
	if yyhl1144 {
		yyb1144 = yyj1144 > l
	} else {
		yyb1144 = r.CheckBreak()
	}
	if yyb1144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPort = 0
	} else {
		x.HostPort = int32(r.DecodeInt(32))
	}
	yyj1144++
	if yyhl1144 {
		yyb1144 = yyj1144 > l
	} else {
		yyb1144 = r.CheckBreak()
	}
	if yyb1144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerPort = 0
	} else {
		x.ContainerPort = int32(r.DecodeInt(32))
	}
	yyj1144++
	if yyhl1144 {
		yyb1144 = yyj1144 > l
	} else {
		yyb1144 = r.CheckBreak()
	}
	if yyb1144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj1144++
	if yyhl1144 {
		yyb1144 = yyj1144 > l
	} else {
		yyb1144 = r.CheckBreak()
	}
	if yyb1144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	for {
		yyj1144++
		if yyhl1144 {
			yyb1144 = yyj1144 > l
		} else {
			yyb1144 = r.CheckBreak()
		}
		if yyb1144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *VolumeMount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1150 := z.EncBinary()
		_ = yym1150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1151 := !z.EncBinary()
			yy2arr1151 := z.EncBasicHandle().StructToArray
			var yyq1151 [4]bool
			_, _, _ = yysep1151, yyq1151, yy2arr1151
			const yyr1151 bool = false
			yyq1151[1] = x.ReadOnly != false
			yyq1151[3] = x.SubPath != ""
			var yynn1151 int
			if yyr1151 || yy2arr1151 {
				r.EncodeArrayStart(4)
			} else {
				yynn1151 = 2
				for _, b := range yyq1151 {
					if b {
						yynn1151++
					}
				}
				r.EncodeMapStart(yynn1151)
				yynn1151 = 0
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1153 := z.EncBinary()
				_ = yym1153
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1154 := z.EncBinary()
				_ = yym1154
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1151[1] {
					yym1156 := z.EncBinary()
					_ = yym1156
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1151[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnly"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1157 := z.EncBinary()
					_ = yym1157
					if false {
					} else {
						r.EncodeBool(bool(x.ReadOnly))
					}
				}
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1159 := z.EncBinary()
				_ = yym1159
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("mountPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1160 := z.EncBinary()
				_ = yym1160
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MountPath))
				}
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1151[3] {
					yym1162 := z.EncBinary()
					_ = yym1162
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1151[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1163 := z.EncBinary()
					_ = yym1163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.SubPath))
					}
				}
			}
			if yyr1151 || yy2arr1151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *VolumeMount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1164 := z.DecBinary()
	_ = yym1164
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1165 := r.ContainerType()
		if yyct1165 == codecSelferValueTypeMap1234 {
			yyl1165 := r.ReadMapStart()
			if yyl1165 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1165, d)
			}
		} else if yyct1165 == codecSelferValueTypeArray1234 {
			yyl1165 := r.ReadArrayStart()
			if yyl1165 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1165, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *VolumeMount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1166Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1166Slc
	var yyhl1166 bool = l >= 0
	for yyj1166 := 0; ; yyj1166++ {
		if yyhl1166 {
			if yyj1166 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1166Slc = r.DecodeBytes(yys1166Slc, true, true)
		yys1166 := string(yys1166Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1166 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "readOnly":
			if r.TryDecodeAsNil() {
				x.ReadOnly = false
			} else {
				x.ReadOnly = bool(r.DecodeBool())
			}
		case "mountPath":
			if r.TryDecodeAsNil() {
				x.MountPath = ""
			} else {
				x.MountPath = string(r.DecodeString())
			}
		case "subPath":
			if r.TryDecodeAsNil() {
				x.SubPath = ""
			} else {
				x.SubPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1166)
		} // end switch yys1166
	} // end for yyj1166
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *VolumeMount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1171 int
	var yyb1171 bool
	var yyhl1171 bool = l >= 0
	yyj1171++
	if yyhl1171 {
		yyb1171 = yyj1171 > l
	} else {
		yyb1171 = r.CheckBreak()
	}
	if yyb1171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1171++
	if yyhl1171 {
		yyb1171 = yyj1171 > l
	} else {
		yyb1171 = r.CheckBreak()
	}
	if yyb1171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ReadOnly = false
	} else {
		x.ReadOnly = bool(r.DecodeBool())
	}
	yyj1171++
	if yyhl1171 {
		yyb1171 = yyj1171 > l
	} else {
		yyb1171 = r.CheckBreak()
	}
	if yyb1171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MountPath = ""
	} else {
		x.MountPath = string(r.DecodeString())
	}
	yyj1171++
	if yyhl1171 {
		yyb1171 = yyj1171 > l
	} else {
		yyb1171 = r.CheckBreak()
	}
	if yyb1171 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SubPath = ""
	} else {
		x.SubPath = string(r.DecodeString())
	}
	for {
		yyj1171++
		if yyhl1171 {
			yyb1171 = yyj1171 > l
		} else {
			yyb1171 = r.CheckBreak()
		}
		if yyb1171 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1171-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVar) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1176 := z.EncBinary()
		_ = yym1176
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1177 := !z.EncBinary()
			yy2arr1177 := z.EncBasicHandle().StructToArray
			var yyq1177 [3]bool
			_, _, _ = yysep1177, yyq1177, yy2arr1177
			const yyr1177 bool = false
			yyq1177[1] = x.Value != ""
			yyq1177[2] = x.ValueFrom != nil
			var yynn1177 int
			if yyr1177 || yy2arr1177 {
				r.EncodeArrayStart(3)
			} else {
				yynn1177 = 1
				for _, b := range yyq1177 {
					if b {
						yynn1177++
					}
				}
				r.EncodeMapStart(yynn1177)
				yynn1177 = 0
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1179 := z.EncBinary()
				_ = yym1179
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1180 := z.EncBinary()
				_ = yym1180
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1177[1] {
					yym1182 := z.EncBinary()
					_ = yym1182
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1177[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1183 := z.EncBinary()
					_ = yym1183
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1177[2] {
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1177[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("valueFrom"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ValueFrom == nil {
						r.EncodeNil()
					} else {
						x.ValueFrom.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1177 || yy2arr1177 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVar) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1185 := z.DecBinary()
	_ = yym1185
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1186 := r.ContainerType()
		if yyct1186 == codecSelferValueTypeMap1234 {
			yyl1186 := r.ReadMapStart()
			if yyl1186 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1186, d)
			}
		} else if yyct1186 == codecSelferValueTypeArray1234 {
			yyl1186 := r.ReadArrayStart()
			if yyl1186 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1186, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVar) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1187Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1187Slc
	var yyhl1187 bool = l >= 0
	for yyj1187 := 0; ; yyj1187++ {
		if yyhl1187 {
			if yyj1187 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1187Slc = r.DecodeBytes(yys1187Slc, true, true)
		yys1187 := string(yys1187Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1187 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "valueFrom":
			if r.TryDecodeAsNil() {
				if x.ValueFrom != nil {
					x.ValueFrom = nil
				}
			} else {
				if x.ValueFrom == nil {
					x.ValueFrom = new(EnvVarSource)
				}
				x.ValueFrom.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1187)
		} // end switch yys1187
	} // end for yyj1187
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVar) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1191 int
	var yyb1191 bool
	var yyhl1191 bool = l >= 0
	yyj1191++
	if yyhl1191 {
		yyb1191 = yyj1191 > l
	} else {
		yyb1191 = r.CheckBreak()
	}
	if yyb1191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1191++
	if yyhl1191 {
		yyb1191 = yyj1191 > l
	} else {
		yyb1191 = r.CheckBreak()
	}
	if yyb1191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1191++
	if yyhl1191 {
		yyb1191 = yyj1191 > l
	} else {
		yyb1191 = r.CheckBreak()
	}
	if yyb1191 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ValueFrom != nil {
			x.ValueFrom = nil
		}
	} else {
		if x.ValueFrom == nil {
			x.ValueFrom = new(EnvVarSource)
		}
		x.ValueFrom.CodecDecodeSelf(d)
	}
	for {
		yyj1191++
		if yyhl1191 {
			yyb1191 = yyj1191 > l
		} else {
			yyb1191 = r.CheckBreak()
		}
		if yyb1191 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1191-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EnvVarSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1195 := z.EncBinary()
		_ = yym1195
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1196 := !z.EncBinary()
			yy2arr1196 := z.EncBasicHandle().StructToArray
			var yyq1196 [4]bool
			_, _, _ = yysep1196, yyq1196, yy2arr1196
			const yyr1196 bool = false
			yyq1196[0] = x.FieldRef != nil
			yyq1196[1] = x.ResourceFieldRef != nil
			yyq1196[2] = x.ConfigMapKeyRef != nil
			yyq1196[3] = x.SecretKeyRef != nil
			var yynn1196 int
			if yyr1196 || yy2arr1196 {
				r.EncodeArrayStart(4)
			} else {
				yynn1196 = 0
				for _, b := range yyq1196 {
					if b {
						yynn1196++
					}
				}
				r.EncodeMapStart(yynn1196)
				yynn1196 = 0
			}
			if yyr1196 || yy2arr1196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1196[0] {
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1196[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FieldRef == nil {
						r.EncodeNil()
					} else {
						x.FieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1196 || yy2arr1196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1196[1] {
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1196[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceFieldRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ResourceFieldRef == nil {
						r.EncodeNil()
					} else {
						x.ResourceFieldRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1196 || yy2arr1196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1196[2] {
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1196[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("configMapKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ConfigMapKeyRef == nil {
						r.EncodeNil()
					} else {
						x.ConfigMapKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1196 || yy2arr1196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1196[3] {
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1196[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("secretKeyRef"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecretKeyRef == nil {
						r.EncodeNil()
					} else {
						x.SecretKeyRef.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1196 || yy2arr1196 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EnvVarSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1201 := z.DecBinary()
	_ = yym1201
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1202 := r.ContainerType()
		if yyct1202 == codecSelferValueTypeMap1234 {
			yyl1202 := r.ReadMapStart()
			if yyl1202 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1202, d)
			}
		} else if yyct1202 == codecSelferValueTypeArray1234 {
			yyl1202 := r.ReadArrayStart()
			if yyl1202 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1202, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EnvVarSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1203Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1203Slc
	var yyhl1203 bool = l >= 0
	for yyj1203 := 0; ; yyj1203++ {
		if yyhl1203 {
			if yyj1203 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1203Slc = r.DecodeBytes(yys1203Slc, true, true)
		yys1203 := string(yys1203Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1203 {
		case "fieldRef":
			if r.TryDecodeAsNil() {
				if x.FieldRef != nil {
					x.FieldRef = nil
				}
			} else {
				if x.FieldRef == nil {
					x.FieldRef = new(ObjectFieldSelector)
				}
				x.FieldRef.CodecDecodeSelf(d)
			}
		case "resourceFieldRef":
			if r.TryDecodeAsNil() {
				if x.ResourceFieldRef != nil {
					x.ResourceFieldRef = nil
				}
			} else {
				if x.ResourceFieldRef == nil {
					x.ResourceFieldRef = new(ResourceFieldSelector)
				}
				x.ResourceFieldRef.CodecDecodeSelf(d)
			}
		case "configMapKeyRef":
			if r.TryDecodeAsNil() {
				if x.ConfigMapKeyRef != nil {
					x.ConfigMapKeyRef = nil
				}
			} else {
				if x.ConfigMapKeyRef == nil {
					x.ConfigMapKeyRef = new(ConfigMapKeySelector)
				}
				x.ConfigMapKeyRef.CodecDecodeSelf(d)
			}
		case "secretKeyRef":
			if r.TryDecodeAsNil() {
				if x.SecretKeyRef != nil {
					x.SecretKeyRef = nil
				}
			} else {
				if x.SecretKeyRef == nil {
					x.SecretKeyRef = new(SecretKeySelector)
				}
				x.SecretKeyRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1203)
		} // end switch yys1203
	} // end for yyj1203
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EnvVarSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1208 int
	var yyb1208 bool
	var yyhl1208 bool = l >= 0
	yyj1208++
	if yyhl1208 {
		yyb1208 = yyj1208 > l
	} else {
		yyb1208 = r.CheckBreak()
	}
	if yyb1208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FieldRef != nil {
			x.FieldRef = nil
		}
	} else {
		if x.FieldRef == nil {
			x.FieldRef = new(ObjectFieldSelector)
		}
		x.FieldRef.CodecDecodeSelf(d)
	}
	yyj1208++
	if yyhl1208 {
		yyb1208 = yyj1208 > l
	} else {
		yyb1208 = r.CheckBreak()
	}
	if yyb1208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ResourceFieldRef != nil {
			x.ResourceFieldRef = nil
		}
	} else {
		if x.ResourceFieldRef == nil {
			x.ResourceFieldRef = new(ResourceFieldSelector)
		}
		x.ResourceFieldRef.CodecDecodeSelf(d)
	}
	yyj1208++
	if yyhl1208 {
		yyb1208 = yyj1208 > l
	} else {
		yyb1208 = r.CheckBreak()
	}
	if yyb1208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ConfigMapKeyRef != nil {
			x.ConfigMapKeyRef = nil
		}
	} else {
		if x.ConfigMapKeyRef == nil {
			x.ConfigMapKeyRef = new(ConfigMapKeySelector)
		}
		x.ConfigMapKeyRef.CodecDecodeSelf(d)
	}
	yyj1208++
	if yyhl1208 {
		yyb1208 = yyj1208 > l
	} else {
		yyb1208 = r.CheckBreak()
	}
	if yyb1208 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecretKeyRef != nil {
			x.SecretKeyRef = nil
		}
	} else {
		if x.SecretKeyRef == nil {
			x.SecretKeyRef = new(SecretKeySelector)
		}
		x.SecretKeyRef.CodecDecodeSelf(d)
	}
	for {
		yyj1208++
		if yyhl1208 {
			yyb1208 = yyj1208 > l
		} else {
			yyb1208 = r.CheckBreak()
		}
		if yyb1208 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1208-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1213 := z.EncBinary()
		_ = yym1213
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1214 := !z.EncBinary()
			yy2arr1214 := z.EncBasicHandle().StructToArray
			var yyq1214 [2]bool
			_, _, _ = yysep1214, yyq1214, yy2arr1214
			const yyr1214 bool = false
			var yynn1214 int
			if yyr1214 || yy2arr1214 {
				r.EncodeArrayStart(2)
			} else {
				yynn1214 = 2
				for _, b := range yyq1214 {
					if b {
						yynn1214++
					}
				}
				r.EncodeMapStart(yynn1214)
				yynn1214 = 0
			}
			if yyr1214 || yy2arr1214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1216 := z.EncBinary()
				_ = yym1216
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1217 := z.EncBinary()
				_ = yym1217
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr1214 || yy2arr1214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1219 := z.EncBinary()
				_ = yym1219
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1220 := z.EncBinary()
				_ = yym1220
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
				}
			}
			if yyr1214 || yy2arr1214 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1221 := z.DecBinary()
	_ = yym1221
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1222 := r.ContainerType()
		if yyct1222 == codecSelferValueTypeMap1234 {
			yyl1222 := r.ReadMapStart()
			if yyl1222 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1222, d)
			}
		} else if yyct1222 == codecSelferValueTypeArray1234 {
			yyl1222 := r.ReadArrayStart()
			if yyl1222 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1222, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1223Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1223Slc
	var yyhl1223 bool = l >= 0
	for yyj1223 := 0; ; yyj1223++ {
		if yyhl1223 {
			if yyj1223 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1223Slc = r.DecodeBytes(yys1223Slc, true, true)
		yys1223 := string(yys1223Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1223 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1223)
		} // end switch yys1223
	} // end for yyj1223
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1226 int
	var yyb1226 bool
	var yyhl1226 bool = l >= 0
	yyj1226++
	if yyhl1226 {
		yyb1226 = yyj1226 > l
	} else {
		yyb1226 = r.CheckBreak()
	}
	if yyb1226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1226++
	if yyhl1226 {
		yyb1226 = yyj1226 > l
	} else {
		yyb1226 = r.CheckBreak()
	}
	if yyb1226 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj1226++
		if yyhl1226 {
			yyb1226 = yyj1226 > l
		} else {
			yyb1226 = r.CheckBreak()
		}
		if yyb1226 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1226-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceFieldSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1229 := z.EncBinary()
		_ = yym1229
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1230 := !z.EncBinary()
			yy2arr1230 := z.EncBasicHandle().StructToArray
			var yyq1230 [3]bool
			_, _, _ = yysep1230, yyq1230, yy2arr1230
			const yyr1230 bool = false
			yyq1230[0] = x.ContainerName != ""
			yyq1230[2] = true
			var yynn1230 int
			if yyr1230 || yy2arr1230 {
				r.EncodeArrayStart(3)
			} else {
				yynn1230 = 1
				for _, b := range yyq1230 {
					if b {
						yynn1230++
					}
				}
				r.EncodeMapStart(yynn1230)
				yynn1230 = 0
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1230[0] {
					yym1232 := z.EncBinary()
					_ = yym1232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1230[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1233 := z.EncBinary()
					_ = yym1233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerName))
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1235 := z.EncBinary()
				_ = yym1235
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("resource"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1236 := z.EncBinary()
				_ = yym1236
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Resource))
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1230[2] {
					yy1238 := &x.Divisor
					yym1239 := z.EncBinary()
					_ = yym1239
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1238) {
					} else if !yym1239 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1238)
					} else {
						z.EncFallback(yy1238)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1230[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("divisor"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1240 := &x.Divisor
					yym1241 := z.EncBinary()
					_ = yym1241
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1240) {
					} else if !yym1241 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1240)
					} else {
						z.EncFallback(yy1240)
					}
				}
			}
			if yyr1230 || yy2arr1230 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceFieldSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1242 := z.DecBinary()
	_ = yym1242
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1243 := r.ContainerType()
		if yyct1243 == codecSelferValueTypeMap1234 {
			yyl1243 := r.ReadMapStart()
			if yyl1243 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1243, d)
			}
		} else if yyct1243 == codecSelferValueTypeArray1234 {
			yyl1243 := r.ReadArrayStart()
			if yyl1243 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1243, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceFieldSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1244Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1244Slc
	var yyhl1244 bool = l >= 0
	for yyj1244 := 0; ; yyj1244++ {
		if yyhl1244 {
			if yyj1244 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1244Slc = r.DecodeBytes(yys1244Slc, true, true)
		yys1244 := string(yys1244Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1244 {
		case "containerName":
			if r.TryDecodeAsNil() {
				x.ContainerName = ""
			} else {
				x.ContainerName = string(r.DecodeString())
			}
		case "resource":
			if r.TryDecodeAsNil() {
				x.Resource = ""
			} else {
				x.Resource = string(r.DecodeString())
			}
		case "divisor":
			if r.TryDecodeAsNil() {
				x.Divisor = pkg3_resource.Quantity{}
			} else {
				yyv1247 := &x.Divisor
				yym1248 := z.DecBinary()
				_ = yym1248
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1247) {
				} else if !yym1248 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1247)
				} else {
					z.DecFallback(yyv1247, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1244)
		} // end switch yys1244
	} // end for yyj1244
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceFieldSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1249 int
	var yyb1249 bool
	var yyhl1249 bool = l >= 0
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerName = ""
	} else {
		x.ContainerName = string(r.DecodeString())
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resource = ""
	} else {
		x.Resource = string(r.DecodeString())
	}
	yyj1249++
	if yyhl1249 {
		yyb1249 = yyj1249 > l
	} else {
		yyb1249 = r.CheckBreak()
	}
	if yyb1249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Divisor = pkg3_resource.Quantity{}
	} else {
		yyv1252 := &x.Divisor
		yym1253 := z.DecBinary()
		_ = yym1253
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1252) {
		} else if !yym1253 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1252)
		} else {
			z.DecFallback(yyv1252, false)
		}
	}
	for {
		yyj1249++
		if yyhl1249 {
			yyb1249 = yyj1249 > l
		} else {
			yyb1249 = r.CheckBreak()
		}
		if yyb1249 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1249-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1254 := z.EncBinary()
		_ = yym1254
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1255 := !z.EncBinary()
			yy2arr1255 := z.EncBasicHandle().StructToArray
			var yyq1255 [2]bool
			_, _, _ = yysep1255, yyq1255, yy2arr1255
			const yyr1255 bool = false
			var yynn1255 int
			if yyr1255 || yy2arr1255 {
				r.EncodeArrayStart(2)
			} else {
				yynn1255 = 2
				for _, b := range yyq1255 {
					if b {
						yynn1255++
					}
				}
				r.EncodeMapStart(yynn1255)
				yynn1255 = 0
			}
			if yyr1255 || yy2arr1255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1257 := z.EncBinary()
				_ = yym1257
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1258 := z.EncBinary()
				_ = yym1258
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1255 || yy2arr1255 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1260 := z.EncBinary()
				_ = yym1260
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1261 := z.EncBinary()
				_ = yym1261
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1255 || yy2arr1255 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1262 := z.DecBinary()
	_ = yym1262
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1263 := r.ContainerType()
		if yyct1263 == codecSelferValueTypeMap1234 {
			yyl1263 := r.ReadMapStart()
			if yyl1263 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1263, d)
			}
		} else if yyct1263 == codecSelferValueTypeArray1234 {
			yyl1263 := r.ReadArrayStart()
			if yyl1263 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1263, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1264Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1264Slc
	var yyhl1264 bool = l >= 0
	for yyj1264 := 0; ; yyj1264++ {
		if yyhl1264 {
			if yyj1264 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1264Slc = r.DecodeBytes(yys1264Slc, true, true)
		yys1264 := string(yys1264Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1264 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1264)
		} // end switch yys1264
	} // end for yyj1264
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1267 int
	var yyb1267 bool
	var yyhl1267 bool = l >= 0
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1267++
	if yyhl1267 {
		yyb1267 = yyj1267 > l
	} else {
		yyb1267 = r.CheckBreak()
	}
	if yyb1267 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1267++
		if yyhl1267 {
			yyb1267 = yyj1267 > l
		} else {
			yyb1267 = r.CheckBreak()
		}
		if yyb1267 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1267-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecretKeySelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1270 := z.EncBinary()
		_ = yym1270
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1271 := !z.EncBinary()
			yy2arr1271 := z.EncBasicHandle().StructToArray
			var yyq1271 [2]bool
			_, _, _ = yysep1271, yyq1271, yy2arr1271
			const yyr1271 bool = false
			var yynn1271 int
			if yyr1271 || yy2arr1271 {
				r.EncodeArrayStart(2)
			} else {
				yynn1271 = 2
				for _, b := range yyq1271 {
					if b {
						yynn1271++
					}
				}
				r.EncodeMapStart(yynn1271)
				yynn1271 = 0
			}
			if yyr1271 || yy2arr1271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1273 := z.EncBinary()
				_ = yym1273
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1274 := z.EncBinary()
				_ = yym1274
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1271 || yy2arr1271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1276 := z.EncBinary()
				_ = yym1276
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1277 := z.EncBinary()
				_ = yym1277
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1271 || yy2arr1271 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretKeySelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1278 := z.DecBinary()
	_ = yym1278
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1279 := r.ContainerType()
		if yyct1279 == codecSelferValueTypeMap1234 {
			yyl1279 := r.ReadMapStart()
			if yyl1279 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1279, d)
			}
		} else if yyct1279 == codecSelferValueTypeArray1234 {
			yyl1279 := r.ReadArrayStart()
			if yyl1279 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1279, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretKeySelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1280Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1280Slc
	var yyhl1280 bool = l >= 0
	for yyj1280 := 0; ; yyj1280++ {
		if yyhl1280 {
			if yyj1280 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1280Slc = r.DecodeBytes(yys1280Slc, true, true)
		yys1280 := string(yys1280Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1280 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1280)
		} // end switch yys1280
	} // end for yyj1280
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretKeySelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1283 int
	var yyb1283 bool
	var yyhl1283 bool = l >= 0
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1283++
	if yyhl1283 {
		yyb1283 = yyj1283 > l
	} else {
		yyb1283 = r.CheckBreak()
	}
	if yyb1283 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	for {
		yyj1283++
		if yyhl1283 {
			yyb1283 = yyj1283 > l
		} else {
			yyb1283 = r.CheckBreak()
		}
		if yyb1283 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1283-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPHeader) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1286 := z.EncBinary()
		_ = yym1286
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1287 := !z.EncBinary()
			yy2arr1287 := z.EncBasicHandle().StructToArray
			var yyq1287 [2]bool
			_, _, _ = yysep1287, yyq1287, yy2arr1287
			const yyr1287 bool = false
			var yynn1287 int
			if yyr1287 || yy2arr1287 {
				r.EncodeArrayStart(2)
			} else {
				yynn1287 = 2
				for _, b := range yyq1287 {
					if b {
						yynn1287++
					}
				}
				r.EncodeMapStart(yynn1287)
				yynn1287 = 0
			}
			if yyr1287 || yy2arr1287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1289 := z.EncBinary()
				_ = yym1289
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1290 := z.EncBinary()
				_ = yym1290
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1287 || yy2arr1287 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1292 := z.EncBinary()
				_ = yym1292
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("value"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1293 := z.EncBinary()
				_ = yym1293
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Value))
				}
			}
			if yyr1287 || yy2arr1287 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPHeader) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1294 := z.DecBinary()
	_ = yym1294
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1295 := r.ContainerType()
		if yyct1295 == codecSelferValueTypeMap1234 {
			yyl1295 := r.ReadMapStart()
			if yyl1295 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1295, d)
			}
		} else if yyct1295 == codecSelferValueTypeArray1234 {
			yyl1295 := r.ReadArrayStart()
			if yyl1295 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1295, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPHeader) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1296Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1296Slc
	var yyhl1296 bool = l >= 0
	for yyj1296 := 0; ; yyj1296++ {
		if yyhl1296 {
			if yyj1296 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1296Slc = r.DecodeBytes(yys1296Slc, true, true)
		yys1296 := string(yys1296Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1296 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1296)
		} // end switch yys1296
	} // end for yyj1296
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPHeader) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1299 int
	var yyb1299 bool
	var yyhl1299 bool = l >= 0
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1299++
	if yyhl1299 {
		yyb1299 = yyj1299 > l
	} else {
		yyb1299 = r.CheckBreak()
	}
	if yyb1299 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	for {
		yyj1299++
		if yyhl1299 {
			yyb1299 = yyj1299 > l
		} else {
			yyb1299 = r.CheckBreak()
		}
		if yyb1299 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1299-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *HTTPGetAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1302 := z.EncBinary()
		_ = yym1302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1303 := !z.EncBinary()
			yy2arr1303 := z.EncBasicHandle().StructToArray
			var yyq1303 [5]bool
			_, _, _ = yysep1303, yyq1303, yy2arr1303
			const yyr1303 bool = false
			yyq1303[0] = x.Path != ""
			yyq1303[1] = true
			yyq1303[2] = x.Host != ""
			yyq1303[3] = x.Scheme != ""
			yyq1303[4] = len(x.HTTPHeaders) != 0
			var yynn1303 int
			if yyr1303 || yy2arr1303 {
				r.EncodeArrayStart(5)
			} else {
				yynn1303 = 0
				for _, b := range yyq1303 {
					if b {
						yynn1303++
					}
				}
				r.EncodeMapStart(yynn1303)
				yynn1303 = 0
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[0] {
					yym1305 := z.EncBinary()
					_ = yym1305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1303[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("path"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1306 := z.EncBinary()
					_ = yym1306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Path))
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[1] {
					yy1308 := &x.Port
					yym1309 := z.EncBinary()
					_ = yym1309
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1308) {
					} else if !yym1309 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1308)
					} else {
						z.EncFallback(yy1308)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1303[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1310 := &x.Port
					yym1311 := z.EncBinary()
					_ = yym1311
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1310) {
					} else if !yym1311 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1310)
					} else {
						z.EncFallback(yy1310)
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[2] {
					yym1313 := z.EncBinary()
					_ = yym1313
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1303[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1314 := z.EncBinary()
					_ = yym1314
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[3] {
					x.Scheme.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1303[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scheme"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Scheme.CodecEncodeSelf(e)
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1303[4] {
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1317 := z.EncBinary()
						_ = yym1317
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1303[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpHeaders"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPHeaders == nil {
						r.EncodeNil()
					} else {
						yym1318 := z.EncBinary()
						_ = yym1318
						if false {
						} else {
							h.encSliceHTTPHeader(([]HTTPHeader)(x.HTTPHeaders), e)
						}
					}
				}
			}
			if yyr1303 || yy2arr1303 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *HTTPGetAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1319 := z.DecBinary()
	_ = yym1319
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1320 := r.ContainerType()
		if yyct1320 == codecSelferValueTypeMap1234 {
			yyl1320 := r.ReadMapStart()
			if yyl1320 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1320, d)
			}
		} else if yyct1320 == codecSelferValueTypeArray1234 {
			yyl1320 := r.ReadArrayStart()
			if yyl1320 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1320, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *HTTPGetAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1321Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1321Slc
	var yyhl1321 bool = l >= 0
	for yyj1321 := 0; ; yyj1321++ {
		if yyhl1321 {
			if yyj1321 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1321Slc = r.DecodeBytes(yys1321Slc, true, true)
		yys1321 := string(yys1321Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1321 {
		case "path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1323 := &x.Port
				yym1324 := z.DecBinary()
				_ = yym1324
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1323) {
				} else if !yym1324 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1323)
				} else {
					z.DecFallback(yyv1323, false)
				}
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		case "scheme":
			if r.TryDecodeAsNil() {
				x.Scheme = ""
			} else {
				x.Scheme = URIScheme(r.DecodeString())
			}
		case "httpHeaders":
			if r.TryDecodeAsNil() {
				x.HTTPHeaders = nil
			} else {
				yyv1327 := &x.HTTPHeaders
				yym1328 := z.DecBinary()
				_ = yym1328
				if false {
				} else {
					h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1327), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1321)
		} // end switch yys1321
	} // end for yyj1321
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *HTTPGetAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1329 int
	var yyb1329 bool
	var yyhl1329 bool = l >= 0
	yyj1329++
	if yyhl1329 {
		yyb1329 = yyj1329 > l
	} else {
		yyb1329 = r.CheckBreak()
	}
	if yyb1329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	yyj1329++
	if yyhl1329 {
		yyb1329 = yyj1329 > l
	} else {
		yyb1329 = r.CheckBreak()
	}
	if yyb1329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1331 := &x.Port
		yym1332 := z.DecBinary()
		_ = yym1332
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1331) {
		} else if !yym1332 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1331)
		} else {
			z.DecFallback(yyv1331, false)
		}
	}
	yyj1329++
	if yyhl1329 {
		yyb1329 = yyj1329 > l
	} else {
		yyb1329 = r.CheckBreak()
	}
	if yyb1329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	yyj1329++
	if yyhl1329 {
		yyb1329 = yyj1329 > l
	} else {
		yyb1329 = r.CheckBreak()
	}
	if yyb1329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scheme = ""
	} else {
		x.Scheme = URIScheme(r.DecodeString())
	}
	yyj1329++
	if yyhl1329 {
		yyb1329 = yyj1329 > l
	} else {
		yyb1329 = r.CheckBreak()
	}
	if yyb1329 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HTTPHeaders = nil
	} else {
		yyv1335 := &x.HTTPHeaders
		yym1336 := z.DecBinary()
		_ = yym1336
		if false {
		} else {
			h.decSliceHTTPHeader((*[]HTTPHeader)(yyv1335), d)
		}
	}
	for {
		yyj1329++
		if yyhl1329 {
			yyb1329 = yyj1329 > l
		} else {
			yyb1329 = r.CheckBreak()
		}
		if yyb1329 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1329-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x URIScheme) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1337 := z.EncBinary()
	_ = yym1337
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *URIScheme) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1338 := z.DecBinary()
	_ = yym1338
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *TCPSocketAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1339 := z.EncBinary()
		_ = yym1339
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1340 := !z.EncBinary()
			yy2arr1340 := z.EncBasicHandle().StructToArray
			var yyq1340 [1]bool
			_, _, _ = yysep1340, yyq1340, yy2arr1340
			const yyr1340 bool = false
			yyq1340[0] = true
			var yynn1340 int
			if yyr1340 || yy2arr1340 {
				r.EncodeArrayStart(1)
			} else {
				yynn1340 = 0
				for _, b := range yyq1340 {
					if b {
						yynn1340++
					}
				}
				r.EncodeMapStart(yynn1340)
				yynn1340 = 0
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1340[0] {
					yy1342 := &x.Port
					yym1343 := z.EncBinary()
					_ = yym1343
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1342) {
					} else if !yym1343 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1342)
					} else {
						z.EncFallback(yy1342)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1340[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("port"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1344 := &x.Port
					yym1345 := z.EncBinary()
					_ = yym1345
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1344) {
					} else if !yym1345 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1344)
					} else {
						z.EncFallback(yy1344)
					}
				}
			}
			if yyr1340 || yy2arr1340 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *TCPSocketAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1346 := z.DecBinary()
	_ = yym1346
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1347 := r.ContainerType()
		if yyct1347 == codecSelferValueTypeMap1234 {
			yyl1347 := r.ReadMapStart()
			if yyl1347 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1347, d)
			}
		} else if yyct1347 == codecSelferValueTypeArray1234 {
			yyl1347 := r.ReadArrayStart()
			if yyl1347 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1347, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *TCPSocketAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1348Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1348Slc
	var yyhl1348 bool = l >= 0
	for yyj1348 := 0; ; yyj1348++ {
		if yyhl1348 {
			if yyj1348 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1348Slc = r.DecodeBytes(yys1348Slc, true, true)
		yys1348 := string(yys1348Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1348 {
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = pkg4_intstr.IntOrString{}
			} else {
				yyv1349 := &x.Port
				yym1350 := z.DecBinary()
				_ = yym1350
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1349) {
				} else if !yym1350 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1349)
				} else {
					z.DecFallback(yyv1349, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1348)
		} // end switch yys1348
	} // end for yyj1348
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *TCPSocketAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1351 int
	var yyb1351 bool
	var yyhl1351 bool = l >= 0
	yyj1351++
	if yyhl1351 {
		yyb1351 = yyj1351 > l
	} else {
		yyb1351 = r.CheckBreak()
	}
	if yyb1351 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = pkg4_intstr.IntOrString{}
	} else {
		yyv1352 := &x.Port
		yym1353 := z.DecBinary()
		_ = yym1353
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1352) {
		} else if !yym1353 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1352)
		} else {
			z.DecFallback(yyv1352, false)
		}
	}
	for {
		yyj1351++
		if yyhl1351 {
			yyb1351 = yyj1351 > l
		} else {
			yyb1351 = r.CheckBreak()
		}
		if yyb1351 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1351-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExecAction) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1354 := z.EncBinary()
		_ = yym1354
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1355 := !z.EncBinary()
			yy2arr1355 := z.EncBasicHandle().StructToArray
			var yyq1355 [1]bool
			_, _, _ = yysep1355, yyq1355, yy2arr1355
			const yyr1355 bool = false
			yyq1355[0] = len(x.Command) != 0
			var yynn1355 int
			if yyr1355 || yy2arr1355 {
				r.EncodeArrayStart(1)
			} else {
				yynn1355 = 0
				for _, b := range yyq1355 {
					if b {
						yynn1355++
					}
				}
				r.EncodeMapStart(yynn1355)
				yynn1355 = 0
			}
			if yyr1355 || yy2arr1355 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1355[0] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1357 := z.EncBinary()
						_ = yym1357
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1355[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1358 := z.EncBinary()
						_ = yym1358
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1355 || yy2arr1355 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExecAction) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1359 := z.DecBinary()
	_ = yym1359
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1360 := r.ContainerType()
		if yyct1360 == codecSelferValueTypeMap1234 {
			yyl1360 := r.ReadMapStart()
			if yyl1360 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1360, d)
			}
		} else if yyct1360 == codecSelferValueTypeArray1234 {
			yyl1360 := r.ReadArrayStart()
			if yyl1360 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1360, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExecAction) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1361Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1361Slc
	var yyhl1361 bool = l >= 0
	for yyj1361 := 0; ; yyj1361++ {
		if yyhl1361 {
			if yyj1361 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1361Slc = r.DecodeBytes(yys1361Slc, true, true)
		yys1361 := string(yys1361Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1361 {
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1362 := &x.Command
				yym1363 := z.DecBinary()
				_ = yym1363
				if false {
				} else {
					z.F.DecSliceStringX(yyv1362, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1361)
		} // end switch yys1361
	} // end for yyj1361
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExecAction) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1364 int
	var yyb1364 bool
	var yyhl1364 bool = l >= 0
	yyj1364++
	if yyhl1364 {
		yyb1364 = yyj1364 > l
	} else {
		yyb1364 = r.CheckBreak()
	}
	if yyb1364 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1365 := &x.Command
		yym1366 := z.DecBinary()
		_ = yym1366
		if false {
		} else {
			z.F.DecSliceStringX(yyv1365, false, d)
		}
	}
	for {
		yyj1364++
		if yyhl1364 {
			yyb1364 = yyj1364 > l
		} else {
			yyb1364 = r.CheckBreak()
		}
		if yyb1364 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1364-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Probe) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1367 := z.EncBinary()
		_ = yym1367
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1368 := !z.EncBinary()
			yy2arr1368 := z.EncBasicHandle().StructToArray
			var yyq1368 [8]bool
			_, _, _ = yysep1368, yyq1368, yy2arr1368
			const yyr1368 bool = false
			yyq1368[0] = x.Handler.Exec != nil && x.Exec != nil
			yyq1368[1] = x.Handler.HTTPGet != nil && x.HTTPGet != nil
			yyq1368[2] = x.Handler.TCPSocket != nil && x.TCPSocket != nil
			yyq1368[3] = x.InitialDelaySeconds != 0
			yyq1368[4] = x.TimeoutSeconds != 0
			yyq1368[5] = x.PeriodSeconds != 0
			yyq1368[6] = x.SuccessThreshold != 0
			yyq1368[7] = x.FailureThreshold != 0
			var yynn1368 int
			if yyr1368 || yy2arr1368 {
				r.EncodeArrayStart(8)
			} else {
				yynn1368 = 0
				for _, b := range yyq1368 {
					if b {
						yynn1368++
					}
				}
				r.EncodeMapStart(yynn1368)
				yynn1368 = 0
			}
			var yyn1369 bool
			if x.Handler.Exec == nil {
				yyn1369 = true
				goto LABEL1369
			}
		LABEL1369:
			if yyr1368 || yy2arr1368 {
				if yyn1369 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1368[0] {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1368[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1369 {
						r.EncodeNil()
					} else {
						if x.Exec == nil {
							r.EncodeNil()
						} else {
							x.Exec.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1370 bool
			if x.Handler.HTTPGet == nil {
				yyn1370 = true
				goto LABEL1370
			}
		LABEL1370:
			if yyr1368 || yy2arr1368 {
				if yyn1370 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1368[1] {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1368[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1370 {
						r.EncodeNil()
					} else {
						if x.HTTPGet == nil {
							r.EncodeNil()
						} else {
							x.HTTPGet.CodecEncodeSelf(e)
						}
					}
				}
			}
			var yyn1371 bool
			if x.Handler.TCPSocket == nil {
				yyn1371 = true
				goto LABEL1371
			}
		LABEL1371:
			if yyr1368 || yy2arr1368 {
				if yyn1371 {
					r.EncodeNil()
				} else {
					z.EncSendContainerState(codecSelfer_containerArrayElem1234)
					if yyq1368[2] {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					} else {
						r.EncodeNil()
					}
				}
			} else {
				if yyq1368[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if yyn1371 {
						r.EncodeNil()
					} else {
						if x.TCPSocket == nil {
							r.EncodeNil()
						} else {
							x.TCPSocket.CodecEncodeSelf(e)
						}
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[3] {
					yym1373 := z.EncBinary()
					_ = yym1373
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1368[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("initialDelaySeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1374 := z.EncBinary()
					_ = yym1374
					if false {
					} else {
						r.EncodeInt(int64(x.InitialDelaySeconds))
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[4] {
					yym1376 := z.EncBinary()
					_ = yym1376
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1368[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("timeoutSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1377 := z.EncBinary()
					_ = yym1377
					if false {
					} else {
						r.EncodeInt(int64(x.TimeoutSeconds))
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[5] {
					yym1379 := z.EncBinary()
					_ = yym1379
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1368[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("periodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1380 := z.EncBinary()
					_ = yym1380
					if false {
					} else {
						r.EncodeInt(int64(x.PeriodSeconds))
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[6] {
					yym1382 := z.EncBinary()
					_ = yym1382
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1368[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("successThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1383 := z.EncBinary()
					_ = yym1383
					if false {
					} else {
						r.EncodeInt(int64(x.SuccessThreshold))
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1368[7] {
					yym1385 := z.EncBinary()
					_ = yym1385
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1368[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("failureThreshold"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1386 := z.EncBinary()
					_ = yym1386
					if false {
					} else {
						r.EncodeInt(int64(x.FailureThreshold))
					}
				}
			}
			if yyr1368 || yy2arr1368 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Probe) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1387 := z.DecBinary()
	_ = yym1387
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1388 := r.ContainerType()
		if yyct1388 == codecSelferValueTypeMap1234 {
			yyl1388 := r.ReadMapStart()
			if yyl1388 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1388, d)
			}
		} else if yyct1388 == codecSelferValueTypeArray1234 {
			yyl1388 := r.ReadArrayStart()
			if yyl1388 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1388, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Probe) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1389Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1389Slc
	var yyhl1389 bool = l >= 0
	for yyj1389 := 0; ; yyj1389++ {
		if yyhl1389 {
			if yyj1389 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1389Slc = r.DecodeBytes(yys1389Slc, true, true)
		yys1389 := string(yys1389Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1389 {
		case "exec":
			if x.Handler.Exec == nil {
				x.Handler.Exec = new(ExecAction)
			}
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if x.Handler.HTTPGet == nil {
				x.Handler.HTTPGet = new(HTTPGetAction)
			}
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if x.Handler.TCPSocket == nil {
				x.Handler.TCPSocket = new(TCPSocketAction)
			}
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		case "initialDelaySeconds":
			if r.TryDecodeAsNil() {
				x.InitialDelaySeconds = 0
			} else {
				x.InitialDelaySeconds = int32(r.DecodeInt(32))
			}
		case "timeoutSeconds":
			if r.TryDecodeAsNil() {
				x.TimeoutSeconds = 0
			} else {
				x.TimeoutSeconds = int32(r.DecodeInt(32))
			}
		case "periodSeconds":
			if r.TryDecodeAsNil() {
				x.PeriodSeconds = 0
			} else {
				x.PeriodSeconds = int32(r.DecodeInt(32))
			}
		case "successThreshold":
			if r.TryDecodeAsNil() {
				x.SuccessThreshold = 0
			} else {
				x.SuccessThreshold = int32(r.DecodeInt(32))
			}
		case "failureThreshold":
			if r.TryDecodeAsNil() {
				x.FailureThreshold = 0
			} else {
				x.FailureThreshold = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys1389)
		} // end switch yys1389
	} // end for yyj1389
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Probe) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1398 int
	var yyb1398 bool
	var yyhl1398 bool = l >= 0
	if x.Handler.Exec == nil {
		x.Handler.Exec = new(ExecAction)
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	if x.Handler.HTTPGet == nil {
		x.Handler.HTTPGet = new(HTTPGetAction)
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	if x.Handler.TCPSocket == nil {
		x.Handler.TCPSocket = new(TCPSocketAction)
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InitialDelaySeconds = 0
	} else {
		x.InitialDelaySeconds = int32(r.DecodeInt(32))
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TimeoutSeconds = 0
	} else {
		x.TimeoutSeconds = int32(r.DecodeInt(32))
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PeriodSeconds = 0
	} else {
		x.PeriodSeconds = int32(r.DecodeInt(32))
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SuccessThreshold = 0
	} else {
		x.SuccessThreshold = int32(r.DecodeInt(32))
	}
	yyj1398++
	if yyhl1398 {
		yyb1398 = yyj1398 > l
	} else {
		yyb1398 = r.CheckBreak()
	}
	if yyb1398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FailureThreshold = 0
	} else {
		x.FailureThreshold = int32(r.DecodeInt(32))
	}
	for {
		yyj1398++
		if yyhl1398 {
			yyb1398 = yyj1398 > l
		} else {
			yyb1398 = r.CheckBreak()
		}
		if yyb1398 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1398-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PullPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1407 := z.EncBinary()
	_ = yym1407
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PullPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1408 := z.DecBinary()
	_ = yym1408
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x Capability) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1409 := z.EncBinary()
	_ = yym1409
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *Capability) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1410 := z.DecBinary()
	_ = yym1410
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Capabilities) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1411 := z.EncBinary()
		_ = yym1411
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1412 := !z.EncBinary()
			yy2arr1412 := z.EncBasicHandle().StructToArray
			var yyq1412 [2]bool
			_, _, _ = yysep1412, yyq1412, yy2arr1412
			const yyr1412 bool = false
			yyq1412[0] = len(x.Add) != 0
			yyq1412[1] = len(x.Drop) != 0
			var yynn1412 int
			if yyr1412 || yy2arr1412 {
				r.EncodeArrayStart(2)
			} else {
				yynn1412 = 0
				for _, b := range yyq1412 {
					if b {
						yynn1412++
					}
				}
				r.EncodeMapStart(yynn1412)
				yynn1412 = 0
			}
			if yyr1412 || yy2arr1412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1412[0] {
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1414 := z.EncBinary()
						_ = yym1414
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1412[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("add"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Add == nil {
						r.EncodeNil()
					} else {
						yym1415 := z.EncBinary()
						_ = yym1415
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Add), e)
						}
					}
				}
			}
			if yyr1412 || yy2arr1412 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1412[1] {
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1417 := z.EncBinary()
						_ = yym1417
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1412[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("drop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Drop == nil {
						r.EncodeNil()
					} else {
						yym1418 := z.EncBinary()
						_ = yym1418
						if false {
						} else {
							h.encSliceCapability(([]Capability)(x.Drop), e)
						}
					}
				}
			}
			if yyr1412 || yy2arr1412 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Capabilities) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1419 := z.DecBinary()
	_ = yym1419
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1420 := r.ContainerType()
		if yyct1420 == codecSelferValueTypeMap1234 {
			yyl1420 := r.ReadMapStart()
			if yyl1420 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1420, d)
			}
		} else if yyct1420 == codecSelferValueTypeArray1234 {
			yyl1420 := r.ReadArrayStart()
			if yyl1420 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1420, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Capabilities) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1421Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1421Slc
	var yyhl1421 bool = l >= 0
	for yyj1421 := 0; ; yyj1421++ {
		if yyhl1421 {
			if yyj1421 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1421Slc = r.DecodeBytes(yys1421Slc, true, true)
		yys1421 := string(yys1421Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1421 {
		case "add":
			if r.TryDecodeAsNil() {
				x.Add = nil
			} else {
				yyv1422 := &x.Add
				yym1423 := z.DecBinary()
				_ = yym1423
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1422), d)
				}
			}
		case "drop":
			if r.TryDecodeAsNil() {
				x.Drop = nil
			} else {
				yyv1424 := &x.Drop
				yym1425 := z.DecBinary()
				_ = yym1425
				if false {
				} else {
					h.decSliceCapability((*[]Capability)(yyv1424), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1421)
		} // end switch yys1421
	} // end for yyj1421
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Capabilities) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1426 int
	var yyb1426 bool
	var yyhl1426 bool = l >= 0
	yyj1426++
	if yyhl1426 {
		yyb1426 = yyj1426 > l
	} else {
		yyb1426 = r.CheckBreak()
	}
	if yyb1426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Add = nil
	} else {
		yyv1427 := &x.Add
		yym1428 := z.DecBinary()
		_ = yym1428
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1427), d)
		}
	}
	yyj1426++
	if yyhl1426 {
		yyb1426 = yyj1426 > l
	} else {
		yyb1426 = r.CheckBreak()
	}
	if yyb1426 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Drop = nil
	} else {
		yyv1429 := &x.Drop
		yym1430 := z.DecBinary()
		_ = yym1430
		if false {
		} else {
			h.decSliceCapability((*[]Capability)(yyv1429), d)
		}
	}
	for {
		yyj1426++
		if yyhl1426 {
			yyb1426 = yyj1426 > l
		} else {
			yyb1426 = r.CheckBreak()
		}
		if yyb1426 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1426-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceRequirements) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1431 := z.EncBinary()
		_ = yym1431
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1432 := !z.EncBinary()
			yy2arr1432 := z.EncBasicHandle().StructToArray
			var yyq1432 [2]bool
			_, _, _ = yysep1432, yyq1432, yy2arr1432
			const yyr1432 bool = false
			yyq1432[0] = len(x.Limits) != 0
			yyq1432[1] = len(x.Requests) != 0
			var yynn1432 int
			if yyr1432 || yy2arr1432 {
				r.EncodeArrayStart(2)
			} else {
				yynn1432 = 0
				for _, b := range yyq1432 {
					if b {
						yynn1432++
					}
				}
				r.EncodeMapStart(yynn1432)
				yynn1432 = 0
			}
			if yyr1432 || yy2arr1432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1432[0] {
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1432[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("limits"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Limits == nil {
						r.EncodeNil()
					} else {
						x.Limits.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1432 || yy2arr1432 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1432[1] {
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1432[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requests"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Requests == nil {
						r.EncodeNil()
					} else {
						x.Requests.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1432 || yy2arr1432 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceRequirements) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1435 := z.DecBinary()
	_ = yym1435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1436 := r.ContainerType()
		if yyct1436 == codecSelferValueTypeMap1234 {
			yyl1436 := r.ReadMapStart()
			if yyl1436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1436, d)
			}
		} else if yyct1436 == codecSelferValueTypeArray1234 {
			yyl1436 := r.ReadArrayStart()
			if yyl1436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceRequirements) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1437Slc
	var yyhl1437 bool = l >= 0
	for yyj1437 := 0; ; yyj1437++ {
		if yyhl1437 {
			if yyj1437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1437Slc = r.DecodeBytes(yys1437Slc, true, true)
		yys1437 := string(yys1437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1437 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv1438 := &x.Limits
				yyv1438.CodecDecodeSelf(d)
			}
		case "requests":
			if r.TryDecodeAsNil() {
				x.Requests = nil
			} else {
				yyv1439 := &x.Requests
				yyv1439.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1437)
		} // end switch yys1437
	} // end for yyj1437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceRequirements) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1440 int
	var yyb1440 bool
	var yyhl1440 bool = l >= 0
	yyj1440++
	if yyhl1440 {
		yyb1440 = yyj1440 > l
	} else {
		yyb1440 = r.CheckBreak()
	}
	if yyb1440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv1441 := &x.Limits
		yyv1441.CodecDecodeSelf(d)
	}
	yyj1440++
	if yyhl1440 {
		yyb1440 = yyj1440 > l
	} else {
		yyb1440 = r.CheckBreak()
	}
	if yyb1440 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Requests = nil
	} else {
		yyv1442 := &x.Requests
		yyv1442.CodecDecodeSelf(d)
	}
	for {
		yyj1440++
		if yyhl1440 {
			yyb1440 = yyj1440 > l
		} else {
			yyb1440 = r.CheckBreak()
		}
		if yyb1440 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1440-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Container) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1443 := z.EncBinary()
		_ = yym1443
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1444 := !z.EncBinary()
			yy2arr1444 := z.EncBasicHandle().StructToArray
			var yyq1444 [18]bool
			_, _, _ = yysep1444, yyq1444, yy2arr1444
			const yyr1444 bool = false
			yyq1444[2] = len(x.Command) != 0
			yyq1444[3] = len(x.Args) != 0
			yyq1444[4] = x.WorkingDir != ""
			yyq1444[5] = len(x.Ports) != 0
			yyq1444[6] = len(x.Env) != 0
			yyq1444[7] = true
			yyq1444[8] = len(x.VolumeMounts) != 0
			yyq1444[9] = x.LivenessProbe != nil
			yyq1444[10] = x.ReadinessProbe != nil
			yyq1444[11] = x.Lifecycle != nil
			yyq1444[12] = x.TerminationMessagePath != ""
			yyq1444[14] = x.SecurityContext != nil
			yyq1444[15] = x.Stdin != false
			yyq1444[16] = x.StdinOnce != false
			yyq1444[17] = x.TTY != false
			var yynn1444 int
			if yyr1444 || yy2arr1444 {
				r.EncodeArrayStart(18)
			} else {
				yynn1444 = 3
				for _, b := range yyq1444 {
					if b {
						yynn1444++
					}
				}
				r.EncodeMapStart(yynn1444)
				yynn1444 = 0
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1446 := z.EncBinary()
				_ = yym1446
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1447 := z.EncBinary()
				_ = yym1447
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1449 := z.EncBinary()
				_ = yym1449
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1450 := z.EncBinary()
				_ = yym1450
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[2] {
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1452 := z.EncBinary()
						_ = yym1452
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("command"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Command == nil {
						r.EncodeNil()
					} else {
						yym1453 := z.EncBinary()
						_ = yym1453
						if false {
						} else {
							z.F.EncSliceStringV(x.Command, false, e)
						}
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[3] {
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1455 := z.EncBinary()
						_ = yym1455
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("args"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Args == nil {
						r.EncodeNil()
					} else {
						yym1456 := z.EncBinary()
						_ = yym1456
						if false {
						} else {
							z.F.EncSliceStringV(x.Args, false, e)
						}
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[4] {
					yym1458 := z.EncBinary()
					_ = yym1458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1444[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("workingDir"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1459 := z.EncBinary()
					_ = yym1459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.WorkingDir))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[5] {
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1461 := z.EncBinary()
						_ = yym1461
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ports"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ports == nil {
						r.EncodeNil()
					} else {
						yym1462 := z.EncBinary()
						_ = yym1462
						if false {
						} else {
							h.encSliceContainerPort(([]ContainerPort)(x.Ports), e)
						}
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[6] {
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1464 := z.EncBinary()
						_ = yym1464
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("env"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Env == nil {
						r.EncodeNil()
					} else {
						yym1465 := z.EncBinary()
						_ = yym1465
						if false {
						} else {
							h.encSliceEnvVar(([]EnvVar)(x.Env), e)
						}
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[7] {
					yy1467 := &x.Resources
					yy1467.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resources"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1468 := &x.Resources
					yy1468.CodecEncodeSelf(e)
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[8] {
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1470 := z.EncBinary()
						_ = yym1470
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumeMounts"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumeMounts == nil {
						r.EncodeNil()
					} else {
						yym1471 := z.EncBinary()
						_ = yym1471
						if false {
						} else {
							h.encSliceVolumeMount(([]VolumeMount)(x.VolumeMounts), e)
						}
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[9] {
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("livenessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LivenessProbe == nil {
						r.EncodeNil()
					} else {
						x.LivenessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[10] {
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readinessProbe"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadinessProbe == nil {
						r.EncodeNil()
					} else {
						x.ReadinessProbe.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[11] {
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lifecycle"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Lifecycle == nil {
						r.EncodeNil()
					} else {
						x.Lifecycle.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[12] {
					yym1476 := z.EncBinary()
					_ = yym1476
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1444[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationMessagePath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1477 := z.EncBinary()
					_ = yym1477
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TerminationMessagePath))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imagePullPolicy"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.ImagePullPolicy.CodecEncodeSelf(e)
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[14] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1444[14] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[15] {
					yym1481 := z.EncBinary()
					_ = yym1481
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1444[15] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1482 := z.EncBinary()
					_ = yym1482
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[16] {
					yym1484 := z.EncBinary()
					_ = yym1484
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1444[16] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdinOnce"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1485 := z.EncBinary()
					_ = yym1485
					if false {
					} else {
						r.EncodeBool(bool(x.StdinOnce))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1444[17] {
					yym1487 := z.EncBinary()
					_ = yym1487
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq1444[17] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1488 := z.EncBinary()
					_ = yym1488
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr1444 || yy2arr1444 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Container) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1489 := z.DecBinary()
	_ = yym1489
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1490 := r.ContainerType()
		if yyct1490 == codecSelferValueTypeMap1234 {
			yyl1490 := r.ReadMapStart()
			if yyl1490 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1490, d)
			}
		} else if yyct1490 == codecSelferValueTypeArray1234 {
			yyl1490 := r.ReadArrayStart()
			if yyl1490 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1490, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Container) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1491Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1491Slc
	var yyhl1491 bool = l >= 0
	for yyj1491 := 0; ; yyj1491++ {
		if yyhl1491 {
			if yyj1491 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1491Slc = r.DecodeBytes(yys1491Slc, true, true)
		yys1491 := string(yys1491Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1491 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv1494 := &x.Command
				yym1495 := z.DecBinary()
				_ = yym1495
				if false {
				} else {
					z.F.DecSliceStringX(yyv1494, false, d)
				}
			}
		case "args":
			if r.TryDecodeAsNil() {
				x.Args = nil
			} else {
				yyv1496 := &x.Args
				yym1497 := z.DecBinary()
				_ = yym1497
				if false {
				} else {
					z.F.DecSliceStringX(yyv1496, false, d)
				}
			}
		case "workingDir":
			if r.TryDecodeAsNil() {
				x.WorkingDir = ""
			} else {
				x.WorkingDir = string(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv1499 := &x.Ports
				yym1500 := z.DecBinary()
				_ = yym1500
				if false {
				} else {
					h.decSliceContainerPort((*[]ContainerPort)(yyv1499), d)
				}
			}
		case "env":
			if r.TryDecodeAsNil() {
				x.Env = nil
			} else {
				yyv1501 := &x.Env
				yym1502 := z.DecBinary()
				_ = yym1502
				if false {
				} else {
					h.decSliceEnvVar((*[]EnvVar)(yyv1501), d)
				}
			}
		case "resources":
			if r.TryDecodeAsNil() {
				x.Resources = ResourceRequirements{}
			} else {
				yyv1503 := &x.Resources
				yyv1503.CodecDecodeSelf(d)
			}
		case "volumeMounts":
			if r.TryDecodeAsNil() {
				x.VolumeMounts = nil
			} else {
				yyv1504 := &x.VolumeMounts
				yym1505 := z.DecBinary()
				_ = yym1505
				if false {
				} else {
					h.decSliceVolumeMount((*[]VolumeMount)(yyv1504), d)
				}
			}
		case "livenessProbe":
			if r.TryDecodeAsNil() {
				if x.LivenessProbe != nil {
					x.LivenessProbe = nil
				}
			} else {
				if x.LivenessProbe == nil {
					x.LivenessProbe = new(Probe)
				}
				x.LivenessProbe.CodecDecodeSelf(d)
			}
		case "readinessProbe":
			if r.TryDecodeAsNil() {
				if x.ReadinessProbe != nil {
					x.ReadinessProbe = nil
				}
			} else {
				if x.ReadinessProbe == nil {
					x.ReadinessProbe = new(Probe)
				}
				x.ReadinessProbe.CodecDecodeSelf(d)
			}
		case "lifecycle":
			if r.TryDecodeAsNil() {
				if x.Lifecycle != nil {
					x.Lifecycle = nil
				}
			} else {
				if x.Lifecycle == nil {
					x.Lifecycle = new(Lifecycle)
				}
				x.Lifecycle.CodecDecodeSelf(d)
			}
		case "terminationMessagePath":
			if r.TryDecodeAsNil() {
				x.TerminationMessagePath = ""
			} else {
				x.TerminationMessagePath = string(r.DecodeString())
			}
		case "imagePullPolicy":
			if r.TryDecodeAsNil() {
				x.ImagePullPolicy = ""
			} else {
				x.ImagePullPolicy = PullPolicy(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(SecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdinOnce":
			if r.TryDecodeAsNil() {
				x.StdinOnce = false
			} else {
				x.StdinOnce = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1491)
		} // end switch yys1491
	} // end for yyj1491
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Container) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1515 int
	var yyb1515 bool
	var yyhl1515 bool = l >= 0
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv1518 := &x.Command
		yym1519 := z.DecBinary()
		_ = yym1519
		if false {
		} else {
			z.F.DecSliceStringX(yyv1518, false, d)
		}
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Args = nil
	} else {
		yyv1520 := &x.Args
		yym1521 := z.DecBinary()
		_ = yym1521
		if false {
		} else {
			z.F.DecSliceStringX(yyv1520, false, d)
		}
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.WorkingDir = ""
	} else {
		x.WorkingDir = string(r.DecodeString())
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv1523 := &x.Ports
		yym1524 := z.DecBinary()
		_ = yym1524
		if false {
		} else {
			h.decSliceContainerPort((*[]ContainerPort)(yyv1523), d)
		}
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Env = nil
	} else {
		yyv1525 := &x.Env
		yym1526 := z.DecBinary()
		_ = yym1526
		if false {
		} else {
			h.decSliceEnvVar((*[]EnvVar)(yyv1525), d)
		}
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Resources = ResourceRequirements{}
	} else {
		yyv1527 := &x.Resources
		yyv1527.CodecDecodeSelf(d)
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumeMounts = nil
	} else {
		yyv1528 := &x.VolumeMounts
		yym1529 := z.DecBinary()
		_ = yym1529
		if false {
		} else {
			h.decSliceVolumeMount((*[]VolumeMount)(yyv1528), d)
		}
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LivenessProbe != nil {
			x.LivenessProbe = nil
		}
	} else {
		if x.LivenessProbe == nil {
			x.LivenessProbe = new(Probe)
		}
		x.LivenessProbe.CodecDecodeSelf(d)
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadinessProbe != nil {
			x.ReadinessProbe = nil
		}
	} else {
		if x.ReadinessProbe == nil {
			x.ReadinessProbe = new(Probe)
		}
		x.ReadinessProbe.CodecDecodeSelf(d)
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Lifecycle != nil {
			x.Lifecycle = nil
		}
	} else {
		if x.Lifecycle == nil {
			x.Lifecycle = new(Lifecycle)
		}
		x.Lifecycle.CodecDecodeSelf(d)
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TerminationMessagePath = ""
	} else {
		x.TerminationMessagePath = string(r.DecodeString())
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullPolicy = ""
	} else {
		x.ImagePullPolicy = PullPolicy(r.DecodeString())
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(SecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StdinOnce = false
	} else {
		x.StdinOnce = bool(r.DecodeBool())
	}
	yyj1515++
	if yyhl1515 {
		yyb1515 = yyj1515 > l
	} else {
		yyb1515 = r.CheckBreak()
	}
	if yyb1515 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	for {
		yyj1515++
		if yyhl1515 {
			yyb1515 = yyj1515 > l
		} else {
			yyb1515 = r.CheckBreak()
		}
		if yyb1515 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1515-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Handler) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1539 := z.EncBinary()
		_ = yym1539
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1540 := !z.EncBinary()
			yy2arr1540 := z.EncBasicHandle().StructToArray
			var yyq1540 [3]bool
			_, _, _ = yysep1540, yyq1540, yy2arr1540
			const yyr1540 bool = false
			yyq1540[0] = x.Exec != nil
			yyq1540[1] = x.HTTPGet != nil
			yyq1540[2] = x.TCPSocket != nil
			var yynn1540 int
			if yyr1540 || yy2arr1540 {
				r.EncodeArrayStart(3)
			} else {
				yynn1540 = 0
				for _, b := range yyq1540 {
					if b {
						yynn1540++
					}
				}
				r.EncodeMapStart(yynn1540)
				yynn1540 = 0
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[0] {
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("exec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Exec == nil {
						r.EncodeNil()
					} else {
						x.Exec.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[1] {
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("httpGet"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.HTTPGet == nil {
						r.EncodeNil()
					} else {
						x.HTTPGet.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1540[2] {
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1540[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tcpSocket"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TCPSocket == nil {
						r.EncodeNil()
					} else {
						x.TCPSocket.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1540 || yy2arr1540 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Handler) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1544 := z.DecBinary()
	_ = yym1544
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1545 := r.ContainerType()
		if yyct1545 == codecSelferValueTypeMap1234 {
			yyl1545 := r.ReadMapStart()
			if yyl1545 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1545, d)
			}
		} else if yyct1545 == codecSelferValueTypeArray1234 {
			yyl1545 := r.ReadArrayStart()
			if yyl1545 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1545, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Handler) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1546Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1546Slc
	var yyhl1546 bool = l >= 0
	for yyj1546 := 0; ; yyj1546++ {
		if yyhl1546 {
			if yyj1546 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1546Slc = r.DecodeBytes(yys1546Slc, true, true)
		yys1546 := string(yys1546Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1546 {
		case "exec":
			if r.TryDecodeAsNil() {
				if x.Exec != nil {
					x.Exec = nil
				}
			} else {
				if x.Exec == nil {
					x.Exec = new(ExecAction)
				}
				x.Exec.CodecDecodeSelf(d)
			}
		case "httpGet":
			if r.TryDecodeAsNil() {
				if x.HTTPGet != nil {
					x.HTTPGet = nil
				}
			} else {
				if x.HTTPGet == nil {
					x.HTTPGet = new(HTTPGetAction)
				}
				x.HTTPGet.CodecDecodeSelf(d)
			}
		case "tcpSocket":
			if r.TryDecodeAsNil() {
				if x.TCPSocket != nil {
					x.TCPSocket = nil
				}
			} else {
				if x.TCPSocket == nil {
					x.TCPSocket = new(TCPSocketAction)
				}
				x.TCPSocket.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1546)
		} // end switch yys1546
	} // end for yyj1546
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Handler) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1550 int
	var yyb1550 bool
	var yyhl1550 bool = l >= 0
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Exec != nil {
			x.Exec = nil
		}
	} else {
		if x.Exec == nil {
			x.Exec = new(ExecAction)
		}
		x.Exec.CodecDecodeSelf(d)
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.HTTPGet != nil {
			x.HTTPGet = nil
		}
	} else {
		if x.HTTPGet == nil {
			x.HTTPGet = new(HTTPGetAction)
		}
		x.HTTPGet.CodecDecodeSelf(d)
	}
	yyj1550++
	if yyhl1550 {
		yyb1550 = yyj1550 > l
	} else {
		yyb1550 = r.CheckBreak()
	}
	if yyb1550 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TCPSocket != nil {
			x.TCPSocket = nil
		}
	} else {
		if x.TCPSocket == nil {
			x.TCPSocket = new(TCPSocketAction)
		}
		x.TCPSocket.CodecDecodeSelf(d)
	}
	for {
		yyj1550++
		if yyhl1550 {
			yyb1550 = yyj1550 > l
		} else {
			yyb1550 = r.CheckBreak()
		}
		if yyb1550 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1550-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Lifecycle) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1554 := z.EncBinary()
		_ = yym1554
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1555 := !z.EncBinary()
			yy2arr1555 := z.EncBasicHandle().StructToArray
			var yyq1555 [2]bool
			_, _, _ = yysep1555, yyq1555, yy2arr1555
			const yyr1555 bool = false
			yyq1555[0] = x.PostStart != nil
			yyq1555[1] = x.PreStop != nil
			var yynn1555 int
			if yyr1555 || yy2arr1555 {
				r.EncodeArrayStart(2)
			} else {
				yynn1555 = 0
				for _, b := range yyq1555 {
					if b {
						yynn1555++
					}
				}
				r.EncodeMapStart(yynn1555)
				yynn1555 = 0
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1555[0] {
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1555[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("postStart"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PostStart == nil {
						r.EncodeNil()
					} else {
						x.PostStart.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1555[1] {
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1555[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preStop"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreStop == nil {
						r.EncodeNil()
					} else {
						x.PreStop.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1555 || yy2arr1555 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Lifecycle) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1558 := z.DecBinary()
	_ = yym1558
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1559 := r.ContainerType()
		if yyct1559 == codecSelferValueTypeMap1234 {
			yyl1559 := r.ReadMapStart()
			if yyl1559 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1559, d)
			}
		} else if yyct1559 == codecSelferValueTypeArray1234 {
			yyl1559 := r.ReadArrayStart()
			if yyl1559 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1559, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Lifecycle) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1560Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1560Slc
	var yyhl1560 bool = l >= 0
	for yyj1560 := 0; ; yyj1560++ {
		if yyhl1560 {
			if yyj1560 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1560Slc = r.DecodeBytes(yys1560Slc, true, true)
		yys1560 := string(yys1560Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1560 {
		case "postStart":
			if r.TryDecodeAsNil() {
				if x.PostStart != nil {
					x.PostStart = nil
				}
			} else {
				if x.PostStart == nil {
					x.PostStart = new(Handler)
				}
				x.PostStart.CodecDecodeSelf(d)
			}
		case "preStop":
			if r.TryDecodeAsNil() {
				if x.PreStop != nil {
					x.PreStop = nil
				}
			} else {
				if x.PreStop == nil {
					x.PreStop = new(Handler)
				}
				x.PreStop.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1560)
		} // end switch yys1560
	} // end for yyj1560
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Lifecycle) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1563 int
	var yyb1563 bool
	var yyhl1563 bool = l >= 0
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PostStart != nil {
			x.PostStart = nil
		}
	} else {
		if x.PostStart == nil {
			x.PostStart = new(Handler)
		}
		x.PostStart.CodecDecodeSelf(d)
	}
	yyj1563++
	if yyhl1563 {
		yyb1563 = yyj1563 > l
	} else {
		yyb1563 = r.CheckBreak()
	}
	if yyb1563 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PreStop != nil {
			x.PreStop = nil
		}
	} else {
		if x.PreStop == nil {
			x.PreStop = new(Handler)
		}
		x.PreStop.CodecDecodeSelf(d)
	}
	for {
		yyj1563++
		if yyhl1563 {
			yyb1563 = yyj1563 > l
		} else {
			yyb1563 = r.CheckBreak()
		}
		if yyb1563 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1563-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ConditionStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1566 := z.EncBinary()
	_ = yym1566
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ConditionStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1567 := z.DecBinary()
	_ = yym1567
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ContainerStateWaiting) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1568 := z.EncBinary()
		_ = yym1568
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1569 := !z.EncBinary()
			yy2arr1569 := z.EncBasicHandle().StructToArray
			var yyq1569 [2]bool
			_, _, _ = yysep1569, yyq1569, yy2arr1569
			const yyr1569 bool = false
			yyq1569[0] = x.Reason != ""
			yyq1569[1] = x.Message != ""
			var yynn1569 int
			if yyr1569 || yy2arr1569 {
				r.EncodeArrayStart(2)
			} else {
				yynn1569 = 0
				for _, b := range yyq1569 {
					if b {
						yynn1569++
					}
				}
				r.EncodeMapStart(yynn1569)
				yynn1569 = 0
			}
			if yyr1569 || yy2arr1569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1569[0] {
					yym1571 := z.EncBinary()
					_ = yym1571
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1569[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1572 := z.EncBinary()
					_ = yym1572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1569 || yy2arr1569 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1569[1] {
					yym1574 := z.EncBinary()
					_ = yym1574
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1569[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1575 := z.EncBinary()
					_ = yym1575
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1569 || yy2arr1569 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateWaiting) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1576 := z.DecBinary()
	_ = yym1576
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1577 := r.ContainerType()
		if yyct1577 == codecSelferValueTypeMap1234 {
			yyl1577 := r.ReadMapStart()
			if yyl1577 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1577, d)
			}
		} else if yyct1577 == codecSelferValueTypeArray1234 {
			yyl1577 := r.ReadArrayStart()
			if yyl1577 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1577, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateWaiting) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1578Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1578Slc
	var yyhl1578 bool = l >= 0
	for yyj1578 := 0; ; yyj1578++ {
		if yyhl1578 {
			if yyj1578 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1578Slc = r.DecodeBytes(yys1578Slc, true, true)
		yys1578 := string(yys1578Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1578 {
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1578)
		} // end switch yys1578
	} // end for yyj1578
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateWaiting) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1581 int
	var yyb1581 bool
	var yyhl1581 bool = l >= 0
	yyj1581++
	if yyhl1581 {
		yyb1581 = yyj1581 > l
	} else {
		yyb1581 = r.CheckBreak()
	}
	if yyb1581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1581++
	if yyhl1581 {
		yyb1581 = yyj1581 > l
	} else {
		yyb1581 = r.CheckBreak()
	}
	if yyb1581 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1581++
		if yyhl1581 {
			yyb1581 = yyj1581 > l
		} else {
			yyb1581 = r.CheckBreak()
		}
		if yyb1581 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1581-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateRunning) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1584 := z.EncBinary()
		_ = yym1584
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1585 := !z.EncBinary()
			yy2arr1585 := z.EncBasicHandle().StructToArray
			var yyq1585 [1]bool
			_, _, _ = yysep1585, yyq1585, yy2arr1585
			const yyr1585 bool = false
			yyq1585[0] = true
			var yynn1585 int
			if yyr1585 || yy2arr1585 {
				r.EncodeArrayStart(1)
			} else {
				yynn1585 = 0
				for _, b := range yyq1585 {
					if b {
						yynn1585++
					}
				}
				r.EncodeMapStart(yynn1585)
				yynn1585 = 0
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1585[0] {
					yy1587 := &x.StartedAt
					yym1588 := z.EncBinary()
					_ = yym1588
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1587) {
					} else if yym1588 {
						z.EncBinaryMarshal(yy1587)
					} else if !yym1588 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1587)
					} else {
						z.EncFallback(yy1587)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1585[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1589 := &x.StartedAt
					yym1590 := z.EncBinary()
					_ = yym1590
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1589) {
					} else if yym1590 {
						z.EncBinaryMarshal(yy1589)
					} else if !yym1590 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1589)
					} else {
						z.EncFallback(yy1589)
					}
				}
			}
			if yyr1585 || yy2arr1585 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateRunning) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1591 := z.DecBinary()
	_ = yym1591
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1592 := r.ContainerType()
		if yyct1592 == codecSelferValueTypeMap1234 {
			yyl1592 := r.ReadMapStart()
			if yyl1592 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1592, d)
			}
		} else if yyct1592 == codecSelferValueTypeArray1234 {
			yyl1592 := r.ReadArrayStart()
			if yyl1592 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1592, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateRunning) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1593Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1593Slc
	var yyhl1593 bool = l >= 0
	for yyj1593 := 0; ; yyj1593++ {
		if yyhl1593 {
			if yyj1593 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1593Slc = r.DecodeBytes(yys1593Slc, true, true)
		yys1593 := string(yys1593Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1593 {
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1594 := &x.StartedAt
				yym1595 := z.DecBinary()
				_ = yym1595
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1594) {
				} else if yym1595 {
					z.DecBinaryUnmarshal(yyv1594)
				} else if !yym1595 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1594)
				} else {
					z.DecFallback(yyv1594, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1593)
		} // end switch yys1593
	} // end for yyj1593
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateRunning) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1596 int
	var yyb1596 bool
	var yyhl1596 bool = l >= 0
	yyj1596++
	if yyhl1596 {
		yyb1596 = yyj1596 > l
	} else {
		yyb1596 = r.CheckBreak()
	}
	if yyb1596 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1597 := &x.StartedAt
		yym1598 := z.DecBinary()
		_ = yym1598
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1597) {
		} else if yym1598 {
			z.DecBinaryUnmarshal(yyv1597)
		} else if !yym1598 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1597)
		} else {
			z.DecFallback(yyv1597, false)
		}
	}
	for {
		yyj1596++
		if yyhl1596 {
			yyb1596 = yyj1596 > l
		} else {
			yyb1596 = r.CheckBreak()
		}
		if yyb1596 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1596-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStateTerminated) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1599 := z.EncBinary()
		_ = yym1599
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1600 := !z.EncBinary()
			yy2arr1600 := z.EncBasicHandle().StructToArray
			var yyq1600 [7]bool
			_, _, _ = yysep1600, yyq1600, yy2arr1600
			const yyr1600 bool = false
			yyq1600[1] = x.Signal != 0
			yyq1600[2] = x.Reason != ""
			yyq1600[3] = x.Message != ""
			yyq1600[4] = true
			yyq1600[5] = true
			yyq1600[6] = x.ContainerID != ""
			var yynn1600 int
			if yyr1600 || yy2arr1600 {
				r.EncodeArrayStart(7)
			} else {
				yynn1600 = 1
				for _, b := range yyq1600 {
					if b {
						yynn1600++
					}
				}
				r.EncodeMapStart(yynn1600)
				yynn1600 = 0
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1602 := z.EncBinary()
				_ = yym1602
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exitCode"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1603 := z.EncBinary()
				_ = yym1603
				if false {
				} else {
					r.EncodeInt(int64(x.ExitCode))
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1600[1] {
					yym1605 := z.EncBinary()
					_ = yym1605
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq1600[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("signal"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1606 := z.EncBinary()
					_ = yym1606
					if false {
					} else {
						r.EncodeInt(int64(x.Signal))
					}
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1600[2] {
					yym1608 := z.EncBinary()
					_ = yym1608
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1600[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1609 := z.EncBinary()
					_ = yym1609
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1600[3] {
					yym1611 := z.EncBinary()
					_ = yym1611
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1600[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1612 := z.EncBinary()
					_ = yym1612
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1600[4] {
					yy1614 := &x.StartedAt
					yym1615 := z.EncBinary()
					_ = yym1615
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1614) {
					} else if yym1615 {
						z.EncBinaryMarshal(yy1614)
					} else if !yym1615 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1614)
					} else {
						z.EncFallback(yy1614)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1600[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1616 := &x.StartedAt
					yym1617 := z.EncBinary()
					_ = yym1617
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1616) {
					} else if yym1617 {
						z.EncBinaryMarshal(yy1616)
					} else if !yym1617 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1616)
					} else {
						z.EncFallback(yy1616)
					}
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1600[5] {
					yy1619 := &x.FinishedAt
					yym1620 := z.EncBinary()
					_ = yym1620
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1619) {
					} else if yym1620 {
						z.EncBinaryMarshal(yy1619)
					} else if !yym1620 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1619)
					} else {
						z.EncFallback(yy1619)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1600[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("finishedAt"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1621 := &x.FinishedAt
					yym1622 := z.EncBinary()
					_ = yym1622
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1621) {
					} else if yym1622 {
						z.EncBinaryMarshal(yy1621)
					} else if !yym1622 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1621)
					} else {
						z.EncFallback(yy1621)
					}
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1600[6] {
					yym1624 := z.EncBinary()
					_ = yym1624
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1600[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1625 := z.EncBinary()
					_ = yym1625
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1600 || yy2arr1600 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStateTerminated) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1626 := z.DecBinary()
	_ = yym1626
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1627 := r.ContainerType()
		if yyct1627 == codecSelferValueTypeMap1234 {
			yyl1627 := r.ReadMapStart()
			if yyl1627 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1627, d)
			}
		} else if yyct1627 == codecSelferValueTypeArray1234 {
			yyl1627 := r.ReadArrayStart()
			if yyl1627 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1627, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStateTerminated) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1628Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1628Slc
	var yyhl1628 bool = l >= 0
	for yyj1628 := 0; ; yyj1628++ {
		if yyhl1628 {
			if yyj1628 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1628Slc = r.DecodeBytes(yys1628Slc, true, true)
		yys1628 := string(yys1628Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1628 {
		case "exitCode":
			if r.TryDecodeAsNil() {
				x.ExitCode = 0
			} else {
				x.ExitCode = int32(r.DecodeInt(32))
			}
		case "signal":
			if r.TryDecodeAsNil() {
				x.Signal = 0
			} else {
				x.Signal = int32(r.DecodeInt(32))
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "startedAt":
			if r.TryDecodeAsNil() {
				x.StartedAt = pkg2_unversioned.Time{}
			} else {
				yyv1633 := &x.StartedAt
				yym1634 := z.DecBinary()
				_ = yym1634
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1633) {
				} else if yym1634 {
					z.DecBinaryUnmarshal(yyv1633)
				} else if !yym1634 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1633)
				} else {
					z.DecFallback(yyv1633, false)
				}
			}
		case "finishedAt":
			if r.TryDecodeAsNil() {
				x.FinishedAt = pkg2_unversioned.Time{}
			} else {
				yyv1635 := &x.FinishedAt
				yym1636 := z.DecBinary()
				_ = yym1636
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1635) {
				} else if yym1636 {
					z.DecBinaryUnmarshal(yyv1635)
				} else if !yym1636 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1635)
				} else {
					z.DecFallback(yyv1635, false)
				}
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1628)
		} // end switch yys1628
	} // end for yyj1628
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStateTerminated) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1638 int
	var yyb1638 bool
	var yyhl1638 bool = l >= 0
	yyj1638++
	if yyhl1638 {
		yyb1638 = yyj1638 > l
	} else {
		yyb1638 = r.CheckBreak()
	}
	if yyb1638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExitCode = 0
	} else {
		x.ExitCode = int32(r.DecodeInt(32))
	}
	yyj1638++
	if yyhl1638 {
		yyb1638 = yyj1638 > l
	} else {
		yyb1638 = r.CheckBreak()
	}
	if yyb1638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Signal = 0
	} else {
		x.Signal = int32(r.DecodeInt(32))
	}
	yyj1638++
	if yyhl1638 {
		yyb1638 = yyj1638 > l
	} else {
		yyb1638 = r.CheckBreak()
	}
	if yyb1638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1638++
	if yyhl1638 {
		yyb1638 = yyj1638 > l
	} else {
		yyb1638 = r.CheckBreak()
	}
	if yyb1638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj1638++
	if yyhl1638 {
		yyb1638 = yyj1638 > l
	} else {
		yyb1638 = r.CheckBreak()
	}
	if yyb1638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.StartedAt = pkg2_unversioned.Time{}
	} else {
		yyv1643 := &x.StartedAt
		yym1644 := z.DecBinary()
		_ = yym1644
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1643) {
		} else if yym1644 {
			z.DecBinaryUnmarshal(yyv1643)
		} else if !yym1644 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1643)
		} else {
			z.DecFallback(yyv1643, false)
		}
	}
	yyj1638++
	if yyhl1638 {
		yyb1638 = yyj1638 > l
	} else {
		yyb1638 = r.CheckBreak()
	}
	if yyb1638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FinishedAt = pkg2_unversioned.Time{}
	} else {
		yyv1645 := &x.FinishedAt
		yym1646 := z.DecBinary()
		_ = yym1646
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1645) {
		} else if yym1646 {
			z.DecBinaryUnmarshal(yyv1645)
		} else if !yym1646 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1645)
		} else {
			z.DecFallback(yyv1645, false)
		}
	}
	yyj1638++
	if yyhl1638 {
		yyb1638 = yyj1638 > l
	} else {
		yyb1638 = r.CheckBreak()
	}
	if yyb1638 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1638++
		if yyhl1638 {
			yyb1638 = yyj1638 > l
		} else {
			yyb1638 = r.CheckBreak()
		}
		if yyb1638 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1638-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerState) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1648 := z.EncBinary()
		_ = yym1648
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1649 := !z.EncBinary()
			yy2arr1649 := z.EncBasicHandle().StructToArray
			var yyq1649 [3]bool
			_, _, _ = yysep1649, yyq1649, yy2arr1649
			const yyr1649 bool = false
			yyq1649[0] = x.Waiting != nil
			yyq1649[1] = x.Running != nil
			yyq1649[2] = x.Terminated != nil
			var yynn1649 int
			if yyr1649 || yy2arr1649 {
				r.EncodeArrayStart(3)
			} else {
				yynn1649 = 0
				for _, b := range yyq1649 {
					if b {
						yynn1649++
					}
				}
				r.EncodeMapStart(yynn1649)
				yynn1649 = 0
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1649[0] {
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1649[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("waiting"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Waiting == nil {
						r.EncodeNil()
					} else {
						x.Waiting.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1649[1] {
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1649[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("running"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Running == nil {
						r.EncodeNil()
					} else {
						x.Running.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1649[2] {
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1649[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminated"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Terminated == nil {
						r.EncodeNil()
					} else {
						x.Terminated.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1649 || yy2arr1649 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerState) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1653 := z.DecBinary()
	_ = yym1653
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1654 := r.ContainerType()
		if yyct1654 == codecSelferValueTypeMap1234 {
			yyl1654 := r.ReadMapStart()
			if yyl1654 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1654, d)
			}
		} else if yyct1654 == codecSelferValueTypeArray1234 {
			yyl1654 := r.ReadArrayStart()
			if yyl1654 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1654, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerState) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1655Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1655Slc
	var yyhl1655 bool = l >= 0
	for yyj1655 := 0; ; yyj1655++ {
		if yyhl1655 {
			if yyj1655 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1655Slc = r.DecodeBytes(yys1655Slc, true, true)
		yys1655 := string(yys1655Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1655 {
		case "waiting":
			if r.TryDecodeAsNil() {
				if x.Waiting != nil {
					x.Waiting = nil
				}
			} else {
				if x.Waiting == nil {
					x.Waiting = new(ContainerStateWaiting)
				}
				x.Waiting.CodecDecodeSelf(d)
			}
		case "running":
			if r.TryDecodeAsNil() {
				if x.Running != nil {
					x.Running = nil
				}
			} else {
				if x.Running == nil {
					x.Running = new(ContainerStateRunning)
				}
				x.Running.CodecDecodeSelf(d)
			}
		case "terminated":
			if r.TryDecodeAsNil() {
				if x.Terminated != nil {
					x.Terminated = nil
				}
			} else {
				if x.Terminated == nil {
					x.Terminated = new(ContainerStateTerminated)
				}
				x.Terminated.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1655)
		} // end switch yys1655
	} // end for yyj1655
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerState) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1659 int
	var yyb1659 bool
	var yyhl1659 bool = l >= 0
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Waiting != nil {
			x.Waiting = nil
		}
	} else {
		if x.Waiting == nil {
			x.Waiting = new(ContainerStateWaiting)
		}
		x.Waiting.CodecDecodeSelf(d)
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Running != nil {
			x.Running = nil
		}
	} else {
		if x.Running == nil {
			x.Running = new(ContainerStateRunning)
		}
		x.Running.CodecDecodeSelf(d)
	}
	yyj1659++
	if yyhl1659 {
		yyb1659 = yyj1659 > l
	} else {
		yyb1659 = r.CheckBreak()
	}
	if yyb1659 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Terminated != nil {
			x.Terminated = nil
		}
	} else {
		if x.Terminated == nil {
			x.Terminated = new(ContainerStateTerminated)
		}
		x.Terminated.CodecDecodeSelf(d)
	}
	for {
		yyj1659++
		if yyhl1659 {
			yyb1659 = yyj1659 > l
		} else {
			yyb1659 = r.CheckBreak()
		}
		if yyb1659 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1659-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1663 := z.EncBinary()
		_ = yym1663
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1664 := !z.EncBinary()
			yy2arr1664 := z.EncBasicHandle().StructToArray
			var yyq1664 [8]bool
			_, _, _ = yysep1664, yyq1664, yy2arr1664
			const yyr1664 bool = false
			yyq1664[1] = true
			yyq1664[2] = true
			yyq1664[7] = x.ContainerID != ""
			var yynn1664 int
			if yyr1664 || yy2arr1664 {
				r.EncodeArrayStart(8)
			} else {
				yynn1664 = 5
				for _, b := range yyq1664 {
					if b {
						yynn1664++
					}
				}
				r.EncodeMapStart(yynn1664)
				yynn1664 = 0
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1666 := z.EncBinary()
				_ = yym1666
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1667 := z.EncBinary()
				_ = yym1667
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1664[1] {
					yy1669 := &x.State
					yy1669.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1664[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("state"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1670 := &x.State
					yy1670.CodecEncodeSelf(e)
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1664[2] {
					yy1672 := &x.LastTerminationState
					yy1672.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1664[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastState"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1673 := &x.LastTerminationState
					yy1673.CodecEncodeSelf(e)
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1675 := z.EncBinary()
				_ = yym1675
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ready"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1676 := z.EncBinary()
				_ = yym1676
				if false {
				} else {
					r.EncodeBool(bool(x.Ready))
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1678 := z.EncBinary()
				_ = yym1678
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("restartCount"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1679 := z.EncBinary()
				_ = yym1679
				if false {
				} else {
					r.EncodeInt(int64(x.RestartCount))
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1681 := z.EncBinary()
				_ = yym1681
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("image"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1682 := z.EncBinary()
				_ = yym1682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Image))
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1684 := z.EncBinary()
				_ = yym1684
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("imageID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1685 := z.EncBinary()
				_ = yym1685
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ImageID))
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1664[7] {
					yym1687 := z.EncBinary()
					_ = yym1687
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1664[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1688 := z.EncBinary()
					_ = yym1688
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ContainerID))
					}
				}
			}
			if yyr1664 || yy2arr1664 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1689 := z.DecBinary()
	_ = yym1689
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1690 := r.ContainerType()
		if yyct1690 == codecSelferValueTypeMap1234 {
			yyl1690 := r.ReadMapStart()
			if yyl1690 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1690, d)
			}
		} else if yyct1690 == codecSelferValueTypeArray1234 {
			yyl1690 := r.ReadArrayStart()
			if yyl1690 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1690, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1691Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1691Slc
	var yyhl1691 bool = l >= 0
	for yyj1691 := 0; ; yyj1691++ {
		if yyhl1691 {
			if yyj1691 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1691Slc = r.DecodeBytes(yys1691Slc, true, true)
		yys1691 := string(yys1691Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1691 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "state":
			if r.TryDecodeAsNil() {
				x.State = ContainerState{}
			} else {
				yyv1693 := &x.State
				yyv1693.CodecDecodeSelf(d)
			}
		case "lastState":
			if r.TryDecodeAsNil() {
				x.LastTerminationState = ContainerState{}
			} else {
				yyv1694 := &x.LastTerminationState
				yyv1694.CodecDecodeSelf(d)
			}
		case "ready":
			if r.TryDecodeAsNil() {
				x.Ready = false
			} else {
				x.Ready = bool(r.DecodeBool())
			}
		case "restartCount":
			if r.TryDecodeAsNil() {
				x.RestartCount = 0
			} else {
				x.RestartCount = int32(r.DecodeInt(32))
			}
		case "image":
			if r.TryDecodeAsNil() {
				x.Image = ""
			} else {
				x.Image = string(r.DecodeString())
			}
		case "imageID":
			if r.TryDecodeAsNil() {
				x.ImageID = ""
			} else {
				x.ImageID = string(r.DecodeString())
			}
		case "containerID":
			if r.TryDecodeAsNil() {
				x.ContainerID = ""
			} else {
				x.ContainerID = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1691)
		} // end switch yys1691
	} // end for yyj1691
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1700 int
	var yyb1700 bool
	var yyhl1700 bool = l >= 0
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.State = ContainerState{}
	} else {
		yyv1702 := &x.State
		yyv1702.CodecDecodeSelf(d)
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTerminationState = ContainerState{}
	} else {
		yyv1703 := &x.LastTerminationState
		yyv1703.CodecDecodeSelf(d)
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ready = false
	} else {
		x.Ready = bool(r.DecodeBool())
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartCount = 0
	} else {
		x.RestartCount = int32(r.DecodeInt(32))
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Image = ""
	} else {
		x.Image = string(r.DecodeString())
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImageID = ""
	} else {
		x.ImageID = string(r.DecodeString())
	}
	yyj1700++
	if yyhl1700 {
		yyb1700 = yyj1700 > l
	} else {
		yyb1700 = r.CheckBreak()
	}
	if yyb1700 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerID = ""
	} else {
		x.ContainerID = string(r.DecodeString())
	}
	for {
		yyj1700++
		if yyhl1700 {
			yyb1700 = yyj1700 > l
		} else {
			yyb1700 = r.CheckBreak()
		}
		if yyb1700 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1700-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PodPhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1709 := z.EncBinary()
	_ = yym1709
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodPhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1710 := z.DecBinary()
	_ = yym1710
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x PodConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1711 := z.EncBinary()
	_ = yym1711
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PodConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1712 := z.DecBinary()
	_ = yym1712
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1713 := z.EncBinary()
		_ = yym1713
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1714 := !z.EncBinary()
			yy2arr1714 := z.EncBasicHandle().StructToArray
			var yyq1714 [6]bool
			_, _, _ = yysep1714, yyq1714, yy2arr1714
			const yyr1714 bool = false
			yyq1714[2] = true
			yyq1714[3] = true
			yyq1714[4] = x.Reason != ""
			yyq1714[5] = x.Message != ""
			var yynn1714 int
			if yyr1714 || yy2arr1714 {
				r.EncodeArrayStart(6)
			} else {
				yynn1714 = 2
				for _, b := range yyq1714 {
					if b {
						yynn1714++
					}
				}
				r.EncodeMapStart(yynn1714)
				yynn1714 = 0
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[2] {
					yy1718 := &x.LastProbeTime
					yym1719 := z.EncBinary()
					_ = yym1719
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1718) {
					} else if yym1719 {
						z.EncBinaryMarshal(yy1718)
					} else if !yym1719 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1718)
					} else {
						z.EncFallback(yy1718)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1714[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastProbeTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1720 := &x.LastProbeTime
					yym1721 := z.EncBinary()
					_ = yym1721
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1720) {
					} else if yym1721 {
						z.EncBinaryMarshal(yy1720)
					} else if !yym1721 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1720)
					} else {
						z.EncFallback(yy1720)
					}
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[3] {
					yy1723 := &x.LastTransitionTime
					yym1724 := z.EncBinary()
					_ = yym1724
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1723) {
					} else if yym1724 {
						z.EncBinaryMarshal(yy1723)
					} else if !yym1724 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1723)
					} else {
						z.EncFallback(yy1723)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1714[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1725 := &x.LastTransitionTime
					yym1726 := z.EncBinary()
					_ = yym1726
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1725) {
					} else if yym1726 {
						z.EncBinaryMarshal(yy1725)
					} else if !yym1726 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy1725)
					} else {
						z.EncFallback(yy1725)
					}
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[4] {
					yym1728 := z.EncBinary()
					_ = yym1728
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1714[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1729 := z.EncBinary()
					_ = yym1729
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1714[5] {
					yym1731 := z.EncBinary()
					_ = yym1731
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1714[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1732 := z.EncBinary()
					_ = yym1732
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr1714 || yy2arr1714 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1733 := z.DecBinary()
	_ = yym1733
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1734 := r.ContainerType()
		if yyct1734 == codecSelferValueTypeMap1234 {
			yyl1734 := r.ReadMapStart()
			if yyl1734 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1734, d)
			}
		} else if yyct1734 == codecSelferValueTypeArray1234 {
			yyl1734 := r.ReadArrayStart()
			if yyl1734 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1734, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1735Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1735Slc
	var yyhl1735 bool = l >= 0
	for yyj1735 := 0; ; yyj1735++ {
		if yyhl1735 {
			if yyj1735 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1735Slc = r.DecodeBytes(yys1735Slc, true, true)
		yys1735 := string(yys1735Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1735 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = PodConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastProbeTime":
			if r.TryDecodeAsNil() {
				x.LastProbeTime = pkg2_unversioned.Time{}
			} else {
				yyv1738 := &x.LastProbeTime
				yym1739 := z.DecBinary()
				_ = yym1739
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1738) {
				} else if yym1739 {
					z.DecBinaryUnmarshal(yyv1738)
				} else if !yym1739 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1738)
				} else {
					z.DecFallback(yyv1738, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv1740 := &x.LastTransitionTime
				yym1741 := z.DecBinary()
				_ = yym1741
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1740) {
				} else if yym1741 {
					z.DecBinaryUnmarshal(yyv1740)
				} else if !yym1741 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv1740)
				} else {
					z.DecFallback(yyv1740, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1735)
		} // end switch yys1735
	} // end for yyj1735
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1744 int
	var yyb1744 bool
	var yyhl1744 bool = l >= 0
	yyj1744++
	if yyhl1744 {
		yyb1744 = yyj1744 > l
	} else {
		yyb1744 = r.CheckBreak()
	}
	if yyb1744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = PodConditionType(r.DecodeString())
	}
	yyj1744++
	if yyhl1744 {
		yyb1744 = yyj1744 > l
	} else {
		yyb1744 = r.CheckBreak()
	}
	if yyb1744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj1744++
	if yyhl1744 {
		yyb1744 = yyj1744 > l
	} else {
		yyb1744 = r.CheckBreak()
	}
	if yyb1744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastProbeTime = pkg2_unversioned.Time{}
	} else {
		yyv1747 := &x.LastProbeTime
		yym1748 := z.DecBinary()
		_ = yym1748
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1747) {
		} else if yym1748 {
			z.DecBinaryUnmarshal(yyv1747)
		} else if !yym1748 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1747)
		} else {
			z.DecFallback(yyv1747, false)
		}
	}
	yyj1744++
	if yyhl1744 {
		yyb1744 = yyj1744 > l
	} else {
		yyb1744 = r.CheckBreak()
	}
	if yyb1744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv1749 := &x.LastTransitionTime
		yym1750 := z.DecBinary()
		_ = yym1750
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1749) {
		} else if yym1750 {
			z.DecBinaryUnmarshal(yyv1749)
		} else if !yym1750 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv1749)
		} else {
			z.DecFallback(yyv1749, false)
		}
	}
	yyj1744++
	if yyhl1744 {
		yyb1744 = yyj1744 > l
	} else {
		yyb1744 = r.CheckBreak()
	}
	if yyb1744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj1744++
	if yyhl1744 {
		yyb1744 = yyj1744 > l
	} else {
		yyb1744 = r.CheckBreak()
	}
	if yyb1744 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj1744++
		if yyhl1744 {
			yyb1744 = yyj1744 > l
		} else {
			yyb1744 = r.CheckBreak()
		}
		if yyb1744 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1744-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x RestartPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1753 := z.EncBinary()
	_ = yym1753
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *RestartPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1754 := z.DecBinary()
	_ = yym1754
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1755 := z.EncBinary()
		_ = yym1755
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1756 := !z.EncBinary()
			yy2arr1756 := z.EncBasicHandle().StructToArray
			var yyq1756 [4]bool
			_, _, _ = yysep1756, yyq1756, yy2arr1756
			const yyr1756 bool = false
			yyq1756[0] = x.Kind != ""
			yyq1756[1] = x.APIVersion != ""
			yyq1756[2] = true
			var yynn1756 int
			if yyr1756 || yy2arr1756 {
				r.EncodeArrayStart(4)
			} else {
				yynn1756 = 1
				for _, b := range yyq1756 {
					if b {
						yynn1756++
					}
				}
				r.EncodeMapStart(yynn1756)
				yynn1756 = 0
			}
			if yyr1756 || yy2arr1756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1756[0] {
					yym1758 := z.EncBinary()
					_ = yym1758
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1756[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1759 := z.EncBinary()
					_ = yym1759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr1756 || yy2arr1756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1756[1] {
					yym1761 := z.EncBinary()
					_ = yym1761
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1756[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1762 := z.EncBinary()
					_ = yym1762
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr1756 || yy2arr1756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1756[2] {
					yy1764 := &x.ListMeta
					yym1765 := z.EncBinary()
					_ = yym1765
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1764) {
					} else {
						z.EncFallback(yy1764)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1756[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy1766 := &x.ListMeta
					yym1767 := z.EncBinary()
					_ = yym1767
					if false {
					} else if z.HasExtensions() && z.EncExt(yy1766) {
					} else {
						z.EncFallback(yy1766)
					}
				}
			}
			if yyr1756 || yy2arr1756 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1769 := z.EncBinary()
					_ = yym1769
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym1770 := z.EncBinary()
					_ = yym1770
					if false {
					} else {
						h.encSlicePod(([]Pod)(x.Items), e)
					}
				}
			}
			if yyr1756 || yy2arr1756 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1771 := z.DecBinary()
	_ = yym1771
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1772 := r.ContainerType()
		if yyct1772 == codecSelferValueTypeMap1234 {
			yyl1772 := r.ReadMapStart()
			if yyl1772 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1772, d)
			}
		} else if yyct1772 == codecSelferValueTypeArray1234 {
			yyl1772 := r.ReadArrayStart()
			if yyl1772 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1772, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1773Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1773Slc
	var yyhl1773 bool = l >= 0
	for yyj1773 := 0; ; yyj1773++ {
		if yyhl1773 {
			if yyj1773 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1773Slc = r.DecodeBytes(yys1773Slc, true, true)
		yys1773 := string(yys1773Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1773 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv1776 := &x.ListMeta
				yym1777 := z.DecBinary()
				_ = yym1777
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv1776) {
				} else {
					z.DecFallback(yyv1776, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv1778 := &x.Items
				yym1779 := z.DecBinary()
				_ = yym1779
				if false {
				} else {
					h.decSlicePod((*[]Pod)(yyv1778), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1773)
		} // end switch yys1773
	} // end for yyj1773
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1780 int
	var yyb1780 bool
	var yyhl1780 bool = l >= 0
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv1783 := &x.ListMeta
		yym1784 := z.DecBinary()
		_ = yym1784
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv1783) {
		} else {
			z.DecFallback(yyv1783, false)
		}
	}
	yyj1780++
	if yyhl1780 {
		yyb1780 = yyj1780 > l
	} else {
		yyb1780 = r.CheckBreak()
	}
	if yyb1780 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv1785 := &x.Items
		yym1786 := z.DecBinary()
		_ = yym1786
		if false {
		} else {
			h.decSlicePod((*[]Pod)(yyv1785), d)
		}
	}
	for {
		yyj1780++
		if yyhl1780 {
			yyb1780 = yyj1780 > l
		} else {
			yyb1780 = r.CheckBreak()
		}
		if yyb1780 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1780-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x DNSPolicy) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1787 := z.EncBinary()
	_ = yym1787
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *DNSPolicy) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1788 := z.DecBinary()
	_ = yym1788
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeSelector) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1789 := z.EncBinary()
		_ = yym1789
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1790 := !z.EncBinary()
			yy2arr1790 := z.EncBasicHandle().StructToArray
			var yyq1790 [1]bool
			_, _, _ = yysep1790, yyq1790, yy2arr1790
			const yyr1790 bool = false
			var yynn1790 int
			if yyr1790 || yy2arr1790 {
				r.EncodeArrayStart(1)
			} else {
				yynn1790 = 1
				for _, b := range yyq1790 {
					if b {
						yynn1790++
					}
				}
				r.EncodeMapStart(yynn1790)
				yynn1790 = 0
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1792 := z.EncBinary()
					_ = yym1792
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodeSelectorTerms"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NodeSelectorTerms == nil {
					r.EncodeNil()
				} else {
					yym1793 := z.EncBinary()
					_ = yym1793
					if false {
					} else {
						h.encSliceNodeSelectorTerm(([]NodeSelectorTerm)(x.NodeSelectorTerms), e)
					}
				}
			}
			if yyr1790 || yy2arr1790 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelector) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1794 := z.DecBinary()
	_ = yym1794
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1795 := r.ContainerType()
		if yyct1795 == codecSelferValueTypeMap1234 {
			yyl1795 := r.ReadMapStart()
			if yyl1795 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1795, d)
			}
		} else if yyct1795 == codecSelferValueTypeArray1234 {
			yyl1795 := r.ReadArrayStart()
			if yyl1795 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1795, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelector) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1796Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1796Slc
	var yyhl1796 bool = l >= 0
	for yyj1796 := 0; ; yyj1796++ {
		if yyhl1796 {
			if yyj1796 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1796Slc = r.DecodeBytes(yys1796Slc, true, true)
		yys1796 := string(yys1796Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1796 {
		case "nodeSelectorTerms":
			if r.TryDecodeAsNil() {
				x.NodeSelectorTerms = nil
			} else {
				yyv1797 := &x.NodeSelectorTerms
				yym1798 := z.DecBinary()
				_ = yym1798
				if false {
				} else {
					h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1797), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1796)
		} // end switch yys1796
	} // end for yyj1796
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelector) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1799 int
	var yyb1799 bool
	var yyhl1799 bool = l >= 0
	yyj1799++
	if yyhl1799 {
		yyb1799 = yyj1799 > l
	} else {
		yyb1799 = r.CheckBreak()
	}
	if yyb1799 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelectorTerms = nil
	} else {
		yyv1800 := &x.NodeSelectorTerms
		yym1801 := z.DecBinary()
		_ = yym1801
		if false {
		} else {
			h.decSliceNodeSelectorTerm((*[]NodeSelectorTerm)(yyv1800), d)
		}
	}
	for {
		yyj1799++
		if yyhl1799 {
			yyb1799 = yyj1799 > l
		} else {
			yyb1799 = r.CheckBreak()
		}
		if yyb1799 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1799-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1802 := z.EncBinary()
		_ = yym1802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1803 := !z.EncBinary()
			yy2arr1803 := z.EncBasicHandle().StructToArray
			var yyq1803 [1]bool
			_, _, _ = yysep1803, yyq1803, yy2arr1803
			const yyr1803 bool = false
			var yynn1803 int
			if yyr1803 || yy2arr1803 {
				r.EncodeArrayStart(1)
			} else {
				yynn1803 = 1
				for _, b := range yyq1803 {
					if b {
						yynn1803++
					}
				}
				r.EncodeMapStart(yynn1803)
				yynn1803 = 0
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1805 := z.EncBinary()
					_ = yym1805
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("matchExpressions"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.MatchExpressions == nil {
					r.EncodeNil()
				} else {
					yym1806 := z.EncBinary()
					_ = yym1806
					if false {
					} else {
						h.encSliceNodeSelectorRequirement(([]NodeSelectorRequirement)(x.MatchExpressions), e)
					}
				}
			}
			if yyr1803 || yy2arr1803 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1807 := z.DecBinary()
	_ = yym1807
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1808 := r.ContainerType()
		if yyct1808 == codecSelferValueTypeMap1234 {
			yyl1808 := r.ReadMapStart()
			if yyl1808 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1808, d)
			}
		} else if yyct1808 == codecSelferValueTypeArray1234 {
			yyl1808 := r.ReadArrayStart()
			if yyl1808 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1808, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1809Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1809Slc
	var yyhl1809 bool = l >= 0
	for yyj1809 := 0; ; yyj1809++ {
		if yyhl1809 {
			if yyj1809 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1809Slc = r.DecodeBytes(yys1809Slc, true, true)
		yys1809 := string(yys1809Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1809 {
		case "matchExpressions":
			if r.TryDecodeAsNil() {
				x.MatchExpressions = nil
			} else {
				yyv1810 := &x.MatchExpressions
				yym1811 := z.DecBinary()
				_ = yym1811
				if false {
				} else {
					h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1810), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1809)
		} // end switch yys1809
	} // end for yyj1809
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1812 int
	var yyb1812 bool
	var yyhl1812 bool = l >= 0
	yyj1812++
	if yyhl1812 {
		yyb1812 = yyj1812 > l
	} else {
		yyb1812 = r.CheckBreak()
	}
	if yyb1812 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MatchExpressions = nil
	} else {
		yyv1813 := &x.MatchExpressions
		yym1814 := z.DecBinary()
		_ = yym1814
		if false {
		} else {
			h.decSliceNodeSelectorRequirement((*[]NodeSelectorRequirement)(yyv1813), d)
		}
	}
	for {
		yyj1812++
		if yyhl1812 {
			yyb1812 = yyj1812 > l
		} else {
			yyb1812 = r.CheckBreak()
		}
		if yyb1812 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1812-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSelectorRequirement) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1815 := z.EncBinary()
		_ = yym1815
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1816 := !z.EncBinary()
			yy2arr1816 := z.EncBasicHandle().StructToArray
			var yyq1816 [3]bool
			_, _, _ = yysep1816, yyq1816, yy2arr1816
			const yyr1816 bool = false
			yyq1816[2] = len(x.Values) != 0
			var yynn1816 int
			if yyr1816 || yy2arr1816 {
				r.EncodeArrayStart(3)
			} else {
				yynn1816 = 2
				for _, b := range yyq1816 {
					if b {
						yynn1816++
					}
				}
				r.EncodeMapStart(yynn1816)
				yynn1816 = 0
			}
			if yyr1816 || yy2arr1816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1818 := z.EncBinary()
				_ = yym1818
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1819 := z.EncBinary()
				_ = yym1819
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1816 || yy2arr1816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Operator.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operator"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Operator.CodecEncodeSelf(e)
			}
			if yyr1816 || yy2arr1816 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1816[2] {
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1822 := z.EncBinary()
						_ = yym1822
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1816[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("values"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Values == nil {
						r.EncodeNil()
					} else {
						yym1823 := z.EncBinary()
						_ = yym1823
						if false {
						} else {
							z.F.EncSliceStringV(x.Values, false, e)
						}
					}
				}
			}
			if yyr1816 || yy2arr1816 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSelectorRequirement) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1824 := z.DecBinary()
	_ = yym1824
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1825 := r.ContainerType()
		if yyct1825 == codecSelferValueTypeMap1234 {
			yyl1825 := r.ReadMapStart()
			if yyl1825 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1825, d)
			}
		} else if yyct1825 == codecSelferValueTypeArray1234 {
			yyl1825 := r.ReadArrayStart()
			if yyl1825 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1825, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1826Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1826Slc
	var yyhl1826 bool = l >= 0
	for yyj1826 := 0; ; yyj1826++ {
		if yyhl1826 {
			if yyj1826 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1826Slc = r.DecodeBytes(yys1826Slc, true, true)
		yys1826 := string(yys1826Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1826 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = NodeSelectorOperator(r.DecodeString())
			}
		case "values":
			if r.TryDecodeAsNil() {
				x.Values = nil
			} else {
				yyv1829 := &x.Values
				yym1830 := z.DecBinary()
				_ = yym1830
				if false {
				} else {
					z.F.DecSliceStringX(yyv1829, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1826)
		} // end switch yys1826
	} // end for yyj1826
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSelectorRequirement) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1831 int
	var yyb1831 bool
	var yyhl1831 bool = l >= 0
	yyj1831++
	if yyhl1831 {
		yyb1831 = yyj1831 > l
	} else {
		yyb1831 = r.CheckBreak()
	}
	if yyb1831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1831++
	if yyhl1831 {
		yyb1831 = yyj1831 > l
	} else {
		yyb1831 = r.CheckBreak()
	}
	if yyb1831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = NodeSelectorOperator(r.DecodeString())
	}
	yyj1831++
	if yyhl1831 {
		yyb1831 = yyj1831 > l
	} else {
		yyb1831 = r.CheckBreak()
	}
	if yyb1831 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Values = nil
	} else {
		yyv1834 := &x.Values
		yym1835 := z.DecBinary()
		_ = yym1835
		if false {
		} else {
			z.F.DecSliceStringX(yyv1834, false, d)
		}
	}
	for {
		yyj1831++
		if yyhl1831 {
			yyb1831 = yyj1831 > l
		} else {
			yyb1831 = r.CheckBreak()
		}
		if yyb1831 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1831-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeSelectorOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1836 := z.EncBinary()
	_ = yym1836
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeSelectorOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1837 := z.DecBinary()
	_ = yym1837
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Affinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1838 := z.EncBinary()
		_ = yym1838
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1839 := !z.EncBinary()
			yy2arr1839 := z.EncBasicHandle().StructToArray
			var yyq1839 [3]bool
			_, _, _ = yysep1839, yyq1839, yy2arr1839
			const yyr1839 bool = false
			yyq1839[0] = x.NodeAffinity != nil
			yyq1839[1] = x.PodAffinity != nil
			yyq1839[2] = x.PodAntiAffinity != nil
			var yynn1839 int
			if yyr1839 || yy2arr1839 {
				r.EncodeArrayStart(3)
			} else {
				yynn1839 = 0
				for _, b := range yyq1839 {
					if b {
						yynn1839++
					}
				}
				r.EncodeMapStart(yynn1839)
				yynn1839 = 0
			}
			if yyr1839 || yy2arr1839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1839[0] {
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1839[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeAffinity == nil {
						r.EncodeNil()
					} else {
						x.NodeAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1839 || yy2arr1839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1839[1] {
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1839[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1839 || yy2arr1839 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1839[2] {
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1839[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podAntiAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodAntiAffinity == nil {
						r.EncodeNil()
					} else {
						x.PodAntiAffinity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1839 || yy2arr1839 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Affinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1843 := z.DecBinary()
	_ = yym1843
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1844 := r.ContainerType()
		if yyct1844 == codecSelferValueTypeMap1234 {
			yyl1844 := r.ReadMapStart()
			if yyl1844 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1844, d)
			}
		} else if yyct1844 == codecSelferValueTypeArray1234 {
			yyl1844 := r.ReadArrayStart()
			if yyl1844 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1844, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Affinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1845Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1845Slc
	var yyhl1845 bool = l >= 0
	for yyj1845 := 0; ; yyj1845++ {
		if yyhl1845 {
			if yyj1845 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1845Slc = r.DecodeBytes(yys1845Slc, true, true)
		yys1845 := string(yys1845Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1845 {
		case "nodeAffinity":
			if r.TryDecodeAsNil() {
				if x.NodeAffinity != nil {
					x.NodeAffinity = nil
				}
			} else {
				if x.NodeAffinity == nil {
					x.NodeAffinity = new(NodeAffinity)
				}
				x.NodeAffinity.CodecDecodeSelf(d)
			}
		case "podAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAffinity != nil {
					x.PodAffinity = nil
				}
			} else {
				if x.PodAffinity == nil {
					x.PodAffinity = new(PodAffinity)
				}
				x.PodAffinity.CodecDecodeSelf(d)
			}
		case "podAntiAffinity":
			if r.TryDecodeAsNil() {
				if x.PodAntiAffinity != nil {
					x.PodAntiAffinity = nil
				}
			} else {
				if x.PodAntiAffinity == nil {
					x.PodAntiAffinity = new(PodAntiAffinity)
				}
				x.PodAntiAffinity.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1845)
		} // end switch yys1845
	} // end for yyj1845
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Affinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1849 int
	var yyb1849 bool
	var yyhl1849 bool = l >= 0
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeAffinity != nil {
			x.NodeAffinity = nil
		}
	} else {
		if x.NodeAffinity == nil {
			x.NodeAffinity = new(NodeAffinity)
		}
		x.NodeAffinity.CodecDecodeSelf(d)
	}
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAffinity != nil {
			x.PodAffinity = nil
		}
	} else {
		if x.PodAffinity == nil {
			x.PodAffinity = new(PodAffinity)
		}
		x.PodAffinity.CodecDecodeSelf(d)
	}
	yyj1849++
	if yyhl1849 {
		yyb1849 = yyj1849 > l
	} else {
		yyb1849 = r.CheckBreak()
	}
	if yyb1849 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodAntiAffinity != nil {
			x.PodAntiAffinity = nil
		}
	} else {
		if x.PodAntiAffinity == nil {
			x.PodAntiAffinity = new(PodAntiAffinity)
		}
		x.PodAntiAffinity.CodecDecodeSelf(d)
	}
	for {
		yyj1849++
		if yyhl1849 {
			yyb1849 = yyj1849 > l
		} else {
			yyb1849 = r.CheckBreak()
		}
		if yyb1849 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1849-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1853 := z.EncBinary()
		_ = yym1853
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1854 := !z.EncBinary()
			yy2arr1854 := z.EncBasicHandle().StructToArray
			var yyq1854 [2]bool
			_, _, _ = yysep1854, yyq1854, yy2arr1854
			const yyr1854 bool = false
			yyq1854[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1854[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1854 int
			if yyr1854 || yy2arr1854 {
				r.EncodeArrayStart(2)
			} else {
				yynn1854 = 0
				for _, b := range yyq1854 {
					if b {
						yynn1854++
					}
				}
				r.EncodeMapStart(yynn1854)
				yynn1854 = 0
			}
			if yyr1854 || yy2arr1854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1854[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1856 := z.EncBinary()
						_ = yym1856
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1854[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1857 := z.EncBinary()
						_ = yym1857
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1854 || yy2arr1854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1854[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1859 := z.EncBinary()
						_ = yym1859
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1854[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1860 := z.EncBinary()
						_ = yym1860
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1854 || yy2arr1854 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1861 := z.DecBinary()
	_ = yym1861
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1862 := r.ContainerType()
		if yyct1862 == codecSelferValueTypeMap1234 {
			yyl1862 := r.ReadMapStart()
			if yyl1862 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1862, d)
			}
		} else if yyct1862 == codecSelferValueTypeArray1234 {
			yyl1862 := r.ReadArrayStart()
			if yyl1862 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1862, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1863Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1863Slc
	var yyhl1863 bool = l >= 0
	for yyj1863 := 0; ; yyj1863++ {
		if yyhl1863 {
			if yyj1863 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1863Slc = r.DecodeBytes(yys1863Slc, true, true)
		yys1863 := string(yys1863Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1863 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1864 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1865 := z.DecBinary()
				_ = yym1865
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1864), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1866 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1867 := z.DecBinary()
				_ = yym1867
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1866), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1863)
		} // end switch yys1863
	} // end for yyj1863
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1868 int
	var yyb1868 bool
	var yyhl1868 bool = l >= 0
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1869 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1870 := z.DecBinary()
		_ = yym1870
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1869), d)
		}
	}
	yyj1868++
	if yyhl1868 {
		yyb1868 = yyj1868 > l
	} else {
		yyb1868 = r.CheckBreak()
	}
	if yyb1868 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1871 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1872 := z.DecBinary()
		_ = yym1872
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1871), d)
		}
	}
	for {
		yyj1868++
		if yyhl1868 {
			yyb1868 = yyj1868 > l
		} else {
			yyb1868 = r.CheckBreak()
		}
		if yyb1868 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1868-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAntiAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1873 := z.EncBinary()
		_ = yym1873
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1874 := !z.EncBinary()
			yy2arr1874 := z.EncBasicHandle().StructToArray
			var yyq1874 [2]bool
			_, _, _ = yysep1874, yyq1874, yy2arr1874
			const yyr1874 bool = false
			yyq1874[0] = len(x.RequiredDuringSchedulingIgnoredDuringExecution) != 0
			yyq1874[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1874 int
			if yyr1874 || yy2arr1874 {
				r.EncodeArrayStart(2)
			} else {
				yynn1874 = 0
				for _, b := range yyq1874 {
					if b {
						yynn1874++
					}
				}
				r.EncodeMapStart(yynn1874)
				yynn1874 = 0
			}
			if yyr1874 || yy2arr1874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1874[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1876 := z.EncBinary()
						_ = yym1876
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1874[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1877 := z.EncBinary()
						_ = yym1877
						if false {
						} else {
							h.encSlicePodAffinityTerm(([]PodAffinityTerm)(x.RequiredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1874 || yy2arr1874 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1874[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1879 := z.EncBinary()
						_ = yym1879
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1874[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1880 := z.EncBinary()
						_ = yym1880
						if false {
						} else {
							h.encSliceWeightedPodAffinityTerm(([]WeightedPodAffinityTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1874 || yy2arr1874 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAntiAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1881 := z.DecBinary()
	_ = yym1881
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1882 := r.ContainerType()
		if yyct1882 == codecSelferValueTypeMap1234 {
			yyl1882 := r.ReadMapStart()
			if yyl1882 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1882, d)
			}
		} else if yyct1882 == codecSelferValueTypeArray1234 {
			yyl1882 := r.ReadArrayStart()
			if yyl1882 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1882, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAntiAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1883Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1883Slc
	var yyhl1883 bool = l >= 0
	for yyj1883 := 0; ; yyj1883++ {
		if yyhl1883 {
			if yyj1883 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1883Slc = r.DecodeBytes(yys1883Slc, true, true)
		yys1883 := string(yys1883Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1883 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.RequiredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1884 := &x.RequiredDuringSchedulingIgnoredDuringExecution
				yym1885 := z.DecBinary()
				_ = yym1885
				if false {
				} else {
					h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1884), d)
				}
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1886 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1887 := z.DecBinary()
				_ = yym1887
				if false {
				} else {
					h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1886), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1883)
		} // end switch yys1883
	} // end for yyj1883
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAntiAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1888 int
	var yyb1888 bool
	var yyhl1888 bool = l >= 0
	yyj1888++
	if yyhl1888 {
		yyb1888 = yyj1888 > l
	} else {
		yyb1888 = r.CheckBreak()
	}
	if yyb1888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RequiredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1889 := &x.RequiredDuringSchedulingIgnoredDuringExecution
		yym1890 := z.DecBinary()
		_ = yym1890
		if false {
		} else {
			h.decSlicePodAffinityTerm((*[]PodAffinityTerm)(yyv1889), d)
		}
	}
	yyj1888++
	if yyhl1888 {
		yyb1888 = yyj1888 > l
	} else {
		yyb1888 = r.CheckBreak()
	}
	if yyb1888 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1891 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1892 := z.DecBinary()
		_ = yym1892
		if false {
		} else {
			h.decSliceWeightedPodAffinityTerm((*[]WeightedPodAffinityTerm)(yyv1891), d)
		}
	}
	for {
		yyj1888++
		if yyhl1888 {
			yyb1888 = yyj1888 > l
		} else {
			yyb1888 = r.CheckBreak()
		}
		if yyb1888 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1888-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *WeightedPodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1893 := z.EncBinary()
		_ = yym1893
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1894 := !z.EncBinary()
			yy2arr1894 := z.EncBasicHandle().StructToArray
			var yyq1894 [2]bool
			_, _, _ = yysep1894, yyq1894, yy2arr1894
			const yyr1894 bool = false
			var yynn1894 int
			if yyr1894 || yy2arr1894 {
				r.EncodeArrayStart(2)
			} else {
				yynn1894 = 2
				for _, b := range yyq1894 {
					if b {
						yynn1894++
					}
				}
				r.EncodeMapStart(yynn1894)
				yynn1894 = 0
			}
			if yyr1894 || yy2arr1894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1896 := z.EncBinary()
				_ = yym1896
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1897 := z.EncBinary()
				_ = yym1897
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1894 || yy2arr1894 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1899 := &x.PodAffinityTerm
				yy1899.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podAffinityTerm"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1900 := &x.PodAffinityTerm
				yy1900.CodecEncodeSelf(e)
			}
			if yyr1894 || yy2arr1894 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *WeightedPodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1901 := z.DecBinary()
	_ = yym1901
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1902 := r.ContainerType()
		if yyct1902 == codecSelferValueTypeMap1234 {
			yyl1902 := r.ReadMapStart()
			if yyl1902 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1902, d)
			}
		} else if yyct1902 == codecSelferValueTypeArray1234 {
			yyl1902 := r.ReadArrayStart()
			if yyl1902 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1902, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1903Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1903Slc
	var yyhl1903 bool = l >= 0
	for yyj1903 := 0; ; yyj1903++ {
		if yyhl1903 {
			if yyj1903 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1903Slc = r.DecodeBytes(yys1903Slc, true, true)
		yys1903 := string(yys1903Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1903 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
			}
		case "podAffinityTerm":
			if r.TryDecodeAsNil() {
				x.PodAffinityTerm = PodAffinityTerm{}
			} else {
				yyv1905 := &x.PodAffinityTerm
				yyv1905.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1903)
		} // end switch yys1903
	} // end for yyj1903
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *WeightedPodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1906 int
	var yyb1906 bool
	var yyhl1906 bool = l >= 0
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int(r.DecodeInt(codecSelferBitsize1234))
	}
	yyj1906++
	if yyhl1906 {
		yyb1906 = yyj1906 > l
	} else {
		yyb1906 = r.CheckBreak()
	}
	if yyb1906 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodAffinityTerm = PodAffinityTerm{}
	} else {
		yyv1908 := &x.PodAffinityTerm
		yyv1908.CodecDecodeSelf(d)
	}
	for {
		yyj1906++
		if yyhl1906 {
			yyb1906 = yyj1906 > l
		} else {
			yyb1906 = r.CheckBreak()
		}
		if yyb1906 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1906-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAffinityTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1909 := z.EncBinary()
		_ = yym1909
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1910 := !z.EncBinary()
			yy2arr1910 := z.EncBasicHandle().StructToArray
			var yyq1910 [3]bool
			_, _, _ = yysep1910, yyq1910, yy2arr1910
			const yyr1910 bool = false
			yyq1910[0] = x.LabelSelector != nil
			yyq1910[2] = x.TopologyKey != ""
			var yynn1910 int
			if yyr1910 || yy2arr1910 {
				r.EncodeArrayStart(3)
			} else {
				yynn1910 = 1
				for _, b := range yyq1910 {
					if b {
						yynn1910++
					}
				}
				r.EncodeMapStart(yynn1910)
				yynn1910 = 0
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1910[0] {
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1912 := z.EncBinary()
						_ = yym1912
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1910[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("labelSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LabelSelector == nil {
						r.EncodeNil()
					} else {
						yym1913 := z.EncBinary()
						_ = yym1913
						if false {
						} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
						} else {
							z.EncFallback(x.LabelSelector)
						}
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1915 := z.EncBinary()
					_ = yym1915
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("namespaces"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Namespaces == nil {
					r.EncodeNil()
				} else {
					yym1916 := z.EncBinary()
					_ = yym1916
					if false {
					} else {
						z.F.EncSliceStringV(x.Namespaces, false, e)
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1910[2] {
					yym1918 := z.EncBinary()
					_ = yym1918
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1910[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("topologyKey"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1919 := z.EncBinary()
					_ = yym1919
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.TopologyKey))
					}
				}
			}
			if yyr1910 || yy2arr1910 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAffinityTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1920 := z.DecBinary()
	_ = yym1920
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1921 := r.ContainerType()
		if yyct1921 == codecSelferValueTypeMap1234 {
			yyl1921 := r.ReadMapStart()
			if yyl1921 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1921, d)
			}
		} else if yyct1921 == codecSelferValueTypeArray1234 {
			yyl1921 := r.ReadArrayStart()
			if yyl1921 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1921, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAffinityTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1922Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1922Slc
	var yyhl1922 bool = l >= 0
	for yyj1922 := 0; ; yyj1922++ {
		if yyhl1922 {
			if yyj1922 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1922Slc = r.DecodeBytes(yys1922Slc, true, true)
		yys1922 := string(yys1922Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1922 {
		case "labelSelector":
			if r.TryDecodeAsNil() {
				if x.LabelSelector != nil {
					x.LabelSelector = nil
				}
			} else {
				if x.LabelSelector == nil {
					x.LabelSelector = new(pkg2_unversioned.LabelSelector)
				}
				yym1924 := z.DecBinary()
				_ = yym1924
				if false {
				} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
				} else {
					z.DecFallback(x.LabelSelector, false)
				}
			}
		case "namespaces":
			if r.TryDecodeAsNil() {
				x.Namespaces = nil
			} else {
				yyv1925 := &x.Namespaces
				yym1926 := z.DecBinary()
				_ = yym1926
				if false {
				} else {
					z.F.DecSliceStringX(yyv1925, false, d)
				}
			}
		case "topologyKey":
			if r.TryDecodeAsNil() {
				x.TopologyKey = ""
			} else {
				x.TopologyKey = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1922)
		} // end switch yys1922
	} // end for yyj1922
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAffinityTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1928 int
	var yyb1928 bool
	var yyhl1928 bool = l >= 0
	yyj1928++
	if yyhl1928 {
		yyb1928 = yyj1928 > l
	} else {
		yyb1928 = r.CheckBreak()
	}
	if yyb1928 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LabelSelector != nil {
			x.LabelSelector = nil
		}
	} else {
		if x.LabelSelector == nil {
			x.LabelSelector = new(pkg2_unversioned.LabelSelector)
		}
		yym1930 := z.DecBinary()
		_ = yym1930
		if false {
		} else if z.HasExtensions() && z.DecExt(x.LabelSelector) {
		} else {
			z.DecFallback(x.LabelSelector, false)
		}
	}
	yyj1928++
	if yyhl1928 {
		yyb1928 = yyj1928 > l
	} else {
		yyb1928 = r.CheckBreak()
	}
	if yyb1928 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespaces = nil
	} else {
		yyv1931 := &x.Namespaces
		yym1932 := z.DecBinary()
		_ = yym1932
		if false {
		} else {
			z.F.DecSliceStringX(yyv1931, false, d)
		}
	}
	yyj1928++
	if yyhl1928 {
		yyb1928 = yyj1928 > l
	} else {
		yyb1928 = r.CheckBreak()
	}
	if yyb1928 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TopologyKey = ""
	} else {
		x.TopologyKey = string(r.DecodeString())
	}
	for {
		yyj1928++
		if yyhl1928 {
			yyb1928 = yyj1928 > l
		} else {
			yyb1928 = r.CheckBreak()
		}
		if yyb1928 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1928-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1934 := z.EncBinary()
		_ = yym1934
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1935 := !z.EncBinary()
			yy2arr1935 := z.EncBasicHandle().StructToArray
			var yyq1935 [2]bool
			_, _, _ = yysep1935, yyq1935, yy2arr1935
			const yyr1935 bool = false
			yyq1935[0] = x.RequiredDuringSchedulingIgnoredDuringExecution != nil
			yyq1935[1] = len(x.PreferredDuringSchedulingIgnoredDuringExecution) != 0
			var yynn1935 int
			if yyr1935 || yy2arr1935 {
				r.EncodeArrayStart(2)
			} else {
				yynn1935 = 0
				for _, b := range yyq1935 {
					if b {
						yynn1935++
					}
				}
				r.EncodeMapStart(yynn1935)
				yynn1935 = 0
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1935[0] {
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1935[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("requiredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						x.RequiredDuringSchedulingIgnoredDuringExecution.CodecEncodeSelf(e)
					}
				}
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1935[1] {
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1938 := z.EncBinary()
						_ = yym1938
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq1935[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferredDuringSchedulingIgnoredDuringExecution"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferredDuringSchedulingIgnoredDuringExecution == nil {
						r.EncodeNil()
					} else {
						yym1939 := z.EncBinary()
						_ = yym1939
						if false {
						} else {
							h.encSlicePreferredSchedulingTerm(([]PreferredSchedulingTerm)(x.PreferredDuringSchedulingIgnoredDuringExecution), e)
						}
					}
				}
			}
			if yyr1935 || yy2arr1935 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1940 := z.DecBinary()
	_ = yym1940
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1941 := r.ContainerType()
		if yyct1941 == codecSelferValueTypeMap1234 {
			yyl1941 := r.ReadMapStart()
			if yyl1941 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1941, d)
			}
		} else if yyct1941 == codecSelferValueTypeArray1234 {
			yyl1941 := r.ReadArrayStart()
			if yyl1941 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1941, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAffinity) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1942Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1942Slc
	var yyhl1942 bool = l >= 0
	for yyj1942 := 0; ; yyj1942++ {
		if yyhl1942 {
			if yyj1942 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1942Slc = r.DecodeBytes(yys1942Slc, true, true)
		yys1942 := string(yys1942Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1942 {
		case "requiredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = nil
				}
			} else {
				if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
					x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
				}
				x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
			}
		case "preferredDuringSchedulingIgnoredDuringExecution":
			if r.TryDecodeAsNil() {
				x.PreferredDuringSchedulingIgnoredDuringExecution = nil
			} else {
				yyv1944 := &x.PreferredDuringSchedulingIgnoredDuringExecution
				yym1945 := z.DecBinary()
				_ = yym1945
				if false {
				} else {
					h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1944), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys1942)
		} // end switch yys1942
	} // end for yyj1942
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAffinity) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1946 int
	var yyb1946 bool
	var yyhl1946 bool = l >= 0
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RequiredDuringSchedulingIgnoredDuringExecution != nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = nil
		}
	} else {
		if x.RequiredDuringSchedulingIgnoredDuringExecution == nil {
			x.RequiredDuringSchedulingIgnoredDuringExecution = new(NodeSelector)
		}
		x.RequiredDuringSchedulingIgnoredDuringExecution.CodecDecodeSelf(d)
	}
	yyj1946++
	if yyhl1946 {
		yyb1946 = yyj1946 > l
	} else {
		yyb1946 = r.CheckBreak()
	}
	if yyb1946 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferredDuringSchedulingIgnoredDuringExecution = nil
	} else {
		yyv1948 := &x.PreferredDuringSchedulingIgnoredDuringExecution
		yym1949 := z.DecBinary()
		_ = yym1949
		if false {
		} else {
			h.decSlicePreferredSchedulingTerm((*[]PreferredSchedulingTerm)(yyv1948), d)
		}
	}
	for {
		yyj1946++
		if yyhl1946 {
			yyb1946 = yyj1946 > l
		} else {
			yyb1946 = r.CheckBreak()
		}
		if yyb1946 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1946-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferredSchedulingTerm) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1950 := z.EncBinary()
		_ = yym1950
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1951 := !z.EncBinary()
			yy2arr1951 := z.EncBasicHandle().StructToArray
			var yyq1951 [2]bool
			_, _, _ = yysep1951, yyq1951, yy2arr1951
			const yyr1951 bool = false
			var yynn1951 int
			if yyr1951 || yy2arr1951 {
				r.EncodeArrayStart(2)
			} else {
				yynn1951 = 2
				for _, b := range yyq1951 {
					if b {
						yynn1951++
					}
				}
				r.EncodeMapStart(yynn1951)
				yynn1951 = 0
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1953 := z.EncBinary()
				_ = yym1953
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("weight"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1954 := z.EncBinary()
				_ = yym1954
				if false {
				} else {
					r.EncodeInt(int64(x.Weight))
				}
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy1956 := &x.Preference
				yy1956.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("preference"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy1957 := &x.Preference
				yy1957.CodecEncodeSelf(e)
			}
			if yyr1951 || yy2arr1951 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferredSchedulingTerm) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1958 := z.DecBinary()
	_ = yym1958
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1959 := r.ContainerType()
		if yyct1959 == codecSelferValueTypeMap1234 {
			yyl1959 := r.ReadMapStart()
			if yyl1959 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1959, d)
			}
		} else if yyct1959 == codecSelferValueTypeArray1234 {
			yyl1959 := r.ReadArrayStart()
			if yyl1959 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1959, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1960Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1960Slc
	var yyhl1960 bool = l >= 0
	for yyj1960 := 0; ; yyj1960++ {
		if yyhl1960 {
			if yyj1960 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1960Slc = r.DecodeBytes(yys1960Slc, true, true)
		yys1960 := string(yys1960Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1960 {
		case "weight":
			if r.TryDecodeAsNil() {
				x.Weight = 0
			} else {
				x.Weight = int32(r.DecodeInt(32))
			}
		case "preference":
			if r.TryDecodeAsNil() {
				x.Preference = NodeSelectorTerm{}
			} else {
				yyv1962 := &x.Preference
				yyv1962.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys1960)
		} // end switch yys1960
	} // end for yyj1960
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferredSchedulingTerm) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1963 int
	var yyb1963 bool
	var yyhl1963 bool = l >= 0
	yyj1963++
	if yyhl1963 {
		yyb1963 = yyj1963 > l
	} else {
		yyb1963 = r.CheckBreak()
	}
	if yyb1963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Weight = 0
	} else {
		x.Weight = int32(r.DecodeInt(32))
	}
	yyj1963++
	if yyhl1963 {
		yyb1963 = yyj1963 > l
	} else {
		yyb1963 = r.CheckBreak()
	}
	if yyb1963 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Preference = NodeSelectorTerm{}
	} else {
		yyv1965 := &x.Preference
		yyv1965.CodecDecodeSelf(d)
	}
	for {
		yyj1963++
		if yyhl1963 {
			yyb1963 = yyj1963 > l
		} else {
			yyb1963 = r.CheckBreak()
		}
		if yyb1963 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1963-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Taint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1966 := z.EncBinary()
		_ = yym1966
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1967 := !z.EncBinary()
			yy2arr1967 := z.EncBasicHandle().StructToArray
			var yyq1967 [3]bool
			_, _, _ = yysep1967, yyq1967, yy2arr1967
			const yyr1967 bool = false
			yyq1967[1] = x.Value != ""
			var yynn1967 int
			if yyr1967 || yy2arr1967 {
				r.EncodeArrayStart(3)
			} else {
				yynn1967 = 2
				for _, b := range yyq1967 {
					if b {
						yynn1967++
					}
				}
				r.EncodeMapStart(yynn1967)
				yynn1967 = 0
			}
			if yyr1967 || yy2arr1967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym1969 := z.EncBinary()
				_ = yym1969
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("key"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym1970 := z.EncBinary()
				_ = yym1970
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Key))
				}
			}
			if yyr1967 || yy2arr1967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1967[1] {
					yym1972 := z.EncBinary()
					_ = yym1972
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1967[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1973 := z.EncBinary()
					_ = yym1973
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1967 || yy2arr1967 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Effect.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("effect"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Effect.CodecEncodeSelf(e)
			}
			if yyr1967 || yy2arr1967 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Taint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1975 := z.DecBinary()
	_ = yym1975
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1976 := r.ContainerType()
		if yyct1976 == codecSelferValueTypeMap1234 {
			yyl1976 := r.ReadMapStart()
			if yyl1976 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1976, d)
			}
		} else if yyct1976 == codecSelferValueTypeArray1234 {
			yyl1976 := r.ReadArrayStart()
			if yyl1976 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1976, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Taint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1977Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1977Slc
	var yyhl1977 bool = l >= 0
	for yyj1977 := 0; ; yyj1977++ {
		if yyhl1977 {
			if yyj1977 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1977Slc = r.DecodeBytes(yys1977Slc, true, true)
		yys1977 := string(yys1977Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1977 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1977)
		} // end switch yys1977
	} // end for yyj1977
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Taint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj1981 int
	var yyb1981 bool
	var yyhl1981 bool = l >= 0
	yyj1981++
	if yyhl1981 {
		yyb1981 = yyj1981 > l
	} else {
		yyb1981 = r.CheckBreak()
	}
	if yyb1981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj1981++
	if yyhl1981 {
		yyb1981 = yyj1981 > l
	} else {
		yyb1981 = r.CheckBreak()
	}
	if yyb1981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj1981++
	if yyhl1981 {
		yyb1981 = yyj1981 > l
	} else {
		yyb1981 = r.CheckBreak()
	}
	if yyb1981 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj1981++
		if yyhl1981 {
			yyb1981 = yyj1981 > l
		} else {
			yyb1981 = r.CheckBreak()
		}
		if yyb1981 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj1981-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TaintEffect) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym1985 := z.EncBinary()
	_ = yym1985
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TaintEffect) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1986 := z.DecBinary()
	_ = yym1986
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Toleration) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym1987 := z.EncBinary()
		_ = yym1987
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep1988 := !z.EncBinary()
			yy2arr1988 := z.EncBasicHandle().StructToArray
			var yyq1988 [4]bool
			_, _, _ = yysep1988, yyq1988, yy2arr1988
			const yyr1988 bool = false
			yyq1988[0] = x.Key != ""
			yyq1988[1] = x.Operator != ""
			yyq1988[2] = x.Value != ""
			yyq1988[3] = x.Effect != ""
			var yynn1988 int
			if yyr1988 || yy2arr1988 {
				r.EncodeArrayStart(4)
			} else {
				yynn1988 = 0
				for _, b := range yyq1988 {
					if b {
						yynn1988++
					}
				}
				r.EncodeMapStart(yynn1988)
				yynn1988 = 0
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1988[0] {
					yym1990 := z.EncBinary()
					_ = yym1990
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1988[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("key"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1991 := z.EncBinary()
					_ = yym1991
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Key))
					}
				}
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1988[1] {
					x.Operator.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1988[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("operator"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Operator.CodecEncodeSelf(e)
				}
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1988[2] {
					yym1994 := z.EncBinary()
					_ = yym1994
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1988[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("value"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym1995 := z.EncBinary()
					_ = yym1995
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Value))
					}
				}
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq1988[3] {
					x.Effect.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq1988[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("effect"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Effect.CodecEncodeSelf(e)
				}
			}
			if yyr1988 || yy2arr1988 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Toleration) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym1997 := z.DecBinary()
	_ = yym1997
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct1998 := r.ContainerType()
		if yyct1998 == codecSelferValueTypeMap1234 {
			yyl1998 := r.ReadMapStart()
			if yyl1998 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl1998, d)
			}
		} else if yyct1998 == codecSelferValueTypeArray1234 {
			yyl1998 := r.ReadArrayStart()
			if yyl1998 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl1998, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Toleration) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys1999Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys1999Slc
	var yyhl1999 bool = l >= 0
	for yyj1999 := 0; ; yyj1999++ {
		if yyhl1999 {
			if yyj1999 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys1999Slc = r.DecodeBytes(yys1999Slc, true, true)
		yys1999 := string(yys1999Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys1999 {
		case "key":
			if r.TryDecodeAsNil() {
				x.Key = ""
			} else {
				x.Key = string(r.DecodeString())
			}
		case "operator":
			if r.TryDecodeAsNil() {
				x.Operator = ""
			} else {
				x.Operator = TolerationOperator(r.DecodeString())
			}
		case "value":
			if r.TryDecodeAsNil() {
				x.Value = ""
			} else {
				x.Value = string(r.DecodeString())
			}
		case "effect":
			if r.TryDecodeAsNil() {
				x.Effect = ""
			} else {
				x.Effect = TaintEffect(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys1999)
		} // end switch yys1999
	} // end for yyj1999
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Toleration) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2004 int
	var yyb2004 bool
	var yyhl2004 bool = l >= 0
	yyj2004++
	if yyhl2004 {
		yyb2004 = yyj2004 > l
	} else {
		yyb2004 = r.CheckBreak()
	}
	if yyb2004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Key = ""
	} else {
		x.Key = string(r.DecodeString())
	}
	yyj2004++
	if yyhl2004 {
		yyb2004 = yyj2004 > l
	} else {
		yyb2004 = r.CheckBreak()
	}
	if yyb2004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Operator = ""
	} else {
		x.Operator = TolerationOperator(r.DecodeString())
	}
	yyj2004++
	if yyhl2004 {
		yyb2004 = yyj2004 > l
	} else {
		yyb2004 = r.CheckBreak()
	}
	if yyb2004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Value = ""
	} else {
		x.Value = string(r.DecodeString())
	}
	yyj2004++
	if yyhl2004 {
		yyb2004 = yyj2004 > l
	} else {
		yyb2004 = r.CheckBreak()
	}
	if yyb2004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Effect = ""
	} else {
		x.Effect = TaintEffect(r.DecodeString())
	}
	for {
		yyj2004++
		if yyhl2004 {
			yyb2004 = yyj2004 > l
		} else {
			yyb2004 = r.CheckBreak()
		}
		if yyb2004 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2004-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x TolerationOperator) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2009 := z.EncBinary()
	_ = yym2009
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *TolerationOperator) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2010 := z.DecBinary()
	_ = yym2010
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *PodSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2011 := z.EncBinary()
		_ = yym2011
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2012 := !z.EncBinary()
			yy2arr2012 := z.EncBasicHandle().StructToArray
			var yyq2012 [13]bool
			_, _, _ = yysep2012, yyq2012, yy2arr2012
			const yyr2012 bool = false
			yyq2012[2] = x.RestartPolicy != ""
			yyq2012[3] = x.TerminationGracePeriodSeconds != nil
			yyq2012[4] = x.ActiveDeadlineSeconds != nil
			yyq2012[5] = x.DNSPolicy != ""
			yyq2012[6] = len(x.NodeSelector) != 0
			yyq2012[8] = x.NodeName != ""
			yyq2012[9] = x.SecurityContext != nil
			yyq2012[10] = len(x.ImagePullSecrets) != 0
			yyq2012[11] = x.Hostname != ""
			yyq2012[12] = x.Subdomain != ""
			var yynn2012 int
			if yyr2012 || yy2arr2012 {
				r.EncodeArrayStart(13)
			} else {
				yynn2012 = 3
				for _, b := range yyq2012 {
					if b {
						yynn2012++
					}
				}
				r.EncodeMapStart(yynn2012)
				yynn2012 = 0
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2014 := z.EncBinary()
					_ = yym2014
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("volumes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Volumes == nil {
					r.EncodeNil()
				} else {
					yym2015 := z.EncBinary()
					_ = yym2015
					if false {
					} else {
						h.encSliceVolume(([]Volume)(x.Volumes), e)
					}
				}
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2017 := z.EncBinary()
					_ = yym2017
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Containers == nil {
					r.EncodeNil()
				} else {
					yym2018 := z.EncBinary()
					_ = yym2018
					if false {
					} else {
						h.encSliceContainer(([]Container)(x.Containers), e)
					}
				}
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2012[2] {
					x.RestartPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2012[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("restartPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.RestartPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2012[3] {
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2021 := *x.TerminationGracePeriodSeconds
						yym2022 := z.EncBinary()
						_ = yym2022
						if false {
						} else {
							r.EncodeInt(int64(yy2021))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2012[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("terminationGracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.TerminationGracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy2023 := *x.TerminationGracePeriodSeconds
						yym2024 := z.EncBinary()
						_ = yym2024
						if false {
						} else {
							r.EncodeInt(int64(yy2023))
						}
					}
				}
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2012[4] {
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2026 := *x.ActiveDeadlineSeconds
						yym2027 := z.EncBinary()
						_ = yym2027
						if false {
						} else {
							r.EncodeInt(int64(yy2026))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2012[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("activeDeadlineSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ActiveDeadlineSeconds == nil {
						r.EncodeNil()
					} else {
						yy2028 := *x.ActiveDeadlineSeconds
						yym2029 := z.EncBinary()
						_ = yym2029
						if false {
						} else {
							r.EncodeInt(int64(yy2028))
						}
					}
				}
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2012[5] {
					x.DNSPolicy.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2012[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("dnsPolicy"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.DNSPolicy.CodecEncodeSelf(e)
				}
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2012[6] {
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2032 := z.EncBinary()
						_ = yym2032
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2012[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeSelector"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeSelector == nil {
						r.EncodeNil()
					} else {
						yym2033 := z.EncBinary()
						_ = yym2033
						if false {
						} else {
							z.F.EncMapStringStringV(x.NodeSelector, false, e)
						}
					}
				}
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2035 := z.EncBinary()
				_ = yym2035
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("serviceAccountName"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2036 := z.EncBinary()
				_ = yym2036
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ServiceAccountName))
				}
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2012[8] {
					yym2038 := z.EncBinary()
					_ = yym2038
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2012[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2039 := z.EncBinary()
					_ = yym2039
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.NodeName))
					}
				}
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2012[9] {
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2012[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("securityContext"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SecurityContext == nil {
						r.EncodeNil()
					} else {
						x.SecurityContext.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2012[10] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2042 := z.EncBinary()
						_ = yym2042
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2012[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2043 := z.EncBinary()
						_ = yym2043
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2012[11] {
					yym2045 := z.EncBinary()
					_ = yym2045
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2012[11] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2046 := z.EncBinary()
					_ = yym2046
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2012[12] {
					yym2048 := z.EncBinary()
					_ = yym2048
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2012[12] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("subdomain"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2049 := z.EncBinary()
					_ = yym2049
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Subdomain))
					}
				}
			}
			if yyr2012 || yy2arr2012 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2050 := z.DecBinary()
	_ = yym2050
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2051 := r.ContainerType()
		if yyct2051 == codecSelferValueTypeMap1234 {
			yyl2051 := r.ReadMapStart()
			if yyl2051 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2051, d)
			}
		} else if yyct2051 == codecSelferValueTypeArray1234 {
			yyl2051 := r.ReadArrayStart()
			if yyl2051 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2051, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2052Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2052Slc
	var yyhl2052 bool = l >= 0
	for yyj2052 := 0; ; yyj2052++ {
		if yyhl2052 {
			if yyj2052 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2052Slc = r.DecodeBytes(yys2052Slc, true, true)
		yys2052 := string(yys2052Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2052 {
		case "volumes":
			if r.TryDecodeAsNil() {
				x.Volumes = nil
			} else {
				yyv2053 := &x.Volumes
				yym2054 := z.DecBinary()
				_ = yym2054
				if false {
				} else {
					h.decSliceVolume((*[]Volume)(yyv2053), d)
				}
			}
		case "containers":
			if r.TryDecodeAsNil() {
				x.Containers = nil
			} else {
				yyv2055 := &x.Containers
				yym2056 := z.DecBinary()
				_ = yym2056
				if false {
				} else {
					h.decSliceContainer((*[]Container)(yyv2055), d)
				}
			}
		case "restartPolicy":
			if r.TryDecodeAsNil() {
				x.RestartPolicy = ""
			} else {
				x.RestartPolicy = RestartPolicy(r.DecodeString())
			}
		case "terminationGracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.TerminationGracePeriodSeconds != nil {
					x.TerminationGracePeriodSeconds = nil
				}
			} else {
				if x.TerminationGracePeriodSeconds == nil {
					x.TerminationGracePeriodSeconds = new(int64)
				}
				yym2059 := z.DecBinary()
				_ = yym2059
				if false {
				} else {
					*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "activeDeadlineSeconds":
			if r.TryDecodeAsNil() {
				if x.ActiveDeadlineSeconds != nil {
					x.ActiveDeadlineSeconds = nil
				}
			} else {
				if x.ActiveDeadlineSeconds == nil {
					x.ActiveDeadlineSeconds = new(int64)
				}
				yym2061 := z.DecBinary()
				_ = yym2061
				if false {
				} else {
					*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "dnsPolicy":
			if r.TryDecodeAsNil() {
				x.DNSPolicy = ""
			} else {
				x.DNSPolicy = DNSPolicy(r.DecodeString())
			}
		case "nodeSelector":
			if r.TryDecodeAsNil() {
				x.NodeSelector = nil
			} else {
				yyv2063 := &x.NodeSelector
				yym2064 := z.DecBinary()
				_ = yym2064
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2063, false, d)
				}
			}
		case "serviceAccountName":
			if r.TryDecodeAsNil() {
				x.ServiceAccountName = ""
			} else {
				x.ServiceAccountName = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				x.NodeName = ""
			} else {
				x.NodeName = string(r.DecodeString())
			}
		case "securityContext":
			if r.TryDecodeAsNil() {
				if x.SecurityContext != nil {
					x.SecurityContext = nil
				}
			} else {
				if x.SecurityContext == nil {
					x.SecurityContext = new(PodSecurityContext)
				}
				x.SecurityContext.CodecDecodeSelf(d)
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2068 := &x.ImagePullSecrets
				yym2069 := z.DecBinary()
				_ = yym2069
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2068), d)
				}
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "subdomain":
			if r.TryDecodeAsNil() {
				x.Subdomain = ""
			} else {
				x.Subdomain = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2052)
		} // end switch yys2052
	} // end for yyj2052
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2072 int
	var yyb2072 bool
	var yyhl2072 bool = l >= 0
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Volumes = nil
	} else {
		yyv2073 := &x.Volumes
		yym2074 := z.DecBinary()
		_ = yym2074
		if false {
		} else {
			h.decSliceVolume((*[]Volume)(yyv2073), d)
		}
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Containers = nil
	} else {
		yyv2075 := &x.Containers
		yym2076 := z.DecBinary()
		_ = yym2076
		if false {
		} else {
			h.decSliceContainer((*[]Container)(yyv2075), d)
		}
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.RestartPolicy = ""
	} else {
		x.RestartPolicy = RestartPolicy(r.DecodeString())
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TerminationGracePeriodSeconds != nil {
			x.TerminationGracePeriodSeconds = nil
		}
	} else {
		if x.TerminationGracePeriodSeconds == nil {
			x.TerminationGracePeriodSeconds = new(int64)
		}
		yym2079 := z.DecBinary()
		_ = yym2079
		if false {
		} else {
			*((*int64)(x.TerminationGracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ActiveDeadlineSeconds != nil {
			x.ActiveDeadlineSeconds = nil
		}
	} else {
		if x.ActiveDeadlineSeconds == nil {
			x.ActiveDeadlineSeconds = new(int64)
		}
		yym2081 := z.DecBinary()
		_ = yym2081
		if false {
		} else {
			*((*int64)(x.ActiveDeadlineSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DNSPolicy = ""
	} else {
		x.DNSPolicy = DNSPolicy(r.DecodeString())
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeSelector = nil
	} else {
		yyv2083 := &x.NodeSelector
		yym2084 := z.DecBinary()
		_ = yym2084
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2083, false, d)
		}
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ServiceAccountName = ""
	} else {
		x.ServiceAccountName = string(r.DecodeString())
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeName = ""
	} else {
		x.NodeName = string(r.DecodeString())
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SecurityContext != nil {
			x.SecurityContext = nil
		}
	} else {
		if x.SecurityContext == nil {
			x.SecurityContext = new(PodSecurityContext)
		}
		x.SecurityContext.CodecDecodeSelf(d)
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2088 := &x.ImagePullSecrets
		yym2089 := z.DecBinary()
		_ = yym2089
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2088), d)
		}
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2072++
	if yyhl2072 {
		yyb2072 = yyj2072 > l
	} else {
		yyb2072 = r.CheckBreak()
	}
	if yyb2072 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subdomain = ""
	} else {
		x.Subdomain = string(r.DecodeString())
	}
	for {
		yyj2072++
		if yyhl2072 {
			yyb2072 = yyj2072 > l
		} else {
			yyb2072 = r.CheckBreak()
		}
		if yyb2072 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2072-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2092 := z.EncBinary()
		_ = yym2092
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2093 := !z.EncBinary()
			yy2arr2093 := z.EncBasicHandle().StructToArray
			var yyq2093 [8]bool
			_, _, _ = yysep2093, yyq2093, yy2arr2093
			const yyr2093 bool = false
			yyq2093[0] = x.HostNetwork != false
			yyq2093[1] = x.HostPID != false
			yyq2093[2] = x.HostIPC != false
			yyq2093[3] = x.SELinuxOptions != nil
			yyq2093[4] = x.RunAsUser != nil
			yyq2093[5] = x.RunAsNonRoot != nil
			yyq2093[6] = len(x.SupplementalGroups) != 0
			yyq2093[7] = x.FSGroup != nil
			var yynn2093 int
			if yyr2093 || yy2arr2093 {
				r.EncodeArrayStart(8)
			} else {
				yynn2093 = 0
				for _, b := range yyq2093 {
					if b {
						yynn2093++
					}
				}
				r.EncodeMapStart(yynn2093)
				yynn2093 = 0
			}
			if yyr2093 || yy2arr2093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2093[0] {
					yym2095 := z.EncBinary()
					_ = yym2095
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2093[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostNetwork"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2096 := z.EncBinary()
					_ = yym2096
					if false {
					} else {
						r.EncodeBool(bool(x.HostNetwork))
					}
				}
			}
			if yyr2093 || yy2arr2093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2093[1] {
					yym2098 := z.EncBinary()
					_ = yym2098
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2093[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostPID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2099 := z.EncBinary()
					_ = yym2099
					if false {
					} else {
						r.EncodeBool(bool(x.HostPID))
					}
				}
			}
			if yyr2093 || yy2arr2093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2093[2] {
					yym2101 := z.EncBinary()
					_ = yym2101
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2093[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIPC"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2102 := z.EncBinary()
					_ = yym2102
					if false {
					} else {
						r.EncodeBool(bool(x.HostIPC))
					}
				}
			}
			if yyr2093 || yy2arr2093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2093[3] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2093[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2093 || yy2arr2093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2093[4] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2105 := *x.RunAsUser
						yym2106 := z.EncBinary()
						_ = yym2106
						if false {
						} else {
							r.EncodeInt(int64(yy2105))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2093[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy2107 := *x.RunAsUser
						yym2108 := z.EncBinary()
						_ = yym2108
						if false {
						} else {
							r.EncodeInt(int64(yy2107))
						}
					}
				}
			}
			if yyr2093 || yy2arr2093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2093[5] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2110 := *x.RunAsNonRoot
						yym2111 := z.EncBinary()
						_ = yym2111
						if false {
						} else {
							r.EncodeBool(bool(yy2110))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2093[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy2112 := *x.RunAsNonRoot
						yym2113 := z.EncBinary()
						_ = yym2113
						if false {
						} else {
							r.EncodeBool(bool(yy2112))
						}
					}
				}
			}
			if yyr2093 || yy2arr2093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2093[6] {
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2115 := z.EncBinary()
						_ = yym2115
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2093[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("supplementalGroups"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SupplementalGroups == nil {
						r.EncodeNil()
					} else {
						yym2116 := z.EncBinary()
						_ = yym2116
						if false {
						} else {
							z.F.EncSliceInt64V(x.SupplementalGroups, false, e)
						}
					}
				}
			}
			if yyr2093 || yy2arr2093 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2093[7] {
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2118 := *x.FSGroup
						yym2119 := z.EncBinary()
						_ = yym2119
						if false {
						} else {
							r.EncodeInt(int64(yy2118))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2093[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fsGroup"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.FSGroup == nil {
						r.EncodeNil()
					} else {
						yy2120 := *x.FSGroup
						yym2121 := z.EncBinary()
						_ = yym2121
						if false {
						} else {
							r.EncodeInt(int64(yy2120))
						}
					}
				}
			}
			if yyr2093 || yy2arr2093 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2122 := z.DecBinary()
	_ = yym2122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2123 := r.ContainerType()
		if yyct2123 == codecSelferValueTypeMap1234 {
			yyl2123 := r.ReadMapStart()
			if yyl2123 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2123, d)
			}
		} else if yyct2123 == codecSelferValueTypeArray1234 {
			yyl2123 := r.ReadArrayStart()
			if yyl2123 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2123, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2124Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2124Slc
	var yyhl2124 bool = l >= 0
	for yyj2124 := 0; ; yyj2124++ {
		if yyhl2124 {
			if yyj2124 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2124Slc = r.DecodeBytes(yys2124Slc, true, true)
		yys2124 := string(yys2124Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2124 {
		case "hostNetwork":
			if r.TryDecodeAsNil() {
				x.HostNetwork = false
			} else {
				x.HostNetwork = bool(r.DecodeBool())
			}
		case "hostPID":
			if r.TryDecodeAsNil() {
				x.HostPID = false
			} else {
				x.HostPID = bool(r.DecodeBool())
			}
		case "hostIPC":
			if r.TryDecodeAsNil() {
				x.HostIPC = false
			} else {
				x.HostIPC = bool(r.DecodeBool())
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym2130 := z.DecBinary()
				_ = yym2130
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym2132 := z.DecBinary()
				_ = yym2132
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "supplementalGroups":
			if r.TryDecodeAsNil() {
				x.SupplementalGroups = nil
			} else {
				yyv2133 := &x.SupplementalGroups
				yym2134 := z.DecBinary()
				_ = yym2134
				if false {
				} else {
					z.F.DecSliceInt64X(yyv2133, false, d)
				}
			}
		case "fsGroup":
			if r.TryDecodeAsNil() {
				if x.FSGroup != nil {
					x.FSGroup = nil
				}
			} else {
				if x.FSGroup == nil {
					x.FSGroup = new(int64)
				}
				yym2136 := z.DecBinary()
				_ = yym2136
				if false {
				} else {
					*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2124)
		} // end switch yys2124
	} // end for yyj2124
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2137 int
	var yyb2137 bool
	var yyhl2137 bool = l >= 0
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostNetwork = false
	} else {
		x.HostNetwork = bool(r.DecodeBool())
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostPID = false
	} else {
		x.HostPID = bool(r.DecodeBool())
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIPC = false
	} else {
		x.HostIPC = bool(r.DecodeBool())
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym2143 := z.DecBinary()
		_ = yym2143
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym2145 := z.DecBinary()
		_ = yym2145
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SupplementalGroups = nil
	} else {
		yyv2146 := &x.SupplementalGroups
		yym2147 := z.DecBinary()
		_ = yym2147
		if false {
		} else {
			z.F.DecSliceInt64X(yyv2146, false, d)
		}
	}
	yyj2137++
	if yyhl2137 {
		yyb2137 = yyj2137 > l
	} else {
		yyb2137 = r.CheckBreak()
	}
	if yyb2137 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.FSGroup != nil {
			x.FSGroup = nil
		}
	} else {
		if x.FSGroup == nil {
			x.FSGroup = new(int64)
		}
		yym2149 := z.DecBinary()
		_ = yym2149
		if false {
		} else {
			*((*int64)(x.FSGroup)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj2137++
		if yyhl2137 {
			yyb2137 = yyj2137 > l
		} else {
			yyb2137 = r.CheckBreak()
		}
		if yyb2137 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2137-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2150 := z.EncBinary()
		_ = yym2150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2151 := !z.EncBinary()
			yy2arr2151 := z.EncBasicHandle().StructToArray
			var yyq2151 [8]bool
			_, _, _ = yysep2151, yyq2151, yy2arr2151
			const yyr2151 bool = false
			yyq2151[0] = x.Phase != ""
			yyq2151[1] = len(x.Conditions) != 0
			yyq2151[2] = x.Message != ""
			yyq2151[3] = x.Reason != ""
			yyq2151[4] = x.HostIP != ""
			yyq2151[5] = x.PodIP != ""
			yyq2151[6] = x.StartTime != nil
			yyq2151[7] = len(x.ContainerStatuses) != 0
			var yynn2151 int
			if yyr2151 || yy2arr2151 {
				r.EncodeArrayStart(8)
			} else {
				yynn2151 = 0
				for _, b := range yyq2151 {
					if b {
						yynn2151++
					}
				}
				r.EncodeMapStart(yynn2151)
				yynn2151 = 0
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2151[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[1] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2154 := z.EncBinary()
						_ = yym2154
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2151[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2155 := z.EncBinary()
						_ = yym2155
						if false {
						} else {
							h.encSlicePodCondition(([]PodCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[2] {
					yym2157 := z.EncBinary()
					_ = yym2157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2151[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2158 := z.EncBinary()
					_ = yym2158
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[3] {
					yym2160 := z.EncBinary()
					_ = yym2160
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2151[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2161 := z.EncBinary()
					_ = yym2161
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[4] {
					yym2163 := z.EncBinary()
					_ = yym2163
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2151[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2164 := z.EncBinary()
					_ = yym2164
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.HostIP))
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[5] {
					yym2166 := z.EncBinary()
					_ = yym2166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2151[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2167 := z.EncBinary()
					_ = yym2167
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodIP))
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[6] {
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2169 := z.EncBinary()
						_ = yym2169
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2169 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2169 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2151[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("startTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.StartTime == nil {
						r.EncodeNil()
					} else {
						yym2170 := z.EncBinary()
						_ = yym2170
						if false {
						} else if z.HasExtensions() && z.EncExt(x.StartTime) {
						} else if yym2170 {
							z.EncBinaryMarshal(x.StartTime)
						} else if !yym2170 && z.IsJSONHandle() {
							z.EncJSONMarshal(x.StartTime)
						} else {
							z.EncFallback(x.StartTime)
						}
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2151[7] {
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2172 := z.EncBinary()
						_ = yym2172
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2151[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("containerStatuses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ContainerStatuses == nil {
						r.EncodeNil()
					} else {
						yym2173 := z.EncBinary()
						_ = yym2173
						if false {
						} else {
							h.encSliceContainerStatus(([]ContainerStatus)(x.ContainerStatuses), e)
						}
					}
				}
			}
			if yyr2151 || yy2arr2151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2174 := z.DecBinary()
	_ = yym2174
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2175 := r.ContainerType()
		if yyct2175 == codecSelferValueTypeMap1234 {
			yyl2175 := r.ReadMapStart()
			if yyl2175 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2175, d)
			}
		} else if yyct2175 == codecSelferValueTypeArray1234 {
			yyl2175 := r.ReadArrayStart()
			if yyl2175 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2175, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2176Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2176Slc
	var yyhl2176 bool = l >= 0
	for yyj2176 := 0; ; yyj2176++ {
		if yyhl2176 {
			if yyj2176 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2176Slc = r.DecodeBytes(yys2176Slc, true, true)
		yys2176 := string(yys2176Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2176 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = PodPhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2178 := &x.Conditions
				yym2179 := z.DecBinary()
				_ = yym2179
				if false {
				} else {
					h.decSlicePodCondition((*[]PodCondition)(yyv2178), d)
				}
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "hostIP":
			if r.TryDecodeAsNil() {
				x.HostIP = ""
			} else {
				x.HostIP = string(r.DecodeString())
			}
		case "podIP":
			if r.TryDecodeAsNil() {
				x.PodIP = ""
			} else {
				x.PodIP = string(r.DecodeString())
			}
		case "startTime":
			if r.TryDecodeAsNil() {
				if x.StartTime != nil {
					x.StartTime = nil
				}
			} else {
				if x.StartTime == nil {
					x.StartTime = new(pkg2_unversioned.Time)
				}
				yym2185 := z.DecBinary()
				_ = yym2185
				if false {
				} else if z.HasExtensions() && z.DecExt(x.StartTime) {
				} else if yym2185 {
					z.DecBinaryUnmarshal(x.StartTime)
				} else if !yym2185 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.StartTime)
				} else {
					z.DecFallback(x.StartTime, false)
				}
			}
		case "containerStatuses":
			if r.TryDecodeAsNil() {
				x.ContainerStatuses = nil
			} else {
				yyv2186 := &x.ContainerStatuses
				yym2187 := z.DecBinary()
				_ = yym2187
				if false {
				} else {
					h.decSliceContainerStatus((*[]ContainerStatus)(yyv2186), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2176)
		} // end switch yys2176
	} // end for yyj2176
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2188 int
	var yyb2188 bool
	var yyhl2188 bool = l >= 0
	yyj2188++
	if yyhl2188 {
		yyb2188 = yyj2188 > l
	} else {
		yyb2188 = r.CheckBreak()
	}
	if yyb2188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = PodPhase(r.DecodeString())
	}
	yyj2188++
	if yyhl2188 {
		yyb2188 = yyj2188 > l
	} else {
		yyb2188 = r.CheckBreak()
	}
	if yyb2188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2190 := &x.Conditions
		yym2191 := z.DecBinary()
		_ = yym2191
		if false {
		} else {
			h.decSlicePodCondition((*[]PodCondition)(yyv2190), d)
		}
	}
	yyj2188++
	if yyhl2188 {
		yyb2188 = yyj2188 > l
	} else {
		yyb2188 = r.CheckBreak()
	}
	if yyb2188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj2188++
	if yyhl2188 {
		yyb2188 = yyj2188 > l
	} else {
		yyb2188 = r.CheckBreak()
	}
	if yyb2188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj2188++
	if yyhl2188 {
		yyb2188 = yyj2188 > l
	} else {
		yyb2188 = r.CheckBreak()
	}
	if yyb2188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.HostIP = ""
	} else {
		x.HostIP = string(r.DecodeString())
	}
	yyj2188++
	if yyhl2188 {
		yyb2188 = yyj2188 > l
	} else {
		yyb2188 = r.CheckBreak()
	}
	if yyb2188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodIP = ""
	} else {
		x.PodIP = string(r.DecodeString())
	}
	yyj2188++
	if yyhl2188 {
		yyb2188 = yyj2188 > l
	} else {
		yyb2188 = r.CheckBreak()
	}
	if yyb2188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.StartTime != nil {
			x.StartTime = nil
		}
	} else {
		if x.StartTime == nil {
			x.StartTime = new(pkg2_unversioned.Time)
		}
		yym2197 := z.DecBinary()
		_ = yym2197
		if false {
		} else if z.HasExtensions() && z.DecExt(x.StartTime) {
		} else if yym2197 {
			z.DecBinaryUnmarshal(x.StartTime)
		} else if !yym2197 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.StartTime)
		} else {
			z.DecFallback(x.StartTime, false)
		}
	}
	yyj2188++
	if yyhl2188 {
		yyb2188 = yyj2188 > l
	} else {
		yyb2188 = r.CheckBreak()
	}
	if yyb2188 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerStatuses = nil
	} else {
		yyv2198 := &x.ContainerStatuses
		yym2199 := z.DecBinary()
		_ = yym2199
		if false {
		} else {
			h.decSliceContainerStatus((*[]ContainerStatus)(yyv2198), d)
		}
	}
	for {
		yyj2188++
		if yyhl2188 {
			yyb2188 = yyj2188 > l
		} else {
			yyb2188 = r.CheckBreak()
		}
		if yyb2188 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2188-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodStatusResult) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2200 := z.EncBinary()
		_ = yym2200
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2201 := !z.EncBinary()
			yy2arr2201 := z.EncBasicHandle().StructToArray
			var yyq2201 [4]bool
			_, _, _ = yysep2201, yyq2201, yy2arr2201
			const yyr2201 bool = false
			yyq2201[0] = x.Kind != ""
			yyq2201[1] = x.APIVersion != ""
			yyq2201[2] = true
			yyq2201[3] = true
			var yynn2201 int
			if yyr2201 || yy2arr2201 {
				r.EncodeArrayStart(4)
			} else {
				yynn2201 = 0
				for _, b := range yyq2201 {
					if b {
						yynn2201++
					}
				}
				r.EncodeMapStart(yynn2201)
				yynn2201 = 0
			}
			if yyr2201 || yy2arr2201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2201[0] {
					yym2203 := z.EncBinary()
					_ = yym2203
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2201[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2204 := z.EncBinary()
					_ = yym2204
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2201 || yy2arr2201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2201[1] {
					yym2206 := z.EncBinary()
					_ = yym2206
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2201[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2207 := z.EncBinary()
					_ = yym2207
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2201 || yy2arr2201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2201[2] {
					yy2209 := &x.ObjectMeta
					yy2209.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2201[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2210 := &x.ObjectMeta
					yy2210.CodecEncodeSelf(e)
				}
			}
			if yyr2201 || yy2arr2201 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2201[3] {
					yy2212 := &x.Status
					yy2212.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2201[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2213 := &x.Status
					yy2213.CodecEncodeSelf(e)
				}
			}
			if yyr2201 || yy2arr2201 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodStatusResult) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2214 := z.DecBinary()
	_ = yym2214
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2215 := r.ContainerType()
		if yyct2215 == codecSelferValueTypeMap1234 {
			yyl2215 := r.ReadMapStart()
			if yyl2215 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2215, d)
			}
		} else if yyct2215 == codecSelferValueTypeArray1234 {
			yyl2215 := r.ReadArrayStart()
			if yyl2215 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2215, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodStatusResult) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2216Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2216Slc
	var yyhl2216 bool = l >= 0
	for yyj2216 := 0; ; yyj2216++ {
		if yyhl2216 {
			if yyj2216 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2216Slc = r.DecodeBytes(yys2216Slc, true, true)
		yys2216 := string(yys2216Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2216 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2219 := &x.ObjectMeta
				yyv2219.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2220 := &x.Status
				yyv2220.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2216)
		} // end switch yys2216
	} // end for yyj2216
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodStatusResult) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2221 int
	var yyb2221 bool
	var yyhl2221 bool = l >= 0
	yyj2221++
	if yyhl2221 {
		yyb2221 = yyj2221 > l
	} else {
		yyb2221 = r.CheckBreak()
	}
	if yyb2221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2221++
	if yyhl2221 {
		yyb2221 = yyj2221 > l
	} else {
		yyb2221 = r.CheckBreak()
	}
	if yyb2221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2221++
	if yyhl2221 {
		yyb2221 = yyj2221 > l
	} else {
		yyb2221 = r.CheckBreak()
	}
	if yyb2221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2224 := &x.ObjectMeta
		yyv2224.CodecDecodeSelf(d)
	}
	yyj2221++
	if yyhl2221 {
		yyb2221 = yyj2221 > l
	} else {
		yyb2221 = r.CheckBreak()
	}
	if yyb2221 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2225 := &x.Status
		yyv2225.CodecDecodeSelf(d)
	}
	for {
		yyj2221++
		if yyhl2221 {
			yyb2221 = yyj2221 > l
		} else {
			yyb2221 = r.CheckBreak()
		}
		if yyb2221 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2221-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Pod) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2226 := z.EncBinary()
		_ = yym2226
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2227 := !z.EncBinary()
			yy2arr2227 := z.EncBasicHandle().StructToArray
			var yyq2227 [5]bool
			_, _, _ = yysep2227, yyq2227, yy2arr2227
			const yyr2227 bool = false
			yyq2227[0] = x.Kind != ""
			yyq2227[1] = x.APIVersion != ""
			yyq2227[2] = true
			yyq2227[3] = true
			yyq2227[4] = true
			var yynn2227 int
			if yyr2227 || yy2arr2227 {
				r.EncodeArrayStart(5)
			} else {
				yynn2227 = 0
				for _, b := range yyq2227 {
					if b {
						yynn2227++
					}
				}
				r.EncodeMapStart(yynn2227)
				yynn2227 = 0
			}
			if yyr2227 || yy2arr2227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2227[0] {
					yym2229 := z.EncBinary()
					_ = yym2229
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2227[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2230 := z.EncBinary()
					_ = yym2230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2227 || yy2arr2227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2227[1] {
					yym2232 := z.EncBinary()
					_ = yym2232
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2227[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2233 := z.EncBinary()
					_ = yym2233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2227 || yy2arr2227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2227[2] {
					yy2235 := &x.ObjectMeta
					yy2235.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2227[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2236 := &x.ObjectMeta
					yy2236.CodecEncodeSelf(e)
				}
			}
			if yyr2227 || yy2arr2227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2227[3] {
					yy2238 := &x.Spec
					yy2238.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2227[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2239 := &x.Spec
					yy2239.CodecEncodeSelf(e)
				}
			}
			if yyr2227 || yy2arr2227 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2227[4] {
					yy2241 := &x.Status
					yy2241.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2227[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2242 := &x.Status
					yy2242.CodecEncodeSelf(e)
				}
			}
			if yyr2227 || yy2arr2227 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Pod) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2243 := z.DecBinary()
	_ = yym2243
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2244 := r.ContainerType()
		if yyct2244 == codecSelferValueTypeMap1234 {
			yyl2244 := r.ReadMapStart()
			if yyl2244 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2244, d)
			}
		} else if yyct2244 == codecSelferValueTypeArray1234 {
			yyl2244 := r.ReadArrayStart()
			if yyl2244 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2244, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Pod) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2245Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2245Slc
	var yyhl2245 bool = l >= 0
	for yyj2245 := 0; ; yyj2245++ {
		if yyhl2245 {
			if yyj2245 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2245Slc = r.DecodeBytes(yys2245Slc, true, true)
		yys2245 := string(yys2245Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2245 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2248 := &x.ObjectMeta
				yyv2248.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2249 := &x.Spec
				yyv2249.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = PodStatus{}
			} else {
				yyv2250 := &x.Status
				yyv2250.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2245)
		} // end switch yys2245
	} // end for yyj2245
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Pod) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2251 int
	var yyb2251 bool
	var yyhl2251 bool = l >= 0
	yyj2251++
	if yyhl2251 {
		yyb2251 = yyj2251 > l
	} else {
		yyb2251 = r.CheckBreak()
	}
	if yyb2251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2251++
	if yyhl2251 {
		yyb2251 = yyj2251 > l
	} else {
		yyb2251 = r.CheckBreak()
	}
	if yyb2251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2251++
	if yyhl2251 {
		yyb2251 = yyj2251 > l
	} else {
		yyb2251 = r.CheckBreak()
	}
	if yyb2251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2254 := &x.ObjectMeta
		yyv2254.CodecDecodeSelf(d)
	}
	yyj2251++
	if yyhl2251 {
		yyb2251 = yyj2251 > l
	} else {
		yyb2251 = r.CheckBreak()
	}
	if yyb2251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2255 := &x.Spec
		yyv2255.CodecDecodeSelf(d)
	}
	yyj2251++
	if yyhl2251 {
		yyb2251 = yyj2251 > l
	} else {
		yyb2251 = r.CheckBreak()
	}
	if yyb2251 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = PodStatus{}
	} else {
		yyv2256 := &x.Status
		yyv2256.CodecDecodeSelf(d)
	}
	for {
		yyj2251++
		if yyhl2251 {
			yyb2251 = yyj2251 > l
		} else {
			yyb2251 = r.CheckBreak()
		}
		if yyb2251 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2251-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2257 := z.EncBinary()
		_ = yym2257
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2258 := !z.EncBinary()
			yy2arr2258 := z.EncBasicHandle().StructToArray
			var yyq2258 [2]bool
			_, _, _ = yysep2258, yyq2258, yy2arr2258
			const yyr2258 bool = false
			yyq2258[0] = true
			yyq2258[1] = true
			var yynn2258 int
			if yyr2258 || yy2arr2258 {
				r.EncodeArrayStart(2)
			} else {
				yynn2258 = 0
				for _, b := range yyq2258 {
					if b {
						yynn2258++
					}
				}
				r.EncodeMapStart(yynn2258)
				yynn2258 = 0
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2258[0] {
					yy2260 := &x.ObjectMeta
					yy2260.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2258[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2261 := &x.ObjectMeta
					yy2261.CodecEncodeSelf(e)
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2258[1] {
					yy2263 := &x.Spec
					yy2263.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2258[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2264 := &x.Spec
					yy2264.CodecEncodeSelf(e)
				}
			}
			if yyr2258 || yy2arr2258 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2265 := z.DecBinary()
	_ = yym2265
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2266 := r.ContainerType()
		if yyct2266 == codecSelferValueTypeMap1234 {
			yyl2266 := r.ReadMapStart()
			if yyl2266 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2266, d)
			}
		} else if yyct2266 == codecSelferValueTypeArray1234 {
			yyl2266 := r.ReadArrayStart()
			if yyl2266 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2266, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2267Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2267Slc
	var yyhl2267 bool = l >= 0
	for yyj2267 := 0; ; yyj2267++ {
		if yyhl2267 {
			if yyj2267 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2267Slc = r.DecodeBytes(yys2267Slc, true, true)
		yys2267 := string(yys2267Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2267 {
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2268 := &x.ObjectMeta
				yyv2268.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = PodSpec{}
			} else {
				yyv2269 := &x.Spec
				yyv2269.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2267)
		} // end switch yys2267
	} // end for yyj2267
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2270 int
	var yyb2270 bool
	var yyhl2270 bool = l >= 0
	yyj2270++
	if yyhl2270 {
		yyb2270 = yyj2270 > l
	} else {
		yyb2270 = r.CheckBreak()
	}
	if yyb2270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2271 := &x.ObjectMeta
		yyv2271.CodecDecodeSelf(d)
	}
	yyj2270++
	if yyhl2270 {
		yyb2270 = yyj2270 > l
	} else {
		yyb2270 = r.CheckBreak()
	}
	if yyb2270 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = PodSpec{}
	} else {
		yyv2272 := &x.Spec
		yyv2272.CodecDecodeSelf(d)
	}
	for {
		yyj2270++
		if yyhl2270 {
			yyb2270 = yyj2270 > l
		} else {
			yyb2270 = r.CheckBreak()
		}
		if yyb2270 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2270-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplate) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2273 := z.EncBinary()
		_ = yym2273
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2274 := !z.EncBinary()
			yy2arr2274 := z.EncBasicHandle().StructToArray
			var yyq2274 [4]bool
			_, _, _ = yysep2274, yyq2274, yy2arr2274
			const yyr2274 bool = false
			yyq2274[0] = x.Kind != ""
			yyq2274[1] = x.APIVersion != ""
			yyq2274[2] = true
			yyq2274[3] = true
			var yynn2274 int
			if yyr2274 || yy2arr2274 {
				r.EncodeArrayStart(4)
			} else {
				yynn2274 = 0
				for _, b := range yyq2274 {
					if b {
						yynn2274++
					}
				}
				r.EncodeMapStart(yynn2274)
				yynn2274 = 0
			}
			if yyr2274 || yy2arr2274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2274[0] {
					yym2276 := z.EncBinary()
					_ = yym2276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2274[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2277 := z.EncBinary()
					_ = yym2277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2274 || yy2arr2274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2274[1] {
					yym2279 := z.EncBinary()
					_ = yym2279
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2274[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2280 := z.EncBinary()
					_ = yym2280
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2274 || yy2arr2274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2274[2] {
					yy2282 := &x.ObjectMeta
					yy2282.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2274[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2283 := &x.ObjectMeta
					yy2283.CodecEncodeSelf(e)
				}
			}
			if yyr2274 || yy2arr2274 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2274[3] {
					yy2285 := &x.Template
					yy2285.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2274[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2286 := &x.Template
					yy2286.CodecEncodeSelf(e)
				}
			}
			if yyr2274 || yy2arr2274 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplate) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2287 := z.DecBinary()
	_ = yym2287
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2288 := r.ContainerType()
		if yyct2288 == codecSelferValueTypeMap1234 {
			yyl2288 := r.ReadMapStart()
			if yyl2288 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2288, d)
			}
		} else if yyct2288 == codecSelferValueTypeArray1234 {
			yyl2288 := r.ReadArrayStart()
			if yyl2288 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2288, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplate) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2289Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2289Slc
	var yyhl2289 bool = l >= 0
	for yyj2289 := 0; ; yyj2289++ {
		if yyhl2289 {
			if yyj2289 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2289Slc = r.DecodeBytes(yys2289Slc, true, true)
		yys2289 := string(yys2289Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2289 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2292 := &x.ObjectMeta
				yyv2292.CodecDecodeSelf(d)
			}
		case "template":
			if r.TryDecodeAsNil() {
				x.Template = PodTemplateSpec{}
			} else {
				yyv2293 := &x.Template
				yyv2293.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2289)
		} // end switch yys2289
	} // end for yyj2289
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplate) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2294 int
	var yyb2294 bool
	var yyhl2294 bool = l >= 0
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2297 := &x.ObjectMeta
		yyv2297.CodecDecodeSelf(d)
	}
	yyj2294++
	if yyhl2294 {
		yyb2294 = yyj2294 > l
	} else {
		yyb2294 = r.CheckBreak()
	}
	if yyb2294 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Template = PodTemplateSpec{}
	} else {
		yyv2298 := &x.Template
		yyv2298.CodecDecodeSelf(d)
	}
	for {
		yyj2294++
		if yyhl2294 {
			yyb2294 = yyj2294 > l
		} else {
			yyb2294 = r.CheckBreak()
		}
		if yyb2294 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2294-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodTemplateList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2299 := z.EncBinary()
		_ = yym2299
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2300 := !z.EncBinary()
			yy2arr2300 := z.EncBasicHandle().StructToArray
			var yyq2300 [4]bool
			_, _, _ = yysep2300, yyq2300, yy2arr2300
			const yyr2300 bool = false
			yyq2300[0] = x.Kind != ""
			yyq2300[1] = x.APIVersion != ""
			yyq2300[2] = true
			var yynn2300 int
			if yyr2300 || yy2arr2300 {
				r.EncodeArrayStart(4)
			} else {
				yynn2300 = 1
				for _, b := range yyq2300 {
					if b {
						yynn2300++
					}
				}
				r.EncodeMapStart(yynn2300)
				yynn2300 = 0
			}
			if yyr2300 || yy2arr2300 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2300[0] {
					yym2302 := z.EncBinary()
					_ = yym2302
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2300[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2303 := z.EncBinary()
					_ = yym2303
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2300 || yy2arr2300 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2300[1] {
					yym2305 := z.EncBinary()
					_ = yym2305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2300[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2306 := z.EncBinary()
					_ = yym2306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2300 || yy2arr2300 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2300[2] {
					yy2308 := &x.ListMeta
					yym2309 := z.EncBinary()
					_ = yym2309
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2308) {
					} else {
						z.EncFallback(yy2308)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2300[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2310 := &x.ListMeta
					yym2311 := z.EncBinary()
					_ = yym2311
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2310) {
					} else {
						z.EncFallback(yy2310)
					}
				}
			}
			if yyr2300 || yy2arr2300 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2313 := z.EncBinary()
					_ = yym2313
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2314 := z.EncBinary()
					_ = yym2314
					if false {
					} else {
						h.encSlicePodTemplate(([]PodTemplate)(x.Items), e)
					}
				}
			}
			if yyr2300 || yy2arr2300 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodTemplateList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2315 := z.DecBinary()
	_ = yym2315
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2316 := r.ContainerType()
		if yyct2316 == codecSelferValueTypeMap1234 {
			yyl2316 := r.ReadMapStart()
			if yyl2316 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2316, d)
			}
		} else if yyct2316 == codecSelferValueTypeArray1234 {
			yyl2316 := r.ReadArrayStart()
			if yyl2316 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2316, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodTemplateList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2317Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2317Slc
	var yyhl2317 bool = l >= 0
	for yyj2317 := 0; ; yyj2317++ {
		if yyhl2317 {
			if yyj2317 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2317Slc = r.DecodeBytes(yys2317Slc, true, true)
		yys2317 := string(yys2317Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2317 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2320 := &x.ListMeta
				yym2321 := z.DecBinary()
				_ = yym2321
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2320) {
				} else {
					z.DecFallback(yyv2320, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2322 := &x.Items
				yym2323 := z.DecBinary()
				_ = yym2323
				if false {
				} else {
					h.decSlicePodTemplate((*[]PodTemplate)(yyv2322), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2317)
		} // end switch yys2317
	} // end for yyj2317
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodTemplateList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2324 int
	var yyb2324 bool
	var yyhl2324 bool = l >= 0
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2327 := &x.ListMeta
		yym2328 := z.DecBinary()
		_ = yym2328
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2327) {
		} else {
			z.DecFallback(yyv2327, false)
		}
	}
	yyj2324++
	if yyhl2324 {
		yyb2324 = yyj2324 > l
	} else {
		yyb2324 = r.CheckBreak()
	}
	if yyb2324 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2329 := &x.Items
		yym2330 := z.DecBinary()
		_ = yym2330
		if false {
		} else {
			h.decSlicePodTemplate((*[]PodTemplate)(yyv2329), d)
		}
	}
	for {
		yyj2324++
		if yyhl2324 {
			yyb2324 = yyj2324 > l
		} else {
			yyb2324 = r.CheckBreak()
		}
		if yyb2324 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2324-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2331 := z.EncBinary()
		_ = yym2331
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2332 := !z.EncBinary()
			yy2arr2332 := z.EncBasicHandle().StructToArray
			var yyq2332 [3]bool
			_, _, _ = yysep2332, yyq2332, yy2arr2332
			const yyr2332 bool = false
			yyq2332[2] = x.Template != nil
			var yynn2332 int
			if yyr2332 || yy2arr2332 {
				r.EncodeArrayStart(3)
			} else {
				yynn2332 = 2
				for _, b := range yyq2332 {
					if b {
						yynn2332++
					}
				}
				r.EncodeMapStart(yynn2332)
				yynn2332 = 0
			}
			if yyr2332 || yy2arr2332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2334 := z.EncBinary()
				_ = yym2334
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2335 := z.EncBinary()
				_ = yym2335
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2332 || yy2arr2332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2337 := z.EncBinary()
					_ = yym2337
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2338 := z.EncBinary()
					_ = yym2338
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2332 || yy2arr2332 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2332[2] {
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2332[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("template"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Template == nil {
						r.EncodeNil()
					} else {
						x.Template.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2332 || yy2arr2332 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2340 := z.DecBinary()
	_ = yym2340
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2341 := r.ContainerType()
		if yyct2341 == codecSelferValueTypeMap1234 {
			yyl2341 := r.ReadMapStart()
			if yyl2341 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2341, d)
			}
		} else if yyct2341 == codecSelferValueTypeArray1234 {
			yyl2341 := r.ReadArrayStart()
			if yyl2341 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2341, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2342Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2342Slc
	var yyhl2342 bool = l >= 0
	for yyj2342 := 0; ; yyj2342++ {
		if yyhl2342 {
			if yyj2342 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2342Slc = r.DecodeBytes(yys2342Slc, true, true)
		yys2342 := string(yys2342Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2342 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2344 := &x.Selector
				yym2345 := z.DecBinary()
				_ = yym2345
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2344, false, d)
				}
			}
		case "template":
			if r.TryDecodeAsNil() {
				if x.Template != nil {
					x.Template = nil
				}
			} else {
				if x.Template == nil {
					x.Template = new(PodTemplateSpec)
				}
				x.Template.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2342)
		} // end switch yys2342
	} // end for yyj2342
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2347 int
	var yyb2347 bool
	var yyhl2347 bool = l >= 0
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2349 := &x.Selector
		yym2350 := z.DecBinary()
		_ = yym2350
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2349, false, d)
		}
	}
	yyj2347++
	if yyhl2347 {
		yyb2347 = yyj2347 > l
	} else {
		yyb2347 = r.CheckBreak()
	}
	if yyb2347 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Template != nil {
			x.Template = nil
		}
	} else {
		if x.Template == nil {
			x.Template = new(PodTemplateSpec)
		}
		x.Template.CodecDecodeSelf(d)
	}
	for {
		yyj2347++
		if yyhl2347 {
			yyb2347 = yyj2347 > l
		} else {
			yyb2347 = r.CheckBreak()
		}
		if yyb2347 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2347-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2352 := z.EncBinary()
		_ = yym2352
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2353 := !z.EncBinary()
			yy2arr2353 := z.EncBasicHandle().StructToArray
			var yyq2353 [3]bool
			_, _, _ = yysep2353, yyq2353, yy2arr2353
			const yyr2353 bool = false
			yyq2353[1] = x.FullyLabeledReplicas != 0
			yyq2353[2] = x.ObservedGeneration != 0
			var yynn2353 int
			if yyr2353 || yy2arr2353 {
				r.EncodeArrayStart(3)
			} else {
				yynn2353 = 1
				for _, b := range yyq2353 {
					if b {
						yynn2353++
					}
				}
				r.EncodeMapStart(yynn2353)
				yynn2353 = 0
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2355 := z.EncBinary()
				_ = yym2355
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("replicas"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2356 := z.EncBinary()
				_ = yym2356
				if false {
				} else {
					r.EncodeInt(int64(x.Replicas))
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2353[1] {
					yym2358 := z.EncBinary()
					_ = yym2358
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2353[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fullyLabeledReplicas"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2359 := z.EncBinary()
					_ = yym2359
					if false {
					} else {
						r.EncodeInt(int64(x.FullyLabeledReplicas))
					}
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2353[2] {
					yym2361 := z.EncBinary()
					_ = yym2361
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq2353[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("observedGeneration"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2362 := z.EncBinary()
					_ = yym2362
					if false {
					} else {
						r.EncodeInt(int64(x.ObservedGeneration))
					}
				}
			}
			if yyr2353 || yy2arr2353 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2363 := z.DecBinary()
	_ = yym2363
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2364 := r.ContainerType()
		if yyct2364 == codecSelferValueTypeMap1234 {
			yyl2364 := r.ReadMapStart()
			if yyl2364 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2364, d)
			}
		} else if yyct2364 == codecSelferValueTypeArray1234 {
			yyl2364 := r.ReadArrayStart()
			if yyl2364 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2364, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2365Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2365Slc
	var yyhl2365 bool = l >= 0
	for yyj2365 := 0; ; yyj2365++ {
		if yyhl2365 {
			if yyj2365 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2365Slc = r.DecodeBytes(yys2365Slc, true, true)
		yys2365 := string(yys2365Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2365 {
		case "replicas":
			if r.TryDecodeAsNil() {
				x.Replicas = 0
			} else {
				x.Replicas = int32(r.DecodeInt(32))
			}
		case "fullyLabeledReplicas":
			if r.TryDecodeAsNil() {
				x.FullyLabeledReplicas = 0
			} else {
				x.FullyLabeledReplicas = int32(r.DecodeInt(32))
			}
		case "observedGeneration":
			if r.TryDecodeAsNil() {
				x.ObservedGeneration = 0
			} else {
				x.ObservedGeneration = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2365)
		} // end switch yys2365
	} // end for yyj2365
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2369 int
	var yyb2369 bool
	var yyhl2369 bool = l >= 0
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Replicas = 0
	} else {
		x.Replicas = int32(r.DecodeInt(32))
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FullyLabeledReplicas = 0
	} else {
		x.FullyLabeledReplicas = int32(r.DecodeInt(32))
	}
	yyj2369++
	if yyhl2369 {
		yyb2369 = yyj2369 > l
	} else {
		yyb2369 = r.CheckBreak()
	}
	if yyb2369 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObservedGeneration = 0
	} else {
		x.ObservedGeneration = int64(r.DecodeInt(64))
	}
	for {
		yyj2369++
		if yyhl2369 {
			yyb2369 = yyj2369 > l
		} else {
			yyb2369 = r.CheckBreak()
		}
		if yyb2369 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2369-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationController) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2373 := z.EncBinary()
		_ = yym2373
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2374 := !z.EncBinary()
			yy2arr2374 := z.EncBasicHandle().StructToArray
			var yyq2374 [5]bool
			_, _, _ = yysep2374, yyq2374, yy2arr2374
			const yyr2374 bool = false
			yyq2374[0] = x.Kind != ""
			yyq2374[1] = x.APIVersion != ""
			yyq2374[2] = true
			yyq2374[3] = true
			yyq2374[4] = true
			var yynn2374 int
			if yyr2374 || yy2arr2374 {
				r.EncodeArrayStart(5)
			} else {
				yynn2374 = 0
				for _, b := range yyq2374 {
					if b {
						yynn2374++
					}
				}
				r.EncodeMapStart(yynn2374)
				yynn2374 = 0
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2374[0] {
					yym2376 := z.EncBinary()
					_ = yym2376
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2374[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2377 := z.EncBinary()
					_ = yym2377
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2374[1] {
					yym2379 := z.EncBinary()
					_ = yym2379
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2374[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2380 := z.EncBinary()
					_ = yym2380
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2374[2] {
					yy2382 := &x.ObjectMeta
					yy2382.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2374[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2383 := &x.ObjectMeta
					yy2383.CodecEncodeSelf(e)
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2374[3] {
					yy2385 := &x.Spec
					yy2385.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2374[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2386 := &x.Spec
					yy2386.CodecEncodeSelf(e)
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2374[4] {
					yy2388 := &x.Status
					yy2388.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2374[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2389 := &x.Status
					yy2389.CodecEncodeSelf(e)
				}
			}
			if yyr2374 || yy2arr2374 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationController) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2390 := z.DecBinary()
	_ = yym2390
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2391 := r.ContainerType()
		if yyct2391 == codecSelferValueTypeMap1234 {
			yyl2391 := r.ReadMapStart()
			if yyl2391 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2391, d)
			}
		} else if yyct2391 == codecSelferValueTypeArray1234 {
			yyl2391 := r.ReadArrayStart()
			if yyl2391 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2391, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationController) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2392Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2392Slc
	var yyhl2392 bool = l >= 0
	for yyj2392 := 0; ; yyj2392++ {
		if yyhl2392 {
			if yyj2392 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2392Slc = r.DecodeBytes(yys2392Slc, true, true)
		yys2392 := string(yys2392Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2392 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2395 := &x.ObjectMeta
				yyv2395.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ReplicationControllerSpec{}
			} else {
				yyv2396 := &x.Spec
				yyv2396.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ReplicationControllerStatus{}
			} else {
				yyv2397 := &x.Status
				yyv2397.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2392)
		} // end switch yys2392
	} // end for yyj2392
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationController) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2398 int
	var yyb2398 bool
	var yyhl2398 bool = l >= 0
	yyj2398++
	if yyhl2398 {
		yyb2398 = yyj2398 > l
	} else {
		yyb2398 = r.CheckBreak()
	}
	if yyb2398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2398++
	if yyhl2398 {
		yyb2398 = yyj2398 > l
	} else {
		yyb2398 = r.CheckBreak()
	}
	if yyb2398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2398++
	if yyhl2398 {
		yyb2398 = yyj2398 > l
	} else {
		yyb2398 = r.CheckBreak()
	}
	if yyb2398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2401 := &x.ObjectMeta
		yyv2401.CodecDecodeSelf(d)
	}
	yyj2398++
	if yyhl2398 {
		yyb2398 = yyj2398 > l
	} else {
		yyb2398 = r.CheckBreak()
	}
	if yyb2398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ReplicationControllerSpec{}
	} else {
		yyv2402 := &x.Spec
		yyv2402.CodecDecodeSelf(d)
	}
	yyj2398++
	if yyhl2398 {
		yyb2398 = yyj2398 > l
	} else {
		yyb2398 = r.CheckBreak()
	}
	if yyb2398 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ReplicationControllerStatus{}
	} else {
		yyv2403 := &x.Status
		yyv2403.CodecDecodeSelf(d)
	}
	for {
		yyj2398++
		if yyhl2398 {
			yyb2398 = yyj2398 > l
		} else {
			yyb2398 = r.CheckBreak()
		}
		if yyb2398 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2398-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ReplicationControllerList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2404 := z.EncBinary()
		_ = yym2404
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2405 := !z.EncBinary()
			yy2arr2405 := z.EncBasicHandle().StructToArray
			var yyq2405 [4]bool
			_, _, _ = yysep2405, yyq2405, yy2arr2405
			const yyr2405 bool = false
			yyq2405[0] = x.Kind != ""
			yyq2405[1] = x.APIVersion != ""
			yyq2405[2] = true
			var yynn2405 int
			if yyr2405 || yy2arr2405 {
				r.EncodeArrayStart(4)
			} else {
				yynn2405 = 1
				for _, b := range yyq2405 {
					if b {
						yynn2405++
					}
				}
				r.EncodeMapStart(yynn2405)
				yynn2405 = 0
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2405[0] {
					yym2407 := z.EncBinary()
					_ = yym2407
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2405[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2408 := z.EncBinary()
					_ = yym2408
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2405[1] {
					yym2410 := z.EncBinary()
					_ = yym2410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2405[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2411 := z.EncBinary()
					_ = yym2411
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2405[2] {
					yy2413 := &x.ListMeta
					yym2414 := z.EncBinary()
					_ = yym2414
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2413) {
					} else {
						z.EncFallback(yy2413)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2405[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2415 := &x.ListMeta
					yym2416 := z.EncBinary()
					_ = yym2416
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2415) {
					} else {
						z.EncFallback(yy2415)
					}
				}
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2418 := z.EncBinary()
					_ = yym2418
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2419 := z.EncBinary()
					_ = yym2419
					if false {
					} else {
						h.encSliceReplicationController(([]ReplicationController)(x.Items), e)
					}
				}
			}
			if yyr2405 || yy2arr2405 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ReplicationControllerList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2420 := z.DecBinary()
	_ = yym2420
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2421 := r.ContainerType()
		if yyct2421 == codecSelferValueTypeMap1234 {
			yyl2421 := r.ReadMapStart()
			if yyl2421 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2421, d)
			}
		} else if yyct2421 == codecSelferValueTypeArray1234 {
			yyl2421 := r.ReadArrayStart()
			if yyl2421 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2421, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ReplicationControllerList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2422Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2422Slc
	var yyhl2422 bool = l >= 0
	for yyj2422 := 0; ; yyj2422++ {
		if yyhl2422 {
			if yyj2422 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2422Slc = r.DecodeBytes(yys2422Slc, true, true)
		yys2422 := string(yys2422Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2422 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2425 := &x.ListMeta
				yym2426 := z.DecBinary()
				_ = yym2426
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2425) {
				} else {
					z.DecFallback(yyv2425, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2427 := &x.Items
				yym2428 := z.DecBinary()
				_ = yym2428
				if false {
				} else {
					h.decSliceReplicationController((*[]ReplicationController)(yyv2427), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2422)
		} // end switch yys2422
	} // end for yyj2422
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ReplicationControllerList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2429 int
	var yyb2429 bool
	var yyhl2429 bool = l >= 0
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2432 := &x.ListMeta
		yym2433 := z.DecBinary()
		_ = yym2433
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2432) {
		} else {
			z.DecFallback(yyv2432, false)
		}
	}
	yyj2429++
	if yyhl2429 {
		yyb2429 = yyj2429 > l
	} else {
		yyb2429 = r.CheckBreak()
	}
	if yyb2429 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2434 := &x.Items
		yym2435 := z.DecBinary()
		_ = yym2435
		if false {
		} else {
			h.decSliceReplicationController((*[]ReplicationController)(yyv2434), d)
		}
	}
	for {
		yyj2429++
		if yyhl2429 {
			yyb2429 = yyj2429 > l
		} else {
			yyb2429 = r.CheckBreak()
		}
		if yyb2429 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2429-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2436 := z.EncBinary()
		_ = yym2436
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2437 := !z.EncBinary()
			yy2arr2437 := z.EncBasicHandle().StructToArray
			var yyq2437 [4]bool
			_, _, _ = yysep2437, yyq2437, yy2arr2437
			const yyr2437 bool = false
			yyq2437[0] = x.Kind != ""
			yyq2437[1] = x.APIVersion != ""
			yyq2437[2] = true
			var yynn2437 int
			if yyr2437 || yy2arr2437 {
				r.EncodeArrayStart(4)
			} else {
				yynn2437 = 1
				for _, b := range yyq2437 {
					if b {
						yynn2437++
					}
				}
				r.EncodeMapStart(yynn2437)
				yynn2437 = 0
			}
			if yyr2437 || yy2arr2437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2437[0] {
					yym2439 := z.EncBinary()
					_ = yym2439
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2437[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2440 := z.EncBinary()
					_ = yym2440
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2437 || yy2arr2437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2437[1] {
					yym2442 := z.EncBinary()
					_ = yym2442
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2437[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2443 := z.EncBinary()
					_ = yym2443
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2437 || yy2arr2437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2437[2] {
					yy2445 := &x.ListMeta
					yym2446 := z.EncBinary()
					_ = yym2446
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2445) {
					} else {
						z.EncFallback(yy2445)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2437[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2447 := &x.ListMeta
					yym2448 := z.EncBinary()
					_ = yym2448
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2447) {
					} else {
						z.EncFallback(yy2447)
					}
				}
			}
			if yyr2437 || yy2arr2437 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2450 := z.EncBinary()
					_ = yym2450
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2451 := z.EncBinary()
					_ = yym2451
					if false {
					} else {
						h.encSliceService(([]Service)(x.Items), e)
					}
				}
			}
			if yyr2437 || yy2arr2437 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2452 := z.DecBinary()
	_ = yym2452
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2453 := r.ContainerType()
		if yyct2453 == codecSelferValueTypeMap1234 {
			yyl2453 := r.ReadMapStart()
			if yyl2453 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2453, d)
			}
		} else if yyct2453 == codecSelferValueTypeArray1234 {
			yyl2453 := r.ReadArrayStart()
			if yyl2453 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2453, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2454Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2454Slc
	var yyhl2454 bool = l >= 0
	for yyj2454 := 0; ; yyj2454++ {
		if yyhl2454 {
			if yyj2454 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2454Slc = r.DecodeBytes(yys2454Slc, true, true)
		yys2454 := string(yys2454Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2454 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2457 := &x.ListMeta
				yym2458 := z.DecBinary()
				_ = yym2458
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2457) {
				} else {
					z.DecFallback(yyv2457, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2459 := &x.Items
				yym2460 := z.DecBinary()
				_ = yym2460
				if false {
				} else {
					h.decSliceService((*[]Service)(yyv2459), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2454)
		} // end switch yys2454
	} // end for yyj2454
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2461 int
	var yyb2461 bool
	var yyhl2461 bool = l >= 0
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2464 := &x.ListMeta
		yym2465 := z.DecBinary()
		_ = yym2465
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2464) {
		} else {
			z.DecFallback(yyv2464, false)
		}
	}
	yyj2461++
	if yyhl2461 {
		yyb2461 = yyj2461 > l
	} else {
		yyb2461 = r.CheckBreak()
	}
	if yyb2461 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2466 := &x.Items
		yym2467 := z.DecBinary()
		_ = yym2467
		if false {
		} else {
			h.decSliceService((*[]Service)(yyv2466), d)
		}
	}
	for {
		yyj2461++
		if yyhl2461 {
			yyb2461 = yyj2461 > l
		} else {
			yyb2461 = r.CheckBreak()
		}
		if yyb2461 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2461-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ServiceAffinity) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2468 := z.EncBinary()
	_ = yym2468
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceAffinity) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2469 := z.DecBinary()
	_ = yym2469
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ServiceType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2470 := z.EncBinary()
	_ = yym2470
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ServiceType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2471 := z.DecBinary()
	_ = yym2471
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ServiceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2472 := z.EncBinary()
		_ = yym2472
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2473 := !z.EncBinary()
			yy2arr2473 := z.EncBasicHandle().StructToArray
			var yyq2473 [1]bool
			_, _, _ = yysep2473, yyq2473, yy2arr2473
			const yyr2473 bool = false
			yyq2473[0] = true
			var yynn2473 int
			if yyr2473 || yy2arr2473 {
				r.EncodeArrayStart(1)
			} else {
				yynn2473 = 0
				for _, b := range yyq2473 {
					if b {
						yynn2473++
					}
				}
				r.EncodeMapStart(yynn2473)
				yynn2473 = 0
			}
			if yyr2473 || yy2arr2473 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2473[0] {
					yy2475 := &x.LoadBalancer
					yy2475.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2473[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancer"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2476 := &x.LoadBalancer
					yy2476.CodecEncodeSelf(e)
				}
			}
			if yyr2473 || yy2arr2473 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2477 := z.DecBinary()
	_ = yym2477
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2478 := r.ContainerType()
		if yyct2478 == codecSelferValueTypeMap1234 {
			yyl2478 := r.ReadMapStart()
			if yyl2478 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2478, d)
			}
		} else if yyct2478 == codecSelferValueTypeArray1234 {
			yyl2478 := r.ReadArrayStart()
			if yyl2478 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2478, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2479Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2479Slc
	var yyhl2479 bool = l >= 0
	for yyj2479 := 0; ; yyj2479++ {
		if yyhl2479 {
			if yyj2479 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2479Slc = r.DecodeBytes(yys2479Slc, true, true)
		yys2479 := string(yys2479Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2479 {
		case "loadBalancer":
			if r.TryDecodeAsNil() {
				x.LoadBalancer = LoadBalancerStatus{}
			} else {
				yyv2480 := &x.LoadBalancer
				yyv2480.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2479)
		} // end switch yys2479
	} // end for yyj2479
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2481 int
	var yyb2481 bool
	var yyhl2481 bool = l >= 0
	yyj2481++
	if yyhl2481 {
		yyb2481 = yyj2481 > l
	} else {
		yyb2481 = r.CheckBreak()
	}
	if yyb2481 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancer = LoadBalancerStatus{}
	} else {
		yyv2482 := &x.LoadBalancer
		yyv2482.CodecDecodeSelf(d)
	}
	for {
		yyj2481++
		if yyhl2481 {
			yyb2481 = yyj2481 > l
		} else {
			yyb2481 = r.CheckBreak()
		}
		if yyb2481 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2481-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2483 := z.EncBinary()
		_ = yym2483
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2484 := !z.EncBinary()
			yy2arr2484 := z.EncBasicHandle().StructToArray
			var yyq2484 [1]bool
			_, _, _ = yysep2484, yyq2484, yy2arr2484
			const yyr2484 bool = false
			yyq2484[0] = len(x.Ingress) != 0
			var yynn2484 int
			if yyr2484 || yy2arr2484 {
				r.EncodeArrayStart(1)
			} else {
				yynn2484 = 0
				for _, b := range yyq2484 {
					if b {
						yynn2484++
					}
				}
				r.EncodeMapStart(yynn2484)
				yynn2484 = 0
			}
			if yyr2484 || yy2arr2484 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2484[0] {
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2486 := z.EncBinary()
						_ = yym2486
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2484[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ingress"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Ingress == nil {
						r.EncodeNil()
					} else {
						yym2487 := z.EncBinary()
						_ = yym2487
						if false {
						} else {
							h.encSliceLoadBalancerIngress(([]LoadBalancerIngress)(x.Ingress), e)
						}
					}
				}
			}
			if yyr2484 || yy2arr2484 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2488 := z.DecBinary()
	_ = yym2488
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2489 := r.ContainerType()
		if yyct2489 == codecSelferValueTypeMap1234 {
			yyl2489 := r.ReadMapStart()
			if yyl2489 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2489, d)
			}
		} else if yyct2489 == codecSelferValueTypeArray1234 {
			yyl2489 := r.ReadArrayStart()
			if yyl2489 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2489, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2490Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2490Slc
	var yyhl2490 bool = l >= 0
	for yyj2490 := 0; ; yyj2490++ {
		if yyhl2490 {
			if yyj2490 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2490Slc = r.DecodeBytes(yys2490Slc, true, true)
		yys2490 := string(yys2490Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2490 {
		case "ingress":
			if r.TryDecodeAsNil() {
				x.Ingress = nil
			} else {
				yyv2491 := &x.Ingress
				yym2492 := z.DecBinary()
				_ = yym2492
				if false {
				} else {
					h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2491), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2490)
		} // end switch yys2490
	} // end for yyj2490
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2493 int
	var yyb2493 bool
	var yyhl2493 bool = l >= 0
	yyj2493++
	if yyhl2493 {
		yyb2493 = yyj2493 > l
	} else {
		yyb2493 = r.CheckBreak()
	}
	if yyb2493 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ingress = nil
	} else {
		yyv2494 := &x.Ingress
		yym2495 := z.DecBinary()
		_ = yym2495
		if false {
		} else {
			h.decSliceLoadBalancerIngress((*[]LoadBalancerIngress)(yyv2494), d)
		}
	}
	for {
		yyj2493++
		if yyhl2493 {
			yyb2493 = yyj2493 > l
		} else {
			yyb2493 = r.CheckBreak()
		}
		if yyb2493 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2493-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LoadBalancerIngress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2496 := z.EncBinary()
		_ = yym2496
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2497 := !z.EncBinary()
			yy2arr2497 := z.EncBasicHandle().StructToArray
			var yyq2497 [2]bool
			_, _, _ = yysep2497, yyq2497, yy2arr2497
			const yyr2497 bool = false
			yyq2497[0] = x.IP != ""
			yyq2497[1] = x.Hostname != ""
			var yynn2497 int
			if yyr2497 || yy2arr2497 {
				r.EncodeArrayStart(2)
			} else {
				yynn2497 = 0
				for _, b := range yyq2497 {
					if b {
						yynn2497++
					}
				}
				r.EncodeMapStart(yynn2497)
				yynn2497 = 0
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2497[0] {
					yym2499 := z.EncBinary()
					_ = yym2499
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2497[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("ip"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2500 := z.EncBinary()
					_ = yym2500
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.IP))
					}
				}
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2497[1] {
					yym2502 := z.EncBinary()
					_ = yym2502
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2497[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2503 := z.EncBinary()
					_ = yym2503
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2497 || yy2arr2497 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LoadBalancerIngress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2504 := z.DecBinary()
	_ = yym2504
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2505 := r.ContainerType()
		if yyct2505 == codecSelferValueTypeMap1234 {
			yyl2505 := r.ReadMapStart()
			if yyl2505 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2505, d)
			}
		} else if yyct2505 == codecSelferValueTypeArray1234 {
			yyl2505 := r.ReadArrayStart()
			if yyl2505 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2505, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LoadBalancerIngress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2506Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2506Slc
	var yyhl2506 bool = l >= 0
	for yyj2506 := 0; ; yyj2506++ {
		if yyhl2506 {
			if yyj2506 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2506Slc = r.DecodeBytes(yys2506Slc, true, true)
		yys2506 := string(yys2506Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2506 {
		case "ip":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2506)
		} // end switch yys2506
	} // end for yyj2506
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LoadBalancerIngress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2509 int
	var yyb2509 bool
	var yyhl2509 bool = l >= 0
	yyj2509++
	if yyhl2509 {
		yyb2509 = yyj2509 > l
	} else {
		yyb2509 = r.CheckBreak()
	}
	if yyb2509 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2509++
	if yyhl2509 {
		yyb2509 = yyj2509 > l
	} else {
		yyb2509 = r.CheckBreak()
	}
	if yyb2509 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	for {
		yyj2509++
		if yyhl2509 {
			yyb2509 = yyj2509 > l
		} else {
			yyb2509 = r.CheckBreak()
		}
		if yyb2509 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2509-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2512 := z.EncBinary()
		_ = yym2512
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2513 := !z.EncBinary()
			yy2arr2513 := z.EncBasicHandle().StructToArray
			var yyq2513 [8]bool
			_, _, _ = yysep2513, yyq2513, yy2arr2513
			const yyr2513 bool = false
			yyq2513[0] = x.Type != ""
			yyq2513[3] = x.ClusterIP != ""
			yyq2513[4] = len(x.ExternalIPs) != 0
			yyq2513[5] = x.LoadBalancerIP != ""
			yyq2513[6] = x.SessionAffinity != ""
			yyq2513[7] = len(x.LoadBalancerSourceRanges) != 0
			var yynn2513 int
			if yyr2513 || yy2arr2513 {
				r.EncodeArrayStart(8)
			} else {
				yynn2513 = 2
				for _, b := range yyq2513 {
					if b {
						yynn2513++
					}
				}
				r.EncodeMapStart(yynn2513)
				yynn2513 = 0
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2513[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2513[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2516 := z.EncBinary()
					_ = yym2516
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2517 := z.EncBinary()
					_ = yym2517
					if false {
					} else {
						h.encSliceServicePort(([]ServicePort)(x.Ports), e)
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2519 := z.EncBinary()
					_ = yym2519
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("selector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Selector == nil {
					r.EncodeNil()
				} else {
					yym2520 := z.EncBinary()
					_ = yym2520
					if false {
					} else {
						z.F.EncMapStringStringV(x.Selector, false, e)
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2513[3] {
					yym2522 := z.EncBinary()
					_ = yym2522
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2513[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("clusterIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2523 := z.EncBinary()
					_ = yym2523
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ClusterIP))
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2513[4] {
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2525 := z.EncBinary()
						_ = yym2525
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2513[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalIPs"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ExternalIPs == nil {
						r.EncodeNil()
					} else {
						yym2526 := z.EncBinary()
						_ = yym2526
						if false {
						} else {
							z.F.EncSliceStringV(x.ExternalIPs, false, e)
						}
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2513[5] {
					yym2528 := z.EncBinary()
					_ = yym2528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2513[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerIP"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2529 := z.EncBinary()
					_ = yym2529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.LoadBalancerIP))
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2513[6] {
					x.SessionAffinity.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2513[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sessionAffinity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.SessionAffinity.CodecEncodeSelf(e)
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2513[7] {
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2532 := z.EncBinary()
						_ = yym2532
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2513[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("loadBalancerSourceRanges"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.LoadBalancerSourceRanges == nil {
						r.EncodeNil()
					} else {
						yym2533 := z.EncBinary()
						_ = yym2533
						if false {
						} else {
							z.F.EncSliceStringV(x.LoadBalancerSourceRanges, false, e)
						}
					}
				}
			}
			if yyr2513 || yy2arr2513 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2534 := z.DecBinary()
	_ = yym2534
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2535 := r.ContainerType()
		if yyct2535 == codecSelferValueTypeMap1234 {
			yyl2535 := r.ReadMapStart()
			if yyl2535 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2535, d)
			}
		} else if yyct2535 == codecSelferValueTypeArray1234 {
			yyl2535 := r.ReadArrayStart()
			if yyl2535 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2535, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2536Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2536Slc
	var yyhl2536 bool = l >= 0
	for yyj2536 := 0; ; yyj2536++ {
		if yyhl2536 {
			if yyj2536 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2536Slc = r.DecodeBytes(yys2536Slc, true, true)
		yys2536 := string(yys2536Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2536 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ServiceType(r.DecodeString())
			}
		case "ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2538 := &x.Ports
				yym2539 := z.DecBinary()
				_ = yym2539
				if false {
				} else {
					h.decSliceServicePort((*[]ServicePort)(yyv2538), d)
				}
			}
		case "selector":
			if r.TryDecodeAsNil() {
				x.Selector = nil
			} else {
				yyv2540 := &x.Selector
				yym2541 := z.DecBinary()
				_ = yym2541
				if false {
				} else {
					z.F.DecMapStringStringX(yyv2540, false, d)
				}
			}
		case "clusterIP":
			if r.TryDecodeAsNil() {
				x.ClusterIP = ""
			} else {
				x.ClusterIP = string(r.DecodeString())
			}
		case "externalIPs":
			if r.TryDecodeAsNil() {
				x.ExternalIPs = nil
			} else {
				yyv2543 := &x.ExternalIPs
				yym2544 := z.DecBinary()
				_ = yym2544
				if false {
				} else {
					z.F.DecSliceStringX(yyv2543, false, d)
				}
			}
		case "loadBalancerIP":
			if r.TryDecodeAsNil() {
				x.LoadBalancerIP = ""
			} else {
				x.LoadBalancerIP = string(r.DecodeString())
			}
		case "sessionAffinity":
			if r.TryDecodeAsNil() {
				x.SessionAffinity = ""
			} else {
				x.SessionAffinity = ServiceAffinity(r.DecodeString())
			}
		case "loadBalancerSourceRanges":
			if r.TryDecodeAsNil() {
				x.LoadBalancerSourceRanges = nil
			} else {
				yyv2547 := &x.LoadBalancerSourceRanges
				yym2548 := z.DecBinary()
				_ = yym2548
				if false {
				} else {
					z.F.DecSliceStringX(yyv2547, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2536)
		} // end switch yys2536
	} // end for yyj2536
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2549 int
	var yyb2549 bool
	var yyhl2549 bool = l >= 0
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ServiceType(r.DecodeString())
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2551 := &x.Ports
		yym2552 := z.DecBinary()
		_ = yym2552
		if false {
		} else {
			h.decSliceServicePort((*[]ServicePort)(yyv2551), d)
		}
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Selector = nil
	} else {
		yyv2553 := &x.Selector
		yym2554 := z.DecBinary()
		_ = yym2554
		if false {
		} else {
			z.F.DecMapStringStringX(yyv2553, false, d)
		}
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ClusterIP = ""
	} else {
		x.ClusterIP = string(r.DecodeString())
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalIPs = nil
	} else {
		yyv2556 := &x.ExternalIPs
		yym2557 := z.DecBinary()
		_ = yym2557
		if false {
		} else {
			z.F.DecSliceStringX(yyv2556, false, d)
		}
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerIP = ""
	} else {
		x.LoadBalancerIP = string(r.DecodeString())
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SessionAffinity = ""
	} else {
		x.SessionAffinity = ServiceAffinity(r.DecodeString())
	}
	yyj2549++
	if yyhl2549 {
		yyb2549 = yyj2549 > l
	} else {
		yyb2549 = r.CheckBreak()
	}
	if yyb2549 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LoadBalancerSourceRanges = nil
	} else {
		yyv2560 := &x.LoadBalancerSourceRanges
		yym2561 := z.DecBinary()
		_ = yym2561
		if false {
		} else {
			z.F.DecSliceStringX(yyv2560, false, d)
		}
	}
	for {
		yyj2549++
		if yyhl2549 {
			yyb2549 = yyj2549 > l
		} else {
			yyb2549 = r.CheckBreak()
		}
		if yyb2549 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2549-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServicePort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2562 := z.EncBinary()
		_ = yym2562
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2563 := !z.EncBinary()
			yy2arr2563 := z.EncBasicHandle().StructToArray
			var yyq2563 [5]bool
			_, _, _ = yysep2563, yyq2563, yy2arr2563
			const yyr2563 bool = false
			var yynn2563 int
			if yyr2563 || yy2arr2563 {
				r.EncodeArrayStart(5)
			} else {
				yynn2563 = 5
				for _, b := range yyq2563 {
					if b {
						yynn2563++
					}
				}
				r.EncodeMapStart(yynn2563)
				yynn2563 = 0
			}
			if yyr2563 || yy2arr2563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2565 := z.EncBinary()
				_ = yym2565
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2566 := z.EncBinary()
				_ = yym2566
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2563 || yy2arr2563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2563 || yy2arr2563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2569 := z.EncBinary()
				_ = yym2569
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2570 := z.EncBinary()
				_ = yym2570
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2563 || yy2arr2563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy2572 := &x.TargetPort
				yym2573 := z.EncBinary()
				_ = yym2573
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2572) {
				} else if !yym2573 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2572)
				} else {
					z.EncFallback(yy2572)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("targetPort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy2574 := &x.TargetPort
				yym2575 := z.EncBinary()
				_ = yym2575
				if false {
				} else if z.HasExtensions() && z.EncExt(yy2574) {
				} else if !yym2575 && z.IsJSONHandle() {
					z.EncJSONMarshal(yy2574)
				} else {
					z.EncFallback(yy2574)
				}
			}
			if yyr2563 || yy2arr2563 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2577 := z.EncBinary()
				_ = yym2577
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("nodePort"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2578 := z.EncBinary()
				_ = yym2578
				if false {
				} else {
					r.EncodeInt(int64(x.NodePort))
				}
			}
			if yyr2563 || yy2arr2563 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServicePort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2579 := z.DecBinary()
	_ = yym2579
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2580 := r.ContainerType()
		if yyct2580 == codecSelferValueTypeMap1234 {
			yyl2580 := r.ReadMapStart()
			if yyl2580 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2580, d)
			}
		} else if yyct2580 == codecSelferValueTypeArray1234 {
			yyl2580 := r.ReadArrayStart()
			if yyl2580 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2580, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServicePort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2581Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2581Slc
	var yyhl2581 bool = l >= 0
	for yyj2581 := 0; ; yyj2581++ {
		if yyhl2581 {
			if yyj2581 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2581Slc = r.DecodeBytes(yys2581Slc, true, true)
		yys2581 := string(yys2581Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2581 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		case "port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "targetPort":
			if r.TryDecodeAsNil() {
				x.TargetPort = pkg4_intstr.IntOrString{}
			} else {
				yyv2585 := &x.TargetPort
				yym2586 := z.DecBinary()
				_ = yym2586
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2585) {
				} else if !yym2586 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv2585)
				} else {
					z.DecFallback(yyv2585, false)
				}
			}
		case "nodePort":
			if r.TryDecodeAsNil() {
				x.NodePort = 0
			} else {
				x.NodePort = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2581)
		} // end switch yys2581
	} // end for yyj2581
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServicePort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2588 int
	var yyb2588 bool
	var yyhl2588 bool = l >= 0
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TargetPort = pkg4_intstr.IntOrString{}
	} else {
		yyv2592 := &x.TargetPort
		yym2593 := z.DecBinary()
		_ = yym2593
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2592) {
		} else if !yym2593 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv2592)
		} else {
			z.DecFallback(yyv2592, false)
		}
	}
	yyj2588++
	if yyhl2588 {
		yyb2588 = yyj2588 > l
	} else {
		yyb2588 = r.CheckBreak()
	}
	if yyb2588 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodePort = 0
	} else {
		x.NodePort = int32(r.DecodeInt(32))
	}
	for {
		yyj2588++
		if yyhl2588 {
			yyb2588 = yyj2588 > l
		} else {
			yyb2588 = r.CheckBreak()
		}
		if yyb2588 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2588-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Service) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2595 := z.EncBinary()
		_ = yym2595
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2596 := !z.EncBinary()
			yy2arr2596 := z.EncBasicHandle().StructToArray
			var yyq2596 [5]bool
			_, _, _ = yysep2596, yyq2596, yy2arr2596
			const yyr2596 bool = false
			yyq2596[0] = x.Kind != ""
			yyq2596[1] = x.APIVersion != ""
			yyq2596[2] = true
			yyq2596[3] = true
			yyq2596[4] = true
			var yynn2596 int
			if yyr2596 || yy2arr2596 {
				r.EncodeArrayStart(5)
			} else {
				yynn2596 = 0
				for _, b := range yyq2596 {
					if b {
						yynn2596++
					}
				}
				r.EncodeMapStart(yynn2596)
				yynn2596 = 0
			}
			if yyr2596 || yy2arr2596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2596[0] {
					yym2598 := z.EncBinary()
					_ = yym2598
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2596[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2599 := z.EncBinary()
					_ = yym2599
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2596[1] {
					yym2601 := z.EncBinary()
					_ = yym2601
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2596[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2602 := z.EncBinary()
					_ = yym2602
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2596 || yy2arr2596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2596[2] {
					yy2604 := &x.ObjectMeta
					yy2604.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2596[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2605 := &x.ObjectMeta
					yy2605.CodecEncodeSelf(e)
				}
			}
			if yyr2596 || yy2arr2596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2596[3] {
					yy2607 := &x.Spec
					yy2607.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2596[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2608 := &x.Spec
					yy2608.CodecEncodeSelf(e)
				}
			}
			if yyr2596 || yy2arr2596 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2596[4] {
					yy2610 := &x.Status
					yy2610.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2596[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2611 := &x.Status
					yy2611.CodecEncodeSelf(e)
				}
			}
			if yyr2596 || yy2arr2596 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Service) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2612 := z.DecBinary()
	_ = yym2612
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2613 := r.ContainerType()
		if yyct2613 == codecSelferValueTypeMap1234 {
			yyl2613 := r.ReadMapStart()
			if yyl2613 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2613, d)
			}
		} else if yyct2613 == codecSelferValueTypeArray1234 {
			yyl2613 := r.ReadArrayStart()
			if yyl2613 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2613, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Service) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2614Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2614Slc
	var yyhl2614 bool = l >= 0
	for yyj2614 := 0; ; yyj2614++ {
		if yyhl2614 {
			if yyj2614 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2614Slc = r.DecodeBytes(yys2614Slc, true, true)
		yys2614 := string(yys2614Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2614 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2617 := &x.ObjectMeta
				yyv2617.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ServiceSpec{}
			} else {
				yyv2618 := &x.Spec
				yyv2618.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ServiceStatus{}
			} else {
				yyv2619 := &x.Status
				yyv2619.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2614)
		} // end switch yys2614
	} // end for yyj2614
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Service) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2620 int
	var yyb2620 bool
	var yyhl2620 bool = l >= 0
	yyj2620++
	if yyhl2620 {
		yyb2620 = yyj2620 > l
	} else {
		yyb2620 = r.CheckBreak()
	}
	if yyb2620 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2620++
	if yyhl2620 {
		yyb2620 = yyj2620 > l
	} else {
		yyb2620 = r.CheckBreak()
	}
	if yyb2620 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2620++
	if yyhl2620 {
		yyb2620 = yyj2620 > l
	} else {
		yyb2620 = r.CheckBreak()
	}
	if yyb2620 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2623 := &x.ObjectMeta
		yyv2623.CodecDecodeSelf(d)
	}
	yyj2620++
	if yyhl2620 {
		yyb2620 = yyj2620 > l
	} else {
		yyb2620 = r.CheckBreak()
	}
	if yyb2620 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ServiceSpec{}
	} else {
		yyv2624 := &x.Spec
		yyv2624.CodecDecodeSelf(d)
	}
	yyj2620++
	if yyhl2620 {
		yyb2620 = yyj2620 > l
	} else {
		yyb2620 = r.CheckBreak()
	}
	if yyb2620 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ServiceStatus{}
	} else {
		yyv2625 := &x.Status
		yyv2625.CodecDecodeSelf(d)
	}
	for {
		yyj2620++
		if yyhl2620 {
			yyb2620 = yyj2620 > l
		} else {
			yyb2620 = r.CheckBreak()
		}
		if yyb2620 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2620-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccount) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2626 := z.EncBinary()
		_ = yym2626
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2627 := !z.EncBinary()
			yy2arr2627 := z.EncBasicHandle().StructToArray
			var yyq2627 [5]bool
			_, _, _ = yysep2627, yyq2627, yy2arr2627
			const yyr2627 bool = false
			yyq2627[0] = x.Kind != ""
			yyq2627[1] = x.APIVersion != ""
			yyq2627[2] = true
			yyq2627[4] = len(x.ImagePullSecrets) != 0
			var yynn2627 int
			if yyr2627 || yy2arr2627 {
				r.EncodeArrayStart(5)
			} else {
				yynn2627 = 1
				for _, b := range yyq2627 {
					if b {
						yynn2627++
					}
				}
				r.EncodeMapStart(yynn2627)
				yynn2627 = 0
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2627[0] {
					yym2629 := z.EncBinary()
					_ = yym2629
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2627[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2630 := z.EncBinary()
					_ = yym2630
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2627[1] {
					yym2632 := z.EncBinary()
					_ = yym2632
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2627[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2633 := z.EncBinary()
					_ = yym2633
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2627[2] {
					yy2635 := &x.ObjectMeta
					yy2635.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2627[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2636 := &x.ObjectMeta
					yy2636.CodecEncodeSelf(e)
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2638 := z.EncBinary()
					_ = yym2638
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("secrets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Secrets == nil {
					r.EncodeNil()
				} else {
					yym2639 := z.EncBinary()
					_ = yym2639
					if false {
					} else {
						h.encSliceObjectReference(([]ObjectReference)(x.Secrets), e)
					}
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2627[4] {
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2641 := z.EncBinary()
						_ = yym2641
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2627[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("imagePullSecrets"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ImagePullSecrets == nil {
						r.EncodeNil()
					} else {
						yym2642 := z.EncBinary()
						_ = yym2642
						if false {
						} else {
							h.encSliceLocalObjectReference(([]LocalObjectReference)(x.ImagePullSecrets), e)
						}
					}
				}
			}
			if yyr2627 || yy2arr2627 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccount) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2643 := z.DecBinary()
	_ = yym2643
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2644 := r.ContainerType()
		if yyct2644 == codecSelferValueTypeMap1234 {
			yyl2644 := r.ReadMapStart()
			if yyl2644 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2644, d)
			}
		} else if yyct2644 == codecSelferValueTypeArray1234 {
			yyl2644 := r.ReadArrayStart()
			if yyl2644 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2644, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccount) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2645Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2645Slc
	var yyhl2645 bool = l >= 0
	for yyj2645 := 0; ; yyj2645++ {
		if yyhl2645 {
			if yyj2645 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2645Slc = r.DecodeBytes(yys2645Slc, true, true)
		yys2645 := string(yys2645Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2645 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2648 := &x.ObjectMeta
				yyv2648.CodecDecodeSelf(d)
			}
		case "secrets":
			if r.TryDecodeAsNil() {
				x.Secrets = nil
			} else {
				yyv2649 := &x.Secrets
				yym2650 := z.DecBinary()
				_ = yym2650
				if false {
				} else {
					h.decSliceObjectReference((*[]ObjectReference)(yyv2649), d)
				}
			}
		case "imagePullSecrets":
			if r.TryDecodeAsNil() {
				x.ImagePullSecrets = nil
			} else {
				yyv2651 := &x.ImagePullSecrets
				yym2652 := z.DecBinary()
				_ = yym2652
				if false {
				} else {
					h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2651), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2645)
		} // end switch yys2645
	} // end for yyj2645
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccount) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2653 int
	var yyb2653 bool
	var yyhl2653 bool = l >= 0
	yyj2653++
	if yyhl2653 {
		yyb2653 = yyj2653 > l
	} else {
		yyb2653 = r.CheckBreak()
	}
	if yyb2653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2653++
	if yyhl2653 {
		yyb2653 = yyj2653 > l
	} else {
		yyb2653 = r.CheckBreak()
	}
	if yyb2653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2653++
	if yyhl2653 {
		yyb2653 = yyj2653 > l
	} else {
		yyb2653 = r.CheckBreak()
	}
	if yyb2653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2656 := &x.ObjectMeta
		yyv2656.CodecDecodeSelf(d)
	}
	yyj2653++
	if yyhl2653 {
		yyb2653 = yyj2653 > l
	} else {
		yyb2653 = r.CheckBreak()
	}
	if yyb2653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Secrets = nil
	} else {
		yyv2657 := &x.Secrets
		yym2658 := z.DecBinary()
		_ = yym2658
		if false {
		} else {
			h.decSliceObjectReference((*[]ObjectReference)(yyv2657), d)
		}
	}
	yyj2653++
	if yyhl2653 {
		yyb2653 = yyj2653 > l
	} else {
		yyb2653 = r.CheckBreak()
	}
	if yyb2653 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ImagePullSecrets = nil
	} else {
		yyv2659 := &x.ImagePullSecrets
		yym2660 := z.DecBinary()
		_ = yym2660
		if false {
		} else {
			h.decSliceLocalObjectReference((*[]LocalObjectReference)(yyv2659), d)
		}
	}
	for {
		yyj2653++
		if yyhl2653 {
			yyb2653 = yyj2653 > l
		} else {
			yyb2653 = r.CheckBreak()
		}
		if yyb2653 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2653-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceAccountList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2661 := z.EncBinary()
		_ = yym2661
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2662 := !z.EncBinary()
			yy2arr2662 := z.EncBasicHandle().StructToArray
			var yyq2662 [4]bool
			_, _, _ = yysep2662, yyq2662, yy2arr2662
			const yyr2662 bool = false
			yyq2662[0] = x.Kind != ""
			yyq2662[1] = x.APIVersion != ""
			yyq2662[2] = true
			var yynn2662 int
			if yyr2662 || yy2arr2662 {
				r.EncodeArrayStart(4)
			} else {
				yynn2662 = 1
				for _, b := range yyq2662 {
					if b {
						yynn2662++
					}
				}
				r.EncodeMapStart(yynn2662)
				yynn2662 = 0
			}
			if yyr2662 || yy2arr2662 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2662[0] {
					yym2664 := z.EncBinary()
					_ = yym2664
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2662[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2665 := z.EncBinary()
					_ = yym2665
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2662 || yy2arr2662 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2662[1] {
					yym2667 := z.EncBinary()
					_ = yym2667
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2662[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2668 := z.EncBinary()
					_ = yym2668
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2662 || yy2arr2662 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2662[2] {
					yy2670 := &x.ListMeta
					yym2671 := z.EncBinary()
					_ = yym2671
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2670) {
					} else {
						z.EncFallback(yy2670)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2662[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2672 := &x.ListMeta
					yym2673 := z.EncBinary()
					_ = yym2673
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2672) {
					} else {
						z.EncFallback(yy2672)
					}
				}
			}
			if yyr2662 || yy2arr2662 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2675 := z.EncBinary()
					_ = yym2675
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2676 := z.EncBinary()
					_ = yym2676
					if false {
					} else {
						h.encSliceServiceAccount(([]ServiceAccount)(x.Items), e)
					}
				}
			}
			if yyr2662 || yy2arr2662 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceAccountList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2677 := z.DecBinary()
	_ = yym2677
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2678 := r.ContainerType()
		if yyct2678 == codecSelferValueTypeMap1234 {
			yyl2678 := r.ReadMapStart()
			if yyl2678 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2678, d)
			}
		} else if yyct2678 == codecSelferValueTypeArray1234 {
			yyl2678 := r.ReadArrayStart()
			if yyl2678 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2678, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceAccountList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2679Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2679Slc
	var yyhl2679 bool = l >= 0
	for yyj2679 := 0; ; yyj2679++ {
		if yyhl2679 {
			if yyj2679 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2679Slc = r.DecodeBytes(yys2679Slc, true, true)
		yys2679 := string(yys2679Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2679 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2682 := &x.ListMeta
				yym2683 := z.DecBinary()
				_ = yym2683
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2682) {
				} else {
					z.DecFallback(yyv2682, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2684 := &x.Items
				yym2685 := z.DecBinary()
				_ = yym2685
				if false {
				} else {
					h.decSliceServiceAccount((*[]ServiceAccount)(yyv2684), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2679)
		} // end switch yys2679
	} // end for yyj2679
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceAccountList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2686 int
	var yyb2686 bool
	var yyhl2686 bool = l >= 0
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2689 := &x.ListMeta
		yym2690 := z.DecBinary()
		_ = yym2690
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2689) {
		} else {
			z.DecFallback(yyv2689, false)
		}
	}
	yyj2686++
	if yyhl2686 {
		yyb2686 = yyj2686 > l
	} else {
		yyb2686 = r.CheckBreak()
	}
	if yyb2686 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2691 := &x.Items
		yym2692 := z.DecBinary()
		_ = yym2692
		if false {
		} else {
			h.decSliceServiceAccount((*[]ServiceAccount)(yyv2691), d)
		}
	}
	for {
		yyj2686++
		if yyhl2686 {
			yyb2686 = yyj2686 > l
		} else {
			yyb2686 = r.CheckBreak()
		}
		if yyb2686 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2686-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Endpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2693 := z.EncBinary()
		_ = yym2693
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2694 := !z.EncBinary()
			yy2arr2694 := z.EncBasicHandle().StructToArray
			var yyq2694 [4]bool
			_, _, _ = yysep2694, yyq2694, yy2arr2694
			const yyr2694 bool = false
			yyq2694[0] = x.Kind != ""
			yyq2694[1] = x.APIVersion != ""
			yyq2694[2] = true
			var yynn2694 int
			if yyr2694 || yy2arr2694 {
				r.EncodeArrayStart(4)
			} else {
				yynn2694 = 1
				for _, b := range yyq2694 {
					if b {
						yynn2694++
					}
				}
				r.EncodeMapStart(yynn2694)
				yynn2694 = 0
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2694[0] {
					yym2696 := z.EncBinary()
					_ = yym2696
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2694[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2697 := z.EncBinary()
					_ = yym2697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2694[1] {
					yym2699 := z.EncBinary()
					_ = yym2699
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2694[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2700 := z.EncBinary()
					_ = yym2700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2694[2] {
					yy2702 := &x.ObjectMeta
					yy2702.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2694[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2703 := &x.ObjectMeta
					yy2703.CodecEncodeSelf(e)
				}
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2705 := z.EncBinary()
					_ = yym2705
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Subsets"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Subsets == nil {
					r.EncodeNil()
				} else {
					yym2706 := z.EncBinary()
					_ = yym2706
					if false {
					} else {
						h.encSliceEndpointSubset(([]EndpointSubset)(x.Subsets), e)
					}
				}
			}
			if yyr2694 || yy2arr2694 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Endpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2707 := z.DecBinary()
	_ = yym2707
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2708 := r.ContainerType()
		if yyct2708 == codecSelferValueTypeMap1234 {
			yyl2708 := r.ReadMapStart()
			if yyl2708 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2708, d)
			}
		} else if yyct2708 == codecSelferValueTypeArray1234 {
			yyl2708 := r.ReadArrayStart()
			if yyl2708 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2708, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Endpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2709Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2709Slc
	var yyhl2709 bool = l >= 0
	for yyj2709 := 0; ; yyj2709++ {
		if yyhl2709 {
			if yyj2709 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2709Slc = r.DecodeBytes(yys2709Slc, true, true)
		yys2709 := string(yys2709Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2709 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv2712 := &x.ObjectMeta
				yyv2712.CodecDecodeSelf(d)
			}
		case "Subsets":
			if r.TryDecodeAsNil() {
				x.Subsets = nil
			} else {
				yyv2713 := &x.Subsets
				yym2714 := z.DecBinary()
				_ = yym2714
				if false {
				} else {
					h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2713), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2709)
		} // end switch yys2709
	} // end for yyj2709
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Endpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2715 int
	var yyb2715 bool
	var yyhl2715 bool = l >= 0
	yyj2715++
	if yyhl2715 {
		yyb2715 = yyj2715 > l
	} else {
		yyb2715 = r.CheckBreak()
	}
	if yyb2715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2715++
	if yyhl2715 {
		yyb2715 = yyj2715 > l
	} else {
		yyb2715 = r.CheckBreak()
	}
	if yyb2715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2715++
	if yyhl2715 {
		yyb2715 = yyj2715 > l
	} else {
		yyb2715 = r.CheckBreak()
	}
	if yyb2715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv2718 := &x.ObjectMeta
		yyv2718.CodecDecodeSelf(d)
	}
	yyj2715++
	if yyhl2715 {
		yyb2715 = yyj2715 > l
	} else {
		yyb2715 = r.CheckBreak()
	}
	if yyb2715 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Subsets = nil
	} else {
		yyv2719 := &x.Subsets
		yym2720 := z.DecBinary()
		_ = yym2720
		if false {
		} else {
			h.decSliceEndpointSubset((*[]EndpointSubset)(yyv2719), d)
		}
	}
	for {
		yyj2715++
		if yyhl2715 {
			yyb2715 = yyj2715 > l
		} else {
			yyb2715 = r.CheckBreak()
		}
		if yyb2715 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2715-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointSubset) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2721 := z.EncBinary()
		_ = yym2721
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2722 := !z.EncBinary()
			yy2arr2722 := z.EncBasicHandle().StructToArray
			var yyq2722 [3]bool
			_, _, _ = yysep2722, yyq2722, yy2arr2722
			const yyr2722 bool = false
			var yynn2722 int
			if yyr2722 || yy2arr2722 {
				r.EncodeArrayStart(3)
			} else {
				yynn2722 = 3
				for _, b := range yyq2722 {
					if b {
						yynn2722++
					}
				}
				r.EncodeMapStart(yynn2722)
				yynn2722 = 0
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2724 := z.EncBinary()
					_ = yym2724
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Addresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Addresses == nil {
					r.EncodeNil()
				} else {
					yym2725 := z.EncBinary()
					_ = yym2725
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.Addresses), e)
					}
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2727 := z.EncBinary()
					_ = yym2727
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("NotReadyAddresses"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.NotReadyAddresses == nil {
					r.EncodeNil()
				} else {
					yym2728 := z.EncBinary()
					_ = yym2728
					if false {
					} else {
						h.encSliceEndpointAddress(([]EndpointAddress)(x.NotReadyAddresses), e)
					}
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2730 := z.EncBinary()
					_ = yym2730
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Ports"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Ports == nil {
					r.EncodeNil()
				} else {
					yym2731 := z.EncBinary()
					_ = yym2731
					if false {
					} else {
						h.encSliceEndpointPort(([]EndpointPort)(x.Ports), e)
					}
				}
			}
			if yyr2722 || yy2arr2722 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointSubset) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2732 := z.DecBinary()
	_ = yym2732
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2733 := r.ContainerType()
		if yyct2733 == codecSelferValueTypeMap1234 {
			yyl2733 := r.ReadMapStart()
			if yyl2733 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2733, d)
			}
		} else if yyct2733 == codecSelferValueTypeArray1234 {
			yyl2733 := r.ReadArrayStart()
			if yyl2733 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2733, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointSubset) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2734Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2734Slc
	var yyhl2734 bool = l >= 0
	for yyj2734 := 0; ; yyj2734++ {
		if yyhl2734 {
			if yyj2734 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2734Slc = r.DecodeBytes(yys2734Slc, true, true)
		yys2734 := string(yys2734Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2734 {
		case "Addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2735 := &x.Addresses
				yym2736 := z.DecBinary()
				_ = yym2736
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2735), d)
				}
			}
		case "NotReadyAddresses":
			if r.TryDecodeAsNil() {
				x.NotReadyAddresses = nil
			} else {
				yyv2737 := &x.NotReadyAddresses
				yym2738 := z.DecBinary()
				_ = yym2738
				if false {
				} else {
					h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2737), d)
				}
			}
		case "Ports":
			if r.TryDecodeAsNil() {
				x.Ports = nil
			} else {
				yyv2739 := &x.Ports
				yym2740 := z.DecBinary()
				_ = yym2740
				if false {
				} else {
					h.decSliceEndpointPort((*[]EndpointPort)(yyv2739), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2734)
		} // end switch yys2734
	} // end for yyj2734
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointSubset) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2741 int
	var yyb2741 bool
	var yyhl2741 bool = l >= 0
	yyj2741++
	if yyhl2741 {
		yyb2741 = yyj2741 > l
	} else {
		yyb2741 = r.CheckBreak()
	}
	if yyb2741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2742 := &x.Addresses
		yym2743 := z.DecBinary()
		_ = yym2743
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2742), d)
		}
	}
	yyj2741++
	if yyhl2741 {
		yyb2741 = yyj2741 > l
	} else {
		yyb2741 = r.CheckBreak()
	}
	if yyb2741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NotReadyAddresses = nil
	} else {
		yyv2744 := &x.NotReadyAddresses
		yym2745 := z.DecBinary()
		_ = yym2745
		if false {
		} else {
			h.decSliceEndpointAddress((*[]EndpointAddress)(yyv2744), d)
		}
	}
	yyj2741++
	if yyhl2741 {
		yyb2741 = yyj2741 > l
	} else {
		yyb2741 = r.CheckBreak()
	}
	if yyb2741 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Ports = nil
	} else {
		yyv2746 := &x.Ports
		yym2747 := z.DecBinary()
		_ = yym2747
		if false {
		} else {
			h.decSliceEndpointPort((*[]EndpointPort)(yyv2746), d)
		}
	}
	for {
		yyj2741++
		if yyhl2741 {
			yyb2741 = yyj2741 > l
		} else {
			yyb2741 = r.CheckBreak()
		}
		if yyb2741 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2741-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2748 := z.EncBinary()
		_ = yym2748
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2749 := !z.EncBinary()
			yy2arr2749 := z.EncBasicHandle().StructToArray
			var yyq2749 [4]bool
			_, _, _ = yysep2749, yyq2749, yy2arr2749
			const yyr2749 bool = false
			yyq2749[1] = x.Hostname != ""
			yyq2749[2] = x.NodeName != nil
			var yynn2749 int
			if yyr2749 || yy2arr2749 {
				r.EncodeArrayStart(4)
			} else {
				yynn2749 = 2
				for _, b := range yyq2749 {
					if b {
						yynn2749++
					}
				}
				r.EncodeMapStart(yynn2749)
				yynn2749 = 0
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2751 := z.EncBinary()
				_ = yym2751
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("IP"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2752 := z.EncBinary()
				_ = yym2752
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.IP))
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2749[1] {
					yym2754 := z.EncBinary()
					_ = yym2754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2749[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hostname"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2755 := z.EncBinary()
					_ = yym2755
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Hostname))
					}
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2749[2] {
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2757 := *x.NodeName
						yym2758 := z.EncBinary()
						_ = yym2758
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2757))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2749[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeName"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.NodeName == nil {
						r.EncodeNil()
					} else {
						yy2759 := *x.NodeName
						yym2760 := z.EncBinary()
						_ = yym2760
						if false {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy2759))
						}
					}
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TargetRef"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TargetRef == nil {
					r.EncodeNil()
				} else {
					x.TargetRef.CodecEncodeSelf(e)
				}
			}
			if yyr2749 || yy2arr2749 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2762 := z.DecBinary()
	_ = yym2762
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2763 := r.ContainerType()
		if yyct2763 == codecSelferValueTypeMap1234 {
			yyl2763 := r.ReadMapStart()
			if yyl2763 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2763, d)
			}
		} else if yyct2763 == codecSelferValueTypeArray1234 {
			yyl2763 := r.ReadArrayStart()
			if yyl2763 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2763, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2764Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2764Slc
	var yyhl2764 bool = l >= 0
	for yyj2764 := 0; ; yyj2764++ {
		if yyhl2764 {
			if yyj2764 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2764Slc = r.DecodeBytes(yys2764Slc, true, true)
		yys2764 := string(yys2764Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2764 {
		case "IP":
			if r.TryDecodeAsNil() {
				x.IP = ""
			} else {
				x.IP = string(r.DecodeString())
			}
		case "hostname":
			if r.TryDecodeAsNil() {
				x.Hostname = ""
			} else {
				x.Hostname = string(r.DecodeString())
			}
		case "nodeName":
			if r.TryDecodeAsNil() {
				if x.NodeName != nil {
					x.NodeName = nil
				}
			} else {
				if x.NodeName == nil {
					x.NodeName = new(string)
				}
				yym2768 := z.DecBinary()
				_ = yym2768
				if false {
				} else {
					*((*string)(x.NodeName)) = r.DecodeString()
				}
			}
		case "TargetRef":
			if r.TryDecodeAsNil() {
				if x.TargetRef != nil {
					x.TargetRef = nil
				}
			} else {
				if x.TargetRef == nil {
					x.TargetRef = new(ObjectReference)
				}
				x.TargetRef.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2764)
		} // end switch yys2764
	} // end for yyj2764
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2770 int
	var yyb2770 bool
	var yyhl2770 bool = l >= 0
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.IP = ""
	} else {
		x.IP = string(r.DecodeString())
	}
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hostname = ""
	} else {
		x.Hostname = string(r.DecodeString())
	}
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.NodeName != nil {
			x.NodeName = nil
		}
	} else {
		if x.NodeName == nil {
			x.NodeName = new(string)
		}
		yym2774 := z.DecBinary()
		_ = yym2774
		if false {
		} else {
			*((*string)(x.NodeName)) = r.DecodeString()
		}
	}
	yyj2770++
	if yyhl2770 {
		yyb2770 = yyj2770 > l
	} else {
		yyb2770 = r.CheckBreak()
	}
	if yyb2770 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TargetRef != nil {
			x.TargetRef = nil
		}
	} else {
		if x.TargetRef == nil {
			x.TargetRef = new(ObjectReference)
		}
		x.TargetRef.CodecDecodeSelf(d)
	}
	for {
		yyj2770++
		if yyhl2770 {
			yyb2770 = yyj2770 > l
		} else {
			yyb2770 = r.CheckBreak()
		}
		if yyb2770 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2770-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointPort) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2776 := z.EncBinary()
		_ = yym2776
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2777 := !z.EncBinary()
			yy2arr2777 := z.EncBasicHandle().StructToArray
			var yyq2777 [3]bool
			_, _, _ = yysep2777, yyq2777, yy2arr2777
			const yyr2777 bool = false
			var yynn2777 int
			if yyr2777 || yy2arr2777 {
				r.EncodeArrayStart(3)
			} else {
				yynn2777 = 3
				for _, b := range yyq2777 {
					if b {
						yynn2777++
					}
				}
				r.EncodeMapStart(yynn2777)
				yynn2777 = 0
			}
			if yyr2777 || yy2arr2777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2779 := z.EncBinary()
				_ = yym2779
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2780 := z.EncBinary()
				_ = yym2780
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr2777 || yy2arr2777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2782 := z.EncBinary()
				_ = yym2782
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2783 := z.EncBinary()
				_ = yym2783
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2777 || yy2arr2777 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Protocol.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Protocol"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Protocol.CodecEncodeSelf(e)
			}
			if yyr2777 || yy2arr2777 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointPort) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2785 := z.DecBinary()
	_ = yym2785
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2786 := r.ContainerType()
		if yyct2786 == codecSelferValueTypeMap1234 {
			yyl2786 := r.ReadMapStart()
			if yyl2786 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2786, d)
			}
		} else if yyct2786 == codecSelferValueTypeArray1234 {
			yyl2786 := r.ReadArrayStart()
			if yyl2786 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2786, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointPort) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2787Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2787Slc
	var yyhl2787 bool = l >= 0
	for yyj2787 := 0; ; yyj2787++ {
		if yyhl2787 {
			if yyj2787 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2787Slc = r.DecodeBytes(yys2787Slc, true, true)
		yys2787 := string(yys2787Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2787 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		case "Protocol":
			if r.TryDecodeAsNil() {
				x.Protocol = ""
			} else {
				x.Protocol = Protocol(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2787)
		} // end switch yys2787
	} // end for yyj2787
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointPort) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2791 int
	var yyb2791 bool
	var yyhl2791 bool = l >= 0
	yyj2791++
	if yyhl2791 {
		yyb2791 = yyj2791 > l
	} else {
		yyb2791 = r.CheckBreak()
	}
	if yyb2791 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj2791++
	if yyhl2791 {
		yyb2791 = yyj2791 > l
	} else {
		yyb2791 = r.CheckBreak()
	}
	if yyb2791 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	yyj2791++
	if yyhl2791 {
		yyb2791 = yyj2791 > l
	} else {
		yyb2791 = r.CheckBreak()
	}
	if yyb2791 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Protocol = ""
	} else {
		x.Protocol = Protocol(r.DecodeString())
	}
	for {
		yyj2791++
		if yyhl2791 {
			yyb2791 = yyj2791 > l
		} else {
			yyb2791 = r.CheckBreak()
		}
		if yyb2791 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2791-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EndpointsList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2795 := z.EncBinary()
		_ = yym2795
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2796 := !z.EncBinary()
			yy2arr2796 := z.EncBasicHandle().StructToArray
			var yyq2796 [4]bool
			_, _, _ = yysep2796, yyq2796, yy2arr2796
			const yyr2796 bool = false
			yyq2796[0] = x.Kind != ""
			yyq2796[1] = x.APIVersion != ""
			yyq2796[2] = true
			var yynn2796 int
			if yyr2796 || yy2arr2796 {
				r.EncodeArrayStart(4)
			} else {
				yynn2796 = 1
				for _, b := range yyq2796 {
					if b {
						yynn2796++
					}
				}
				r.EncodeMapStart(yynn2796)
				yynn2796 = 0
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[0] {
					yym2798 := z.EncBinary()
					_ = yym2798
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2796[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2799 := z.EncBinary()
					_ = yym2799
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[1] {
					yym2801 := z.EncBinary()
					_ = yym2801
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2796[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2802 := z.EncBinary()
					_ = yym2802
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2796[2] {
					yy2804 := &x.ListMeta
					yym2805 := z.EncBinary()
					_ = yym2805
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2804) {
					} else {
						z.EncFallback(yy2804)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2796[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2806 := &x.ListMeta
					yym2807 := z.EncBinary()
					_ = yym2807
					if false {
					} else if z.HasExtensions() && z.EncExt(yy2806) {
					} else {
						z.EncFallback(yy2806)
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2809 := z.EncBinary()
					_ = yym2809
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym2810 := z.EncBinary()
					_ = yym2810
					if false {
					} else {
						h.encSliceEndpoints(([]Endpoints)(x.Items), e)
					}
				}
			}
			if yyr2796 || yy2arr2796 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EndpointsList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2811 := z.DecBinary()
	_ = yym2811
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2812 := r.ContainerType()
		if yyct2812 == codecSelferValueTypeMap1234 {
			yyl2812 := r.ReadMapStart()
			if yyl2812 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2812, d)
			}
		} else if yyct2812 == codecSelferValueTypeArray1234 {
			yyl2812 := r.ReadArrayStart()
			if yyl2812 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2812, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EndpointsList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2813Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2813Slc
	var yyhl2813 bool = l >= 0
	for yyj2813 := 0; ; yyj2813++ {
		if yyhl2813 {
			if yyj2813 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2813Slc = r.DecodeBytes(yys2813Slc, true, true)
		yys2813 := string(yys2813Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2813 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv2816 := &x.ListMeta
				yym2817 := z.DecBinary()
				_ = yym2817
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv2816) {
				} else {
					z.DecFallback(yyv2816, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv2818 := &x.Items
				yym2819 := z.DecBinary()
				_ = yym2819
				if false {
				} else {
					h.decSliceEndpoints((*[]Endpoints)(yyv2818), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2813)
		} // end switch yys2813
	} // end for yyj2813
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EndpointsList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2820 int
	var yyb2820 bool
	var yyhl2820 bool = l >= 0
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv2823 := &x.ListMeta
		yym2824 := z.DecBinary()
		_ = yym2824
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv2823) {
		} else {
			z.DecFallback(yyv2823, false)
		}
	}
	yyj2820++
	if yyhl2820 {
		yyb2820 = yyj2820 > l
	} else {
		yyb2820 = r.CheckBreak()
	}
	if yyb2820 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv2825 := &x.Items
		yym2826 := z.DecBinary()
		_ = yym2826
		if false {
		} else {
			h.decSliceEndpoints((*[]Endpoints)(yyv2825), d)
		}
	}
	for {
		yyj2820++
		if yyhl2820 {
			yyb2820 = yyj2820 > l
		} else {
			yyb2820 = r.CheckBreak()
		}
		if yyb2820 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2820-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2827 := z.EncBinary()
		_ = yym2827
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2828 := !z.EncBinary()
			yy2arr2828 := z.EncBasicHandle().StructToArray
			var yyq2828 [4]bool
			_, _, _ = yysep2828, yyq2828, yy2arr2828
			const yyr2828 bool = false
			yyq2828[0] = x.PodCIDR != ""
			yyq2828[1] = x.ExternalID != ""
			yyq2828[2] = x.ProviderID != ""
			yyq2828[3] = x.Unschedulable != false
			var yynn2828 int
			if yyr2828 || yy2arr2828 {
				r.EncodeArrayStart(4)
			} else {
				yynn2828 = 0
				for _, b := range yyq2828 {
					if b {
						yynn2828++
					}
				}
				r.EncodeMapStart(yynn2828)
				yynn2828 = 0
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2828[0] {
					yym2830 := z.EncBinary()
					_ = yym2830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2828[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podCIDR"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2831 := z.EncBinary()
					_ = yym2831
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.PodCIDR))
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2828[1] {
					yym2833 := z.EncBinary()
					_ = yym2833
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2828[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("externalID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2834 := z.EncBinary()
					_ = yym2834
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ExternalID))
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2828[2] {
					yym2836 := z.EncBinary()
					_ = yym2836
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2828[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("providerID"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2837 := z.EncBinary()
					_ = yym2837
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ProviderID))
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2828[3] {
					yym2839 := z.EncBinary()
					_ = yym2839
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq2828[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("unschedulable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym2840 := z.EncBinary()
					_ = yym2840
					if false {
					} else {
						r.EncodeBool(bool(x.Unschedulable))
					}
				}
			}
			if yyr2828 || yy2arr2828 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2841 := z.DecBinary()
	_ = yym2841
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2842 := r.ContainerType()
		if yyct2842 == codecSelferValueTypeMap1234 {
			yyl2842 := r.ReadMapStart()
			if yyl2842 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2842, d)
			}
		} else if yyct2842 == codecSelferValueTypeArray1234 {
			yyl2842 := r.ReadArrayStart()
			if yyl2842 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2842, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2843Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2843Slc
	var yyhl2843 bool = l >= 0
	for yyj2843 := 0; ; yyj2843++ {
		if yyhl2843 {
			if yyj2843 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2843Slc = r.DecodeBytes(yys2843Slc, true, true)
		yys2843 := string(yys2843Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2843 {
		case "podCIDR":
			if r.TryDecodeAsNil() {
				x.PodCIDR = ""
			} else {
				x.PodCIDR = string(r.DecodeString())
			}
		case "externalID":
			if r.TryDecodeAsNil() {
				x.ExternalID = ""
			} else {
				x.ExternalID = string(r.DecodeString())
			}
		case "providerID":
			if r.TryDecodeAsNil() {
				x.ProviderID = ""
			} else {
				x.ProviderID = string(r.DecodeString())
			}
		case "unschedulable":
			if r.TryDecodeAsNil() {
				x.Unschedulable = false
			} else {
				x.Unschedulable = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2843)
		} // end switch yys2843
	} // end for yyj2843
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2848 int
	var yyb2848 bool
	var yyhl2848 bool = l >= 0
	yyj2848++
	if yyhl2848 {
		yyb2848 = yyj2848 > l
	} else {
		yyb2848 = r.CheckBreak()
	}
	if yyb2848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodCIDR = ""
	} else {
		x.PodCIDR = string(r.DecodeString())
	}
	yyj2848++
	if yyhl2848 {
		yyb2848 = yyj2848 > l
	} else {
		yyb2848 = r.CheckBreak()
	}
	if yyb2848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ExternalID = ""
	} else {
		x.ExternalID = string(r.DecodeString())
	}
	yyj2848++
	if yyhl2848 {
		yyb2848 = yyj2848 > l
	} else {
		yyb2848 = r.CheckBreak()
	}
	if yyb2848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ProviderID = ""
	} else {
		x.ProviderID = string(r.DecodeString())
	}
	yyj2848++
	if yyhl2848 {
		yyb2848 = yyj2848 > l
	} else {
		yyb2848 = r.CheckBreak()
	}
	if yyb2848 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Unschedulable = false
	} else {
		x.Unschedulable = bool(r.DecodeBool())
	}
	for {
		yyj2848++
		if yyhl2848 {
			yyb2848 = yyj2848 > l
		} else {
			yyb2848 = r.CheckBreak()
		}
		if yyb2848 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2848-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DaemonEndpoint) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2853 := z.EncBinary()
		_ = yym2853
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2854 := !z.EncBinary()
			yy2arr2854 := z.EncBasicHandle().StructToArray
			var yyq2854 [1]bool
			_, _, _ = yysep2854, yyq2854, yy2arr2854
			const yyr2854 bool = false
			var yynn2854 int
			if yyr2854 || yy2arr2854 {
				r.EncodeArrayStart(1)
			} else {
				yynn2854 = 1
				for _, b := range yyq2854 {
					if b {
						yynn2854++
					}
				}
				r.EncodeMapStart(yynn2854)
				yynn2854 = 0
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2856 := z.EncBinary()
				_ = yym2856
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Port"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2857 := z.EncBinary()
				_ = yym2857
				if false {
				} else {
					r.EncodeInt(int64(x.Port))
				}
			}
			if yyr2854 || yy2arr2854 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DaemonEndpoint) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2858 := z.DecBinary()
	_ = yym2858
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2859 := r.ContainerType()
		if yyct2859 == codecSelferValueTypeMap1234 {
			yyl2859 := r.ReadMapStart()
			if yyl2859 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2859, d)
			}
		} else if yyct2859 == codecSelferValueTypeArray1234 {
			yyl2859 := r.ReadArrayStart()
			if yyl2859 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2859, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DaemonEndpoint) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2860Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2860Slc
	var yyhl2860 bool = l >= 0
	for yyj2860 := 0; ; yyj2860++ {
		if yyhl2860 {
			if yyj2860 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2860Slc = r.DecodeBytes(yys2860Slc, true, true)
		yys2860 := string(yys2860Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2860 {
		case "Port":
			if r.TryDecodeAsNil() {
				x.Port = 0
			} else {
				x.Port = int32(r.DecodeInt(32))
			}
		default:
			z.DecStructFieldNotFound(-1, yys2860)
		} // end switch yys2860
	} // end for yyj2860
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DaemonEndpoint) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2862 int
	var yyb2862 bool
	var yyhl2862 bool = l >= 0
	yyj2862++
	if yyhl2862 {
		yyb2862 = yyj2862 > l
	} else {
		yyb2862 = r.CheckBreak()
	}
	if yyb2862 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Port = 0
	} else {
		x.Port = int32(r.DecodeInt(32))
	}
	for {
		yyj2862++
		if yyhl2862 {
			yyb2862 = yyj2862 > l
		} else {
			yyb2862 = r.CheckBreak()
		}
		if yyb2862 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2862-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeDaemonEndpoints) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2864 := z.EncBinary()
		_ = yym2864
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2865 := !z.EncBinary()
			yy2arr2865 := z.EncBasicHandle().StructToArray
			var yyq2865 [1]bool
			_, _, _ = yysep2865, yyq2865, yy2arr2865
			const yyr2865 bool = false
			yyq2865[0] = true
			var yynn2865 int
			if yyr2865 || yy2arr2865 {
				r.EncodeArrayStart(1)
			} else {
				yynn2865 = 0
				for _, b := range yyq2865 {
					if b {
						yynn2865++
					}
				}
				r.EncodeMapStart(yynn2865)
				yynn2865 = 0
			}
			if yyr2865 || yy2arr2865 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2865[0] {
					yy2867 := &x.KubeletEndpoint
					yy2867.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2865[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kubeletEndpoint"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2868 := &x.KubeletEndpoint
					yy2868.CodecEncodeSelf(e)
				}
			}
			if yyr2865 || yy2arr2865 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeDaemonEndpoints) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2869 := z.DecBinary()
	_ = yym2869
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2870 := r.ContainerType()
		if yyct2870 == codecSelferValueTypeMap1234 {
			yyl2870 := r.ReadMapStart()
			if yyl2870 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2870, d)
			}
		} else if yyct2870 == codecSelferValueTypeArray1234 {
			yyl2870 := r.ReadArrayStart()
			if yyl2870 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2870, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2871Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2871Slc
	var yyhl2871 bool = l >= 0
	for yyj2871 := 0; ; yyj2871++ {
		if yyhl2871 {
			if yyj2871 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2871Slc = r.DecodeBytes(yys2871Slc, true, true)
		yys2871 := string(yys2871Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2871 {
		case "kubeletEndpoint":
			if r.TryDecodeAsNil() {
				x.KubeletEndpoint = DaemonEndpoint{}
			} else {
				yyv2872 := &x.KubeletEndpoint
				yyv2872.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys2871)
		} // end switch yys2871
	} // end for yyj2871
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeDaemonEndpoints) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2873 int
	var yyb2873 bool
	var yyhl2873 bool = l >= 0
	yyj2873++
	if yyhl2873 {
		yyb2873 = yyj2873 > l
	} else {
		yyb2873 = r.CheckBreak()
	}
	if yyb2873 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletEndpoint = DaemonEndpoint{}
	} else {
		yyv2874 := &x.KubeletEndpoint
		yyv2874.CodecDecodeSelf(d)
	}
	for {
		yyj2873++
		if yyhl2873 {
			yyb2873 = yyj2873 > l
		} else {
			yyb2873 = r.CheckBreak()
		}
		if yyb2873 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2873-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeSystemInfo) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2875 := z.EncBinary()
		_ = yym2875
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2876 := !z.EncBinary()
			yy2arr2876 := z.EncBasicHandle().StructToArray
			var yyq2876 [10]bool
			_, _, _ = yysep2876, yyq2876, yy2arr2876
			const yyr2876 bool = false
			var yynn2876 int
			if yyr2876 || yy2arr2876 {
				r.EncodeArrayStart(10)
			} else {
				yynn2876 = 10
				for _, b := range yyq2876 {
					if b {
						yynn2876++
					}
				}
				r.EncodeMapStart(yynn2876)
				yynn2876 = 0
			}
			if yyr2876 || yy2arr2876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2878 := z.EncBinary()
				_ = yym2878
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("machineID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2879 := z.EncBinary()
				_ = yym2879
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.MachineID))
				}
			}
			if yyr2876 || yy2arr2876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2881 := z.EncBinary()
				_ = yym2881
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("systemUUID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2882 := z.EncBinary()
				_ = yym2882
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.SystemUUID))
				}
			}
			if yyr2876 || yy2arr2876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2884 := z.EncBinary()
				_ = yym2884
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("bootID"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2885 := z.EncBinary()
				_ = yym2885
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.BootID))
				}
			}
			if yyr2876 || yy2arr2876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2887 := z.EncBinary()
				_ = yym2887
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kernelVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2888 := z.EncBinary()
				_ = yym2888
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KernelVersion))
				}
			}
			if yyr2876 || yy2arr2876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2890 := z.EncBinary()
				_ = yym2890
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("osImage"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2891 := z.EncBinary()
				_ = yym2891
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OSImage))
				}
			}
			if yyr2876 || yy2arr2876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2893 := z.EncBinary()
				_ = yym2893
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("containerRuntimeVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2894 := z.EncBinary()
				_ = yym2894
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ContainerRuntimeVersion))
				}
			}
			if yyr2876 || yy2arr2876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2896 := z.EncBinary()
				_ = yym2896
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeletVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2897 := z.EncBinary()
				_ = yym2897
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeletVersion))
				}
			}
			if yyr2876 || yy2arr2876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2899 := z.EncBinary()
				_ = yym2899
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kubeProxyVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2900 := z.EncBinary()
				_ = yym2900
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.KubeProxyVersion))
				}
			}
			if yyr2876 || yy2arr2876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2902 := z.EncBinary()
				_ = yym2902
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("operatingSystem"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2903 := z.EncBinary()
				_ = yym2903
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.OperatingSystem))
				}
			}
			if yyr2876 || yy2arr2876 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2905 := z.EncBinary()
				_ = yym2905
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("architecture"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2906 := z.EncBinary()
				_ = yym2906
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Architecture))
				}
			}
			if yyr2876 || yy2arr2876 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeSystemInfo) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2907 := z.DecBinary()
	_ = yym2907
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2908 := r.ContainerType()
		if yyct2908 == codecSelferValueTypeMap1234 {
			yyl2908 := r.ReadMapStart()
			if yyl2908 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2908, d)
			}
		} else if yyct2908 == codecSelferValueTypeArray1234 {
			yyl2908 := r.ReadArrayStart()
			if yyl2908 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2908, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeSystemInfo) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2909Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2909Slc
	var yyhl2909 bool = l >= 0
	for yyj2909 := 0; ; yyj2909++ {
		if yyhl2909 {
			if yyj2909 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2909Slc = r.DecodeBytes(yys2909Slc, true, true)
		yys2909 := string(yys2909Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2909 {
		case "machineID":
			if r.TryDecodeAsNil() {
				x.MachineID = ""
			} else {
				x.MachineID = string(r.DecodeString())
			}
		case "systemUUID":
			if r.TryDecodeAsNil() {
				x.SystemUUID = ""
			} else {
				x.SystemUUID = string(r.DecodeString())
			}
		case "bootID":
			if r.TryDecodeAsNil() {
				x.BootID = ""
			} else {
				x.BootID = string(r.DecodeString())
			}
		case "kernelVersion":
			if r.TryDecodeAsNil() {
				x.KernelVersion = ""
			} else {
				x.KernelVersion = string(r.DecodeString())
			}
		case "osImage":
			if r.TryDecodeAsNil() {
				x.OSImage = ""
			} else {
				x.OSImage = string(r.DecodeString())
			}
		case "containerRuntimeVersion":
			if r.TryDecodeAsNil() {
				x.ContainerRuntimeVersion = ""
			} else {
				x.ContainerRuntimeVersion = string(r.DecodeString())
			}
		case "kubeletVersion":
			if r.TryDecodeAsNil() {
				x.KubeletVersion = ""
			} else {
				x.KubeletVersion = string(r.DecodeString())
			}
		case "kubeProxyVersion":
			if r.TryDecodeAsNil() {
				x.KubeProxyVersion = ""
			} else {
				x.KubeProxyVersion = string(r.DecodeString())
			}
		case "operatingSystem":
			if r.TryDecodeAsNil() {
				x.OperatingSystem = ""
			} else {
				x.OperatingSystem = string(r.DecodeString())
			}
		case "architecture":
			if r.TryDecodeAsNil() {
				x.Architecture = ""
			} else {
				x.Architecture = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys2909)
		} // end switch yys2909
	} // end for yyj2909
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeSystemInfo) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2920 int
	var yyb2920 bool
	var yyhl2920 bool = l >= 0
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MachineID = ""
	} else {
		x.MachineID = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SystemUUID = ""
	} else {
		x.SystemUUID = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.BootID = ""
	} else {
		x.BootID = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KernelVersion = ""
	} else {
		x.KernelVersion = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OSImage = ""
	} else {
		x.OSImage = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ContainerRuntimeVersion = ""
	} else {
		x.ContainerRuntimeVersion = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeletVersion = ""
	} else {
		x.KubeletVersion = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.KubeProxyVersion = ""
	} else {
		x.KubeProxyVersion = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.OperatingSystem = ""
	} else {
		x.OperatingSystem = string(r.DecodeString())
	}
	yyj2920++
	if yyhl2920 {
		yyb2920 = yyj2920 > l
	} else {
		yyb2920 = r.CheckBreak()
	}
	if yyb2920 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Architecture = ""
	} else {
		x.Architecture = string(r.DecodeString())
	}
	for {
		yyj2920++
		if yyhl2920 {
			yyb2920 = yyj2920 > l
		} else {
			yyb2920 = r.CheckBreak()
		}
		if yyb2920 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2920-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2931 := z.EncBinary()
		_ = yym2931
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2932 := !z.EncBinary()
			yy2arr2932 := z.EncBasicHandle().StructToArray
			var yyq2932 [10]bool
			_, _, _ = yysep2932, yyq2932, yy2arr2932
			const yyr2932 bool = false
			yyq2932[0] = len(x.Capacity) != 0
			yyq2932[1] = len(x.Allocatable) != 0
			yyq2932[2] = x.Phase != ""
			yyq2932[3] = len(x.Conditions) != 0
			yyq2932[4] = len(x.Addresses) != 0
			yyq2932[5] = true
			yyq2932[6] = true
			yyq2932[7] = len(x.Images) != 0
			yyq2932[8] = len(x.VolumesInUse) != 0
			yyq2932[9] = len(x.VolumesAttached) != 0
			var yynn2932 int
			if yyr2932 || yy2arr2932 {
				r.EncodeArrayStart(10)
			} else {
				yynn2932 = 0
				for _, b := range yyq2932 {
					if b {
						yynn2932++
					}
				}
				r.EncodeMapStart(yynn2932)
				yynn2932 = 0
			}
			if yyr2932 || yy2arr2932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2932[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2932[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2932 || yy2arr2932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2932[1] {
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2932[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("allocatable"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Allocatable == nil {
						r.EncodeNil()
					} else {
						x.Allocatable.CodecEncodeSelf(e)
					}
				}
			}
			if yyr2932 || yy2arr2932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2932[2] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq2932[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr2932 || yy2arr2932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2932[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2937 := z.EncBinary()
						_ = yym2937
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2932[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym2938 := z.EncBinary()
						_ = yym2938
						if false {
						} else {
							h.encSliceNodeCondition(([]NodeCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr2932 || yy2arr2932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2932[4] {
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2940 := z.EncBinary()
						_ = yym2940
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2932[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("addresses"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Addresses == nil {
						r.EncodeNil()
					} else {
						yym2941 := z.EncBinary()
						_ = yym2941
						if false {
						} else {
							h.encSliceNodeAddress(([]NodeAddress)(x.Addresses), e)
						}
					}
				}
			}
			if yyr2932 || yy2arr2932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2932[5] {
					yy2943 := &x.DaemonEndpoints
					yy2943.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2932[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("daemonEndpoints"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2944 := &x.DaemonEndpoints
					yy2944.CodecEncodeSelf(e)
				}
			}
			if yyr2932 || yy2arr2932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2932[6] {
					yy2946 := &x.NodeInfo
					yy2946.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2932[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("nodeInfo"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy2947 := &x.NodeInfo
					yy2947.CodecEncodeSelf(e)
				}
			}
			if yyr2932 || yy2arr2932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2932[7] {
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2949 := z.EncBinary()
						_ = yym2949
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2932[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("images"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Images == nil {
						r.EncodeNil()
					} else {
						yym2950 := z.EncBinary()
						_ = yym2950
						if false {
						} else {
							h.encSliceContainerImage(([]ContainerImage)(x.Images), e)
						}
					}
				}
			}
			if yyr2932 || yy2arr2932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2932[8] {
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2952 := z.EncBinary()
						_ = yym2952
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2932[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesInUse"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesInUse == nil {
						r.EncodeNil()
					} else {
						yym2953 := z.EncBinary()
						_ = yym2953
						if false {
						} else {
							h.encSliceUniqueVolumeName(([]UniqueVolumeName)(x.VolumesInUse), e)
						}
					}
				}
			}
			if yyr2932 || yy2arr2932 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq2932[9] {
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2955 := z.EncBinary()
						_ = yym2955
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq2932[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("volumesAttached"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.VolumesAttached == nil {
						r.EncodeNil()
					} else {
						yym2956 := z.EncBinary()
						_ = yym2956
						if false {
						} else {
							h.encSliceAttachedVolume(([]AttachedVolume)(x.VolumesAttached), e)
						}
					}
				}
			}
			if yyr2932 || yy2arr2932 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2957 := z.DecBinary()
	_ = yym2957
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct2958 := r.ContainerType()
		if yyct2958 == codecSelferValueTypeMap1234 {
			yyl2958 := r.ReadMapStart()
			if yyl2958 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl2958, d)
			}
		} else if yyct2958 == codecSelferValueTypeArray1234 {
			yyl2958 := r.ReadArrayStart()
			if yyl2958 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl2958, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys2959Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys2959Slc
	var yyhl2959 bool = l >= 0
	for yyj2959 := 0; ; yyj2959++ {
		if yyhl2959 {
			if yyj2959 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys2959Slc = r.DecodeBytes(yys2959Slc, true, true)
		yys2959 := string(yys2959Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys2959 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv2960 := &x.Capacity
				yyv2960.CodecDecodeSelf(d)
			}
		case "allocatable":
			if r.TryDecodeAsNil() {
				x.Allocatable = nil
			} else {
				yyv2961 := &x.Allocatable
				yyv2961.CodecDecodeSelf(d)
			}
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NodePhase(r.DecodeString())
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv2963 := &x.Conditions
				yym2964 := z.DecBinary()
				_ = yym2964
				if false {
				} else {
					h.decSliceNodeCondition((*[]NodeCondition)(yyv2963), d)
				}
			}
		case "addresses":
			if r.TryDecodeAsNil() {
				x.Addresses = nil
			} else {
				yyv2965 := &x.Addresses
				yym2966 := z.DecBinary()
				_ = yym2966
				if false {
				} else {
					h.decSliceNodeAddress((*[]NodeAddress)(yyv2965), d)
				}
			}
		case "daemonEndpoints":
			if r.TryDecodeAsNil() {
				x.DaemonEndpoints = NodeDaemonEndpoints{}
			} else {
				yyv2967 := &x.DaemonEndpoints
				yyv2967.CodecDecodeSelf(d)
			}
		case "nodeInfo":
			if r.TryDecodeAsNil() {
				x.NodeInfo = NodeSystemInfo{}
			} else {
				yyv2968 := &x.NodeInfo
				yyv2968.CodecDecodeSelf(d)
			}
		case "images":
			if r.TryDecodeAsNil() {
				x.Images = nil
			} else {
				yyv2969 := &x.Images
				yym2970 := z.DecBinary()
				_ = yym2970
				if false {
				} else {
					h.decSliceContainerImage((*[]ContainerImage)(yyv2969), d)
				}
			}
		case "volumesInUse":
			if r.TryDecodeAsNil() {
				x.VolumesInUse = nil
			} else {
				yyv2971 := &x.VolumesInUse
				yym2972 := z.DecBinary()
				_ = yym2972
				if false {
				} else {
					h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2971), d)
				}
			}
		case "volumesAttached":
			if r.TryDecodeAsNil() {
				x.VolumesAttached = nil
			} else {
				yyv2973 := &x.VolumesAttached
				yym2974 := z.DecBinary()
				_ = yym2974
				if false {
				} else {
					h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2973), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys2959)
		} // end switch yys2959
	} // end for yyj2959
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj2975 int
	var yyb2975 bool
	var yyhl2975 bool = l >= 0
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv2976 := &x.Capacity
		yyv2976.CodecDecodeSelf(d)
	}
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Allocatable = nil
	} else {
		yyv2977 := &x.Allocatable
		yyv2977.CodecDecodeSelf(d)
	}
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NodePhase(r.DecodeString())
	}
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv2979 := &x.Conditions
		yym2980 := z.DecBinary()
		_ = yym2980
		if false {
		} else {
			h.decSliceNodeCondition((*[]NodeCondition)(yyv2979), d)
		}
	}
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Addresses = nil
	} else {
		yyv2981 := &x.Addresses
		yym2982 := z.DecBinary()
		_ = yym2982
		if false {
		} else {
			h.decSliceNodeAddress((*[]NodeAddress)(yyv2981), d)
		}
	}
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DaemonEndpoints = NodeDaemonEndpoints{}
	} else {
		yyv2983 := &x.DaemonEndpoints
		yyv2983.CodecDecodeSelf(d)
	}
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.NodeInfo = NodeSystemInfo{}
	} else {
		yyv2984 := &x.NodeInfo
		yyv2984.CodecDecodeSelf(d)
	}
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Images = nil
	} else {
		yyv2985 := &x.Images
		yym2986 := z.DecBinary()
		_ = yym2986
		if false {
		} else {
			h.decSliceContainerImage((*[]ContainerImage)(yyv2985), d)
		}
	}
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesInUse = nil
	} else {
		yyv2987 := &x.VolumesInUse
		yym2988 := z.DecBinary()
		_ = yym2988
		if false {
		} else {
			h.decSliceUniqueVolumeName((*[]UniqueVolumeName)(yyv2987), d)
		}
	}
	yyj2975++
	if yyhl2975 {
		yyb2975 = yyj2975 > l
	} else {
		yyb2975 = r.CheckBreak()
	}
	if yyb2975 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.VolumesAttached = nil
	} else {
		yyv2989 := &x.VolumesAttached
		yym2990 := z.DecBinary()
		_ = yym2990
		if false {
		} else {
			h.decSliceAttachedVolume((*[]AttachedVolume)(yyv2989), d)
		}
	}
	for {
		yyj2975++
		if yyhl2975 {
			yyb2975 = yyj2975 > l
		} else {
			yyb2975 = r.CheckBreak()
		}
		if yyb2975 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj2975-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x UniqueVolumeName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym2991 := z.EncBinary()
	_ = yym2991
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *UniqueVolumeName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2992 := z.DecBinary()
	_ = yym2992
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *AttachedVolume) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym2993 := z.EncBinary()
		_ = yym2993
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep2994 := !z.EncBinary()
			yy2arr2994 := z.EncBasicHandle().StructToArray
			var yyq2994 [2]bool
			_, _, _ = yysep2994, yyq2994, yy2arr2994
			const yyr2994 bool = false
			var yynn2994 int
			if yyr2994 || yy2arr2994 {
				r.EncodeArrayStart(2)
			} else {
				yynn2994 = 2
				for _, b := range yyq2994 {
					if b {
						yynn2994++
					}
				}
				r.EncodeMapStart(yynn2994)
				yynn2994 = 0
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Name.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Name.CodecEncodeSelf(e)
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym2997 := z.EncBinary()
				_ = yym2997
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("devicePath"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym2998 := z.EncBinary()
				_ = yym2998
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.DevicePath))
				}
			}
			if yyr2994 || yy2arr2994 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AttachedVolume) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym2999 := z.DecBinary()
	_ = yym2999
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3000 := r.ContainerType()
		if yyct3000 == codecSelferValueTypeMap1234 {
			yyl3000 := r.ReadMapStart()
			if yyl3000 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3000, d)
			}
		} else if yyct3000 == codecSelferValueTypeArray1234 {
			yyl3000 := r.ReadArrayStart()
			if yyl3000 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3000, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AttachedVolume) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3001Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3001Slc
	var yyhl3001 bool = l >= 0
	for yyj3001 := 0; ; yyj3001++ {
		if yyhl3001 {
			if yyj3001 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3001Slc = r.DecodeBytes(yys3001Slc, true, true)
		yys3001 := string(yys3001Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3001 {
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = UniqueVolumeName(r.DecodeString())
			}
		case "devicePath":
			if r.TryDecodeAsNil() {
				x.DevicePath = ""
			} else {
				x.DevicePath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3001)
		} // end switch yys3001
	} // end for yyj3001
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AttachedVolume) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3004 int
	var yyb3004 bool
	var yyhl3004 bool = l >= 0
	yyj3004++
	if yyhl3004 {
		yyb3004 = yyj3004 > l
	} else {
		yyb3004 = r.CheckBreak()
	}
	if yyb3004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = UniqueVolumeName(r.DecodeString())
	}
	yyj3004++
	if yyhl3004 {
		yyb3004 = yyj3004 > l
	} else {
		yyb3004 = r.CheckBreak()
	}
	if yyb3004 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DevicePath = ""
	} else {
		x.DevicePath = string(r.DecodeString())
	}
	for {
		yyj3004++
		if yyhl3004 {
			yyb3004 = yyj3004 > l
		} else {
			yyb3004 = r.CheckBreak()
		}
		if yyb3004 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3004-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *AvoidPods) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3007 := z.EncBinary()
		_ = yym3007
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3008 := !z.EncBinary()
			yy2arr3008 := z.EncBasicHandle().StructToArray
			var yyq3008 [1]bool
			_, _, _ = yysep3008, yyq3008, yy2arr3008
			const yyr3008 bool = false
			yyq3008[0] = len(x.PreferAvoidPods) != 0
			var yynn3008 int
			if yyr3008 || yy2arr3008 {
				r.EncodeArrayStart(1)
			} else {
				yynn3008 = 0
				for _, b := range yyq3008 {
					if b {
						yynn3008++
					}
				}
				r.EncodeMapStart(yynn3008)
				yynn3008 = 0
			}
			if yyr3008 || yy2arr3008 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3008[0] {
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3010 := z.EncBinary()
						_ = yym3010
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3008[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preferAvoidPods"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PreferAvoidPods == nil {
						r.EncodeNil()
					} else {
						yym3011 := z.EncBinary()
						_ = yym3011
						if false {
						} else {
							h.encSlicePreferAvoidPodsEntry(([]PreferAvoidPodsEntry)(x.PreferAvoidPods), e)
						}
					}
				}
			}
			if yyr3008 || yy2arr3008 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *AvoidPods) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3012 := z.DecBinary()
	_ = yym3012
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3013 := r.ContainerType()
		if yyct3013 == codecSelferValueTypeMap1234 {
			yyl3013 := r.ReadMapStart()
			if yyl3013 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3013, d)
			}
		} else if yyct3013 == codecSelferValueTypeArray1234 {
			yyl3013 := r.ReadArrayStart()
			if yyl3013 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3013, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *AvoidPods) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3014Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3014Slc
	var yyhl3014 bool = l >= 0
	for yyj3014 := 0; ; yyj3014++ {
		if yyhl3014 {
			if yyj3014 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3014Slc = r.DecodeBytes(yys3014Slc, true, true)
		yys3014 := string(yys3014Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3014 {
		case "preferAvoidPods":
			if r.TryDecodeAsNil() {
				x.PreferAvoidPods = nil
			} else {
				yyv3015 := &x.PreferAvoidPods
				yym3016 := z.DecBinary()
				_ = yym3016
				if false {
				} else {
					h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3015), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3014)
		} // end switch yys3014
	} // end for yyj3014
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *AvoidPods) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3017 int
	var yyb3017 bool
	var yyhl3017 bool = l >= 0
	yyj3017++
	if yyhl3017 {
		yyb3017 = yyj3017 > l
	} else {
		yyb3017 = r.CheckBreak()
	}
	if yyb3017 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PreferAvoidPods = nil
	} else {
		yyv3018 := &x.PreferAvoidPods
		yym3019 := z.DecBinary()
		_ = yym3019
		if false {
		} else {
			h.decSlicePreferAvoidPodsEntry((*[]PreferAvoidPodsEntry)(yyv3018), d)
		}
	}
	for {
		yyj3017++
		if yyhl3017 {
			yyb3017 = yyj3017 > l
		} else {
			yyb3017 = r.CheckBreak()
		}
		if yyb3017 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3017-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PreferAvoidPodsEntry) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3020 := z.EncBinary()
		_ = yym3020
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3021 := !z.EncBinary()
			yy2arr3021 := z.EncBasicHandle().StructToArray
			var yyq3021 [4]bool
			_, _, _ = yysep3021, yyq3021, yy2arr3021
			const yyr3021 bool = false
			yyq3021[1] = true
			yyq3021[2] = x.Reason != ""
			yyq3021[3] = x.Message != ""
			var yynn3021 int
			if yyr3021 || yy2arr3021 {
				r.EncodeArrayStart(4)
			} else {
				yynn3021 = 1
				for _, b := range yyq3021 {
					if b {
						yynn3021++
					}
				}
				r.EncodeMapStart(yynn3021)
				yynn3021 = 0
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3023 := &x.PodSignature
				yy3023.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("podSignature"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3024 := &x.PodSignature
				yy3024.CodecEncodeSelf(e)
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3021[1] {
					yy3026 := &x.EvictionTime
					yym3027 := z.EncBinary()
					_ = yym3027
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3026) {
					} else if yym3027 {
						z.EncBinaryMarshal(yy3026)
					} else if !yym3027 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3026)
					} else {
						z.EncFallback(yy3026)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3021[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("evictionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3028 := &x.EvictionTime
					yym3029 := z.EncBinary()
					_ = yym3029
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3028) {
					} else if yym3029 {
						z.EncBinaryMarshal(yy3028)
					} else if !yym3029 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3028)
					} else {
						z.EncFallback(yy3028)
					}
				}
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3021[2] {
					yym3031 := z.EncBinary()
					_ = yym3031
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3021[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3032 := z.EncBinary()
					_ = yym3032
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3021[3] {
					yym3034 := z.EncBinary()
					_ = yym3034
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3021[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3035 := z.EncBinary()
					_ = yym3035
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3021 || yy2arr3021 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PreferAvoidPodsEntry) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3036 := z.DecBinary()
	_ = yym3036
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3037 := r.ContainerType()
		if yyct3037 == codecSelferValueTypeMap1234 {
			yyl3037 := r.ReadMapStart()
			if yyl3037 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3037, d)
			}
		} else if yyct3037 == codecSelferValueTypeArray1234 {
			yyl3037 := r.ReadArrayStart()
			if yyl3037 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3037, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3038Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3038Slc
	var yyhl3038 bool = l >= 0
	for yyj3038 := 0; ; yyj3038++ {
		if yyhl3038 {
			if yyj3038 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3038Slc = r.DecodeBytes(yys3038Slc, true, true)
		yys3038 := string(yys3038Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3038 {
		case "podSignature":
			if r.TryDecodeAsNil() {
				x.PodSignature = PodSignature{}
			} else {
				yyv3039 := &x.PodSignature
				yyv3039.CodecDecodeSelf(d)
			}
		case "evictionTime":
			if r.TryDecodeAsNil() {
				x.EvictionTime = pkg2_unversioned.Time{}
			} else {
				yyv3040 := &x.EvictionTime
				yym3041 := z.DecBinary()
				_ = yym3041
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3040) {
				} else if yym3041 {
					z.DecBinaryUnmarshal(yyv3040)
				} else if !yym3041 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3040)
				} else {
					z.DecFallback(yyv3040, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3038)
		} // end switch yys3038
	} // end for yyj3038
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PreferAvoidPodsEntry) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3044 int
	var yyb3044 bool
	var yyhl3044 bool = l >= 0
	yyj3044++
	if yyhl3044 {
		yyb3044 = yyj3044 > l
	} else {
		yyb3044 = r.CheckBreak()
	}
	if yyb3044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.PodSignature = PodSignature{}
	} else {
		yyv3045 := &x.PodSignature
		yyv3045.CodecDecodeSelf(d)
	}
	yyj3044++
	if yyhl3044 {
		yyb3044 = yyj3044 > l
	} else {
		yyb3044 = r.CheckBreak()
	}
	if yyb3044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.EvictionTime = pkg2_unversioned.Time{}
	} else {
		yyv3046 := &x.EvictionTime
		yym3047 := z.DecBinary()
		_ = yym3047
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3046) {
		} else if yym3047 {
			z.DecBinaryUnmarshal(yyv3046)
		} else if !yym3047 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3046)
		} else {
			z.DecFallback(yyv3046, false)
		}
	}
	yyj3044++
	if yyhl3044 {
		yyb3044 = yyj3044 > l
	} else {
		yyb3044 = r.CheckBreak()
	}
	if yyb3044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3044++
	if yyhl3044 {
		yyb3044 = yyj3044 > l
	} else {
		yyb3044 = r.CheckBreak()
	}
	if yyb3044 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3044++
		if yyhl3044 {
			yyb3044 = yyj3044 > l
		} else {
			yyb3044 = r.CheckBreak()
		}
		if yyb3044 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3044-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSignature) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3050 := z.EncBinary()
		_ = yym3050
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3051 := !z.EncBinary()
			yy2arr3051 := z.EncBasicHandle().StructToArray
			var yyq3051 [1]bool
			_, _, _ = yysep3051, yyq3051, yy2arr3051
			const yyr3051 bool = false
			yyq3051[0] = x.PodController != nil
			var yynn3051 int
			if yyr3051 || yy2arr3051 {
				r.EncodeArrayStart(1)
			} else {
				yynn3051 = 0
				for _, b := range yyq3051 {
					if b {
						yynn3051++
					}
				}
				r.EncodeMapStart(yynn3051)
				yynn3051 = 0
			}
			if yyr3051 || yy2arr3051 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3051[0] {
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3051[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("podController"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.PodController == nil {
						r.EncodeNil()
					} else {
						x.PodController.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3051 || yy2arr3051 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSignature) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3053 := z.DecBinary()
	_ = yym3053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3054 := r.ContainerType()
		if yyct3054 == codecSelferValueTypeMap1234 {
			yyl3054 := r.ReadMapStart()
			if yyl3054 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3054, d)
			}
		} else if yyct3054 == codecSelferValueTypeArray1234 {
			yyl3054 := r.ReadArrayStart()
			if yyl3054 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSignature) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3055Slc
	var yyhl3055 bool = l >= 0
	for yyj3055 := 0; ; yyj3055++ {
		if yyhl3055 {
			if yyj3055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3055Slc = r.DecodeBytes(yys3055Slc, true, true)
		yys3055 := string(yys3055Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3055 {
		case "podController":
			if r.TryDecodeAsNil() {
				if x.PodController != nil {
					x.PodController = nil
				}
			} else {
				if x.PodController == nil {
					x.PodController = new(OwnerReference)
				}
				x.PodController.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3055)
		} // end switch yys3055
	} // end for yyj3055
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSignature) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3057 int
	var yyb3057 bool
	var yyhl3057 bool = l >= 0
	yyj3057++
	if yyhl3057 {
		yyb3057 = yyj3057 > l
	} else {
		yyb3057 = r.CheckBreak()
	}
	if yyb3057 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.PodController != nil {
			x.PodController = nil
		}
	} else {
		if x.PodController == nil {
			x.PodController = new(OwnerReference)
		}
		x.PodController.CodecDecodeSelf(d)
	}
	for {
		yyj3057++
		if yyhl3057 {
			yyb3057 = yyj3057 > l
		} else {
			yyb3057 = r.CheckBreak()
		}
		if yyb3057 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3057-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ContainerImage) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3059 := z.EncBinary()
		_ = yym3059
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3060 := !z.EncBinary()
			yy2arr3060 := z.EncBasicHandle().StructToArray
			var yyq3060 [2]bool
			_, _, _ = yysep3060, yyq3060, yy2arr3060
			const yyr3060 bool = false
			yyq3060[1] = x.SizeBytes != 0
			var yynn3060 int
			if yyr3060 || yy2arr3060 {
				r.EncodeArrayStart(2)
			} else {
				yynn3060 = 1
				for _, b := range yyq3060 {
					if b {
						yynn3060++
					}
				}
				r.EncodeMapStart(yynn3060)
				yynn3060 = 0
			}
			if yyr3060 || yy2arr3060 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3062 := z.EncBinary()
					_ = yym3062
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("names"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Names == nil {
					r.EncodeNil()
				} else {
					yym3063 := z.EncBinary()
					_ = yym3063
					if false {
					} else {
						z.F.EncSliceStringV(x.Names, false, e)
					}
				}
			}
			if yyr3060 || yy2arr3060 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3060[1] {
					yym3065 := z.EncBinary()
					_ = yym3065
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3060[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("sizeBytes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3066 := z.EncBinary()
					_ = yym3066
					if false {
					} else {
						r.EncodeInt(int64(x.SizeBytes))
					}
				}
			}
			if yyr3060 || yy2arr3060 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ContainerImage) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3067 := z.DecBinary()
	_ = yym3067
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3068 := r.ContainerType()
		if yyct3068 == codecSelferValueTypeMap1234 {
			yyl3068 := r.ReadMapStart()
			if yyl3068 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3068, d)
			}
		} else if yyct3068 == codecSelferValueTypeArray1234 {
			yyl3068 := r.ReadArrayStart()
			if yyl3068 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3068, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ContainerImage) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3069Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3069Slc
	var yyhl3069 bool = l >= 0
	for yyj3069 := 0; ; yyj3069++ {
		if yyhl3069 {
			if yyj3069 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3069Slc = r.DecodeBytes(yys3069Slc, true, true)
		yys3069 := string(yys3069Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3069 {
		case "names":
			if r.TryDecodeAsNil() {
				x.Names = nil
			} else {
				yyv3070 := &x.Names
				yym3071 := z.DecBinary()
				_ = yym3071
				if false {
				} else {
					z.F.DecSliceStringX(yyv3070, false, d)
				}
			}
		case "sizeBytes":
			if r.TryDecodeAsNil() {
				x.SizeBytes = 0
			} else {
				x.SizeBytes = int64(r.DecodeInt(64))
			}
		default:
			z.DecStructFieldNotFound(-1, yys3069)
		} // end switch yys3069
	} // end for yyj3069
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ContainerImage) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3073 int
	var yyb3073 bool
	var yyhl3073 bool = l >= 0
	yyj3073++
	if yyhl3073 {
		yyb3073 = yyj3073 > l
	} else {
		yyb3073 = r.CheckBreak()
	}
	if yyb3073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Names = nil
	} else {
		yyv3074 := &x.Names
		yym3075 := z.DecBinary()
		_ = yym3075
		if false {
		} else {
			z.F.DecSliceStringX(yyv3074, false, d)
		}
	}
	yyj3073++
	if yyhl3073 {
		yyb3073 = yyj3073 > l
	} else {
		yyb3073 = r.CheckBreak()
	}
	if yyb3073 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.SizeBytes = 0
	} else {
		x.SizeBytes = int64(r.DecodeInt(64))
	}
	for {
		yyj3073++
		if yyhl3073 {
			yyb3073 = yyj3073 > l
		} else {
			yyb3073 = r.CheckBreak()
		}
		if yyb3073 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3073-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3077 := z.EncBinary()
	_ = yym3077
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3078 := z.DecBinary()
	_ = yym3078
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x NodeConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3079 := z.EncBinary()
	_ = yym3079
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3080 := z.DecBinary()
	_ = yym3080
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3081 := z.EncBinary()
		_ = yym3081
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3082 := !z.EncBinary()
			yy2arr3082 := z.EncBasicHandle().StructToArray
			var yyq3082 [6]bool
			_, _, _ = yysep3082, yyq3082, yy2arr3082
			const yyr3082 bool = false
			yyq3082[2] = true
			yyq3082[3] = true
			yyq3082[4] = x.Reason != ""
			yyq3082[5] = x.Message != ""
			var yynn3082 int
			if yyr3082 || yy2arr3082 {
				r.EncodeArrayStart(6)
			} else {
				yynn3082 = 2
				for _, b := range yyq3082 {
					if b {
						yynn3082++
					}
				}
				r.EncodeMapStart(yynn3082)
				yynn3082 = 0
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3082[2] {
					yy3086 := &x.LastHeartbeatTime
					yym3087 := z.EncBinary()
					_ = yym3087
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3086) {
					} else if yym3087 {
						z.EncBinaryMarshal(yy3086)
					} else if !yym3087 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3086)
					} else {
						z.EncFallback(yy3086)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3082[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastHeartbeatTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3088 := &x.LastHeartbeatTime
					yym3089 := z.EncBinary()
					_ = yym3089
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3088) {
					} else if yym3089 {
						z.EncBinaryMarshal(yy3088)
					} else if !yym3089 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3088)
					} else {
						z.EncFallback(yy3088)
					}
				}
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3082[3] {
					yy3091 := &x.LastTransitionTime
					yym3092 := z.EncBinary()
					_ = yym3092
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3091) {
					} else if yym3092 {
						z.EncBinaryMarshal(yy3091)
					} else if !yym3092 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3091)
					} else {
						z.EncFallback(yy3091)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3082[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTransitionTime"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3093 := &x.LastTransitionTime
					yym3094 := z.EncBinary()
					_ = yym3094
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3093) {
					} else if yym3094 {
						z.EncBinaryMarshal(yy3093)
					} else if !yym3094 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3093)
					} else {
						z.EncFallback(yy3093)
					}
				}
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3082[4] {
					yym3096 := z.EncBinary()
					_ = yym3096
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3082[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3097 := z.EncBinary()
					_ = yym3097
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3082[5] {
					yym3099 := z.EncBinary()
					_ = yym3099
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3082[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3100 := z.EncBinary()
					_ = yym3100
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3082 || yy2arr3082 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3101 := z.DecBinary()
	_ = yym3101
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3102 := r.ContainerType()
		if yyct3102 == codecSelferValueTypeMap1234 {
			yyl3102 := r.ReadMapStart()
			if yyl3102 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3102, d)
			}
		} else if yyct3102 == codecSelferValueTypeArray1234 {
			yyl3102 := r.ReadArrayStart()
			if yyl3102 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3102, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3103Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3103Slc
	var yyhl3103 bool = l >= 0
	for yyj3103 := 0; ; yyj3103++ {
		if yyhl3103 {
			if yyj3103 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3103Slc = r.DecodeBytes(yys3103Slc, true, true)
		yys3103 := string(yys3103Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3103 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "lastHeartbeatTime":
			if r.TryDecodeAsNil() {
				x.LastHeartbeatTime = pkg2_unversioned.Time{}
			} else {
				yyv3106 := &x.LastHeartbeatTime
				yym3107 := z.DecBinary()
				_ = yym3107
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3106) {
				} else if yym3107 {
					z.DecBinaryUnmarshal(yyv3106)
				} else if !yym3107 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3106)
				} else {
					z.DecFallback(yyv3106, false)
				}
			}
		case "lastTransitionTime":
			if r.TryDecodeAsNil() {
				x.LastTransitionTime = pkg2_unversioned.Time{}
			} else {
				yyv3108 := &x.LastTransitionTime
				yym3109 := z.DecBinary()
				_ = yym3109
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3108) {
				} else if yym3109 {
					z.DecBinaryUnmarshal(yyv3108)
				} else if !yym3109 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3108)
				} else {
					z.DecFallback(yyv3108, false)
				}
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3103)
		} // end switch yys3103
	} // end for yyj3103
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3112 int
	var yyb3112 bool
	var yyhl3112 bool = l >= 0
	yyj3112++
	if yyhl3112 {
		yyb3112 = yyj3112 > l
	} else {
		yyb3112 = r.CheckBreak()
	}
	if yyb3112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeConditionType(r.DecodeString())
	}
	yyj3112++
	if yyhl3112 {
		yyb3112 = yyj3112 > l
	} else {
		yyb3112 = r.CheckBreak()
	}
	if yyb3112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj3112++
	if yyhl3112 {
		yyb3112 = yyj3112 > l
	} else {
		yyb3112 = r.CheckBreak()
	}
	if yyb3112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastHeartbeatTime = pkg2_unversioned.Time{}
	} else {
		yyv3115 := &x.LastHeartbeatTime
		yym3116 := z.DecBinary()
		_ = yym3116
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3115) {
		} else if yym3116 {
			z.DecBinaryUnmarshal(yyv3115)
		} else if !yym3116 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3115)
		} else {
			z.DecFallback(yyv3115, false)
		}
	}
	yyj3112++
	if yyhl3112 {
		yyb3112 = yyj3112 > l
	} else {
		yyb3112 = r.CheckBreak()
	}
	if yyb3112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTransitionTime = pkg2_unversioned.Time{}
	} else {
		yyv3117 := &x.LastTransitionTime
		yym3118 := z.DecBinary()
		_ = yym3118
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3117) {
		} else if yym3118 {
			z.DecBinaryUnmarshal(yyv3117)
		} else if !yym3118 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3117)
		} else {
			z.DecFallback(yyv3117, false)
		}
	}
	yyj3112++
	if yyhl3112 {
		yyb3112 = yyj3112 > l
	} else {
		yyb3112 = r.CheckBreak()
	}
	if yyb3112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3112++
	if yyhl3112 {
		yyb3112 = yyj3112 > l
	} else {
		yyb3112 = r.CheckBreak()
	}
	if yyb3112 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	for {
		yyj3112++
		if yyhl3112 {
			yyb3112 = yyj3112 > l
		} else {
			yyb3112 = r.CheckBreak()
		}
		if yyb3112 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3112-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NodeAddressType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3121 := z.EncBinary()
	_ = yym3121
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NodeAddressType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3122 := z.DecBinary()
	_ = yym3122
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NodeAddress) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3123 := z.EncBinary()
		_ = yym3123
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3124 := !z.EncBinary()
			yy2arr3124 := z.EncBasicHandle().StructToArray
			var yyq3124 [2]bool
			_, _, _ = yysep3124, yyq3124, yy2arr3124
			const yyr3124 bool = false
			var yynn3124 int
			if yyr3124 || yy2arr3124 {
				r.EncodeArrayStart(2)
			} else {
				yynn3124 = 2
				for _, b := range yyq3124 {
					if b {
						yynn3124++
					}
				}
				r.EncodeMapStart(yynn3124)
				yynn3124 = 0
			}
			if yyr3124 || yy2arr3124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr3124 || yy2arr3124 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3127 := z.EncBinary()
				_ = yym3127
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("address"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3128 := z.EncBinary()
				_ = yym3128
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Address))
				}
			}
			if yyr3124 || yy2arr3124 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeAddress) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3129 := z.DecBinary()
	_ = yym3129
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3130 := r.ContainerType()
		if yyct3130 == codecSelferValueTypeMap1234 {
			yyl3130 := r.ReadMapStart()
			if yyl3130 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3130, d)
			}
		} else if yyct3130 == codecSelferValueTypeArray1234 {
			yyl3130 := r.ReadArrayStart()
			if yyl3130 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3130, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeAddress) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3131Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3131Slc
	var yyhl3131 bool = l >= 0
	for yyj3131 := 0; ; yyj3131++ {
		if yyhl3131 {
			if yyj3131 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3131Slc = r.DecodeBytes(yys3131Slc, true, true)
		yys3131 := string(yys3131Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3131 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = NodeAddressType(r.DecodeString())
			}
		case "address":
			if r.TryDecodeAsNil() {
				x.Address = ""
			} else {
				x.Address = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3131)
		} // end switch yys3131
	} // end for yyj3131
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeAddress) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3134 int
	var yyb3134 bool
	var yyhl3134 bool = l >= 0
	yyj3134++
	if yyhl3134 {
		yyb3134 = yyj3134 > l
	} else {
		yyb3134 = r.CheckBreak()
	}
	if yyb3134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = NodeAddressType(r.DecodeString())
	}
	yyj3134++
	if yyhl3134 {
		yyb3134 = yyj3134 > l
	} else {
		yyb3134 = r.CheckBreak()
	}
	if yyb3134 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Address = ""
	} else {
		x.Address = string(r.DecodeString())
	}
	for {
		yyj3134++
		if yyhl3134 {
			yyb3134 = yyj3134 > l
		} else {
			yyb3134 = r.CheckBreak()
		}
		if yyb3134 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3134-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeResources) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3137 := z.EncBinary()
		_ = yym3137
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3138 := !z.EncBinary()
			yy2arr3138 := z.EncBasicHandle().StructToArray
			var yyq3138 [1]bool
			_, _, _ = yysep3138, yyq3138, yy2arr3138
			const yyr3138 bool = false
			yyq3138[0] = len(x.Capacity) != 0
			var yynn3138 int
			if yyr3138 || yy2arr3138 {
				r.EncodeArrayStart(1)
			} else {
				yynn3138 = 0
				for _, b := range yyq3138 {
					if b {
						yynn3138++
					}
				}
				r.EncodeMapStart(yynn3138)
				yynn3138 = 0
			}
			if yyr3138 || yy2arr3138 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3138[0] {
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3138[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capacity"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capacity == nil {
						r.EncodeNil()
					} else {
						x.Capacity.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3138 || yy2arr3138 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeResources) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3140 := z.DecBinary()
	_ = yym3140
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3141 := r.ContainerType()
		if yyct3141 == codecSelferValueTypeMap1234 {
			yyl3141 := r.ReadMapStart()
			if yyl3141 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3141, d)
			}
		} else if yyct3141 == codecSelferValueTypeArray1234 {
			yyl3141 := r.ReadArrayStart()
			if yyl3141 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3141, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeResources) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3142Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3142Slc
	var yyhl3142 bool = l >= 0
	for yyj3142 := 0; ; yyj3142++ {
		if yyhl3142 {
			if yyj3142 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3142Slc = r.DecodeBytes(yys3142Slc, true, true)
		yys3142 := string(yys3142Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3142 {
		case "capacity":
			if r.TryDecodeAsNil() {
				x.Capacity = nil
			} else {
				yyv3143 := &x.Capacity
				yyv3143.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3142)
		} // end switch yys3142
	} // end for yyj3142
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeResources) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3144 int
	var yyb3144 bool
	var yyhl3144 bool = l >= 0
	yyj3144++
	if yyhl3144 {
		yyb3144 = yyj3144 > l
	} else {
		yyb3144 = r.CheckBreak()
	}
	if yyb3144 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Capacity = nil
	} else {
		yyv3145 := &x.Capacity
		yyv3145.CodecDecodeSelf(d)
	}
	for {
		yyj3144++
		if yyhl3144 {
			yyb3144 = yyj3144 > l
		} else {
			yyb3144 = r.CheckBreak()
		}
		if yyb3144 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3144-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3146 := z.EncBinary()
	_ = yym3146
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3147 := z.DecBinary()
	_ = yym3147
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ResourceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3148 := z.EncBinary()
		_ = yym3148
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			h.encResourceList((ResourceList)(x), e)
		}
	}
}

func (x *ResourceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3149 := z.DecBinary()
	_ = yym3149
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		h.decResourceList((*ResourceList)(x), d)
	}
}

func (x *Node) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3150 := z.EncBinary()
		_ = yym3150
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3151 := !z.EncBinary()
			yy2arr3151 := z.EncBasicHandle().StructToArray
			var yyq3151 [5]bool
			_, _, _ = yysep3151, yyq3151, yy2arr3151
			const yyr3151 bool = false
			yyq3151[0] = x.Kind != ""
			yyq3151[1] = x.APIVersion != ""
			yyq3151[2] = true
			yyq3151[3] = true
			yyq3151[4] = true
			var yynn3151 int
			if yyr3151 || yy2arr3151 {
				r.EncodeArrayStart(5)
			} else {
				yynn3151 = 0
				for _, b := range yyq3151 {
					if b {
						yynn3151++
					}
				}
				r.EncodeMapStart(yynn3151)
				yynn3151 = 0
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3151[0] {
					yym3153 := z.EncBinary()
					_ = yym3153
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3151[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3154 := z.EncBinary()
					_ = yym3154
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3151[1] {
					yym3156 := z.EncBinary()
					_ = yym3156
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3151[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3157 := z.EncBinary()
					_ = yym3157
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3151[2] {
					yy3159 := &x.ObjectMeta
					yy3159.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3151[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3160 := &x.ObjectMeta
					yy3160.CodecEncodeSelf(e)
				}
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3151[3] {
					yy3162 := &x.Spec
					yy3162.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3151[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3163 := &x.Spec
					yy3163.CodecEncodeSelf(e)
				}
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3151[4] {
					yy3165 := &x.Status
					yy3165.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3151[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3166 := &x.Status
					yy3166.CodecEncodeSelf(e)
				}
			}
			if yyr3151 || yy2arr3151 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Node) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3167 := z.DecBinary()
	_ = yym3167
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3168 := r.ContainerType()
		if yyct3168 == codecSelferValueTypeMap1234 {
			yyl3168 := r.ReadMapStart()
			if yyl3168 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3168, d)
			}
		} else if yyct3168 == codecSelferValueTypeArray1234 {
			yyl3168 := r.ReadArrayStart()
			if yyl3168 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3168, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Node) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3169Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3169Slc
	var yyhl3169 bool = l >= 0
	for yyj3169 := 0; ; yyj3169++ {
		if yyhl3169 {
			if yyj3169 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3169Slc = r.DecodeBytes(yys3169Slc, true, true)
		yys3169 := string(yys3169Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3169 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3172 := &x.ObjectMeta
				yyv3172.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NodeSpec{}
			} else {
				yyv3173 := &x.Spec
				yyv3173.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NodeStatus{}
			} else {
				yyv3174 := &x.Status
				yyv3174.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3169)
		} // end switch yys3169
	} // end for yyj3169
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Node) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3175 int
	var yyb3175 bool
	var yyhl3175 bool = l >= 0
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3178 := &x.ObjectMeta
		yyv3178.CodecDecodeSelf(d)
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NodeSpec{}
	} else {
		yyv3179 := &x.Spec
		yyv3179.CodecDecodeSelf(d)
	}
	yyj3175++
	if yyhl3175 {
		yyb3175 = yyj3175 > l
	} else {
		yyb3175 = r.CheckBreak()
	}
	if yyb3175 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NodeStatus{}
	} else {
		yyv3180 := &x.Status
		yyv3180.CodecDecodeSelf(d)
	}
	for {
		yyj3175++
		if yyhl3175 {
			yyb3175 = yyj3175 > l
		} else {
			yyb3175 = r.CheckBreak()
		}
		if yyb3175 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3175-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3181 := z.EncBinary()
		_ = yym3181
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3182 := !z.EncBinary()
			yy2arr3182 := z.EncBasicHandle().StructToArray
			var yyq3182 [4]bool
			_, _, _ = yysep3182, yyq3182, yy2arr3182
			const yyr3182 bool = false
			yyq3182[0] = x.Kind != ""
			yyq3182[1] = x.APIVersion != ""
			yyq3182[2] = true
			var yynn3182 int
			if yyr3182 || yy2arr3182 {
				r.EncodeArrayStart(4)
			} else {
				yynn3182 = 1
				for _, b := range yyq3182 {
					if b {
						yynn3182++
					}
				}
				r.EncodeMapStart(yynn3182)
				yynn3182 = 0
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[0] {
					yym3184 := z.EncBinary()
					_ = yym3184
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3182[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3185 := z.EncBinary()
					_ = yym3185
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[1] {
					yym3187 := z.EncBinary()
					_ = yym3187
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3182[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3188 := z.EncBinary()
					_ = yym3188
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3182[2] {
					yy3190 := &x.ListMeta
					yym3191 := z.EncBinary()
					_ = yym3191
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3190) {
					} else {
						z.EncFallback(yy3190)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3182[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3192 := &x.ListMeta
					yym3193 := z.EncBinary()
					_ = yym3193
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3192) {
					} else {
						z.EncFallback(yy3192)
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3195 := z.EncBinary()
					_ = yym3195
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3196 := z.EncBinary()
					_ = yym3196
					if false {
					} else {
						h.encSliceNode(([]Node)(x.Items), e)
					}
				}
			}
			if yyr3182 || yy2arr3182 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3197 := z.DecBinary()
	_ = yym3197
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3198 := r.ContainerType()
		if yyct3198 == codecSelferValueTypeMap1234 {
			yyl3198 := r.ReadMapStart()
			if yyl3198 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3198, d)
			}
		} else if yyct3198 == codecSelferValueTypeArray1234 {
			yyl3198 := r.ReadArrayStart()
			if yyl3198 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3198, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3199Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3199Slc
	var yyhl3199 bool = l >= 0
	for yyj3199 := 0; ; yyj3199++ {
		if yyhl3199 {
			if yyj3199 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3199Slc = r.DecodeBytes(yys3199Slc, true, true)
		yys3199 := string(yys3199Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3199 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3202 := &x.ListMeta
				yym3203 := z.DecBinary()
				_ = yym3203
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3202) {
				} else {
					z.DecFallback(yyv3202, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3204 := &x.Items
				yym3205 := z.DecBinary()
				_ = yym3205
				if false {
				} else {
					h.decSliceNode((*[]Node)(yyv3204), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3199)
		} // end switch yys3199
	} // end for yyj3199
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3206 int
	var yyb3206 bool
	var yyhl3206 bool = l >= 0
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3209 := &x.ListMeta
		yym3210 := z.DecBinary()
		_ = yym3210
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3209) {
		} else {
			z.DecFallback(yyv3209, false)
		}
	}
	yyj3206++
	if yyhl3206 {
		yyb3206 = yyj3206 > l
	} else {
		yyb3206 = r.CheckBreak()
	}
	if yyb3206 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3211 := &x.Items
		yym3212 := z.DecBinary()
		_ = yym3212
		if false {
		} else {
			h.decSliceNode((*[]Node)(yyv3211), d)
		}
	}
	for {
		yyj3206++
		if yyhl3206 {
			yyb3206 = yyj3206 > l
		} else {
			yyb3206 = r.CheckBreak()
		}
		if yyb3206 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3206-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3213 := z.EncBinary()
		_ = yym3213
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3214 := !z.EncBinary()
			yy2arr3214 := z.EncBasicHandle().StructToArray
			var yyq3214 [1]bool
			_, _, _ = yysep3214, yyq3214, yy2arr3214
			const yyr3214 bool = false
			var yynn3214 int
			if yyr3214 || yy2arr3214 {
				r.EncodeArrayStart(1)
			} else {
				yynn3214 = 1
				for _, b := range yyq3214 {
					if b {
						yynn3214++
					}
				}
				r.EncodeMapStart(yynn3214)
				yynn3214 = 0
			}
			if yyr3214 || yy2arr3214 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3216 := z.EncBinary()
					_ = yym3216
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Finalizers"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Finalizers == nil {
					r.EncodeNil()
				} else {
					yym3217 := z.EncBinary()
					_ = yym3217
					if false {
					} else {
						h.encSliceFinalizerName(([]FinalizerName)(x.Finalizers), e)
					}
				}
			}
			if yyr3214 || yy2arr3214 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3218 := z.DecBinary()
	_ = yym3218
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3219 := r.ContainerType()
		if yyct3219 == codecSelferValueTypeMap1234 {
			yyl3219 := r.ReadMapStart()
			if yyl3219 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3219, d)
			}
		} else if yyct3219 == codecSelferValueTypeArray1234 {
			yyl3219 := r.ReadArrayStart()
			if yyl3219 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3219, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3220Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3220Slc
	var yyhl3220 bool = l >= 0
	for yyj3220 := 0; ; yyj3220++ {
		if yyhl3220 {
			if yyj3220 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3220Slc = r.DecodeBytes(yys3220Slc, true, true)
		yys3220 := string(yys3220Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3220 {
		case "Finalizers":
			if r.TryDecodeAsNil() {
				x.Finalizers = nil
			} else {
				yyv3221 := &x.Finalizers
				yym3222 := z.DecBinary()
				_ = yym3222
				if false {
				} else {
					h.decSliceFinalizerName((*[]FinalizerName)(yyv3221), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3220)
		} // end switch yys3220
	} // end for yyj3220
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3223 int
	var yyb3223 bool
	var yyhl3223 bool = l >= 0
	yyj3223++
	if yyhl3223 {
		yyb3223 = yyj3223 > l
	} else {
		yyb3223 = r.CheckBreak()
	}
	if yyb3223 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Finalizers = nil
	} else {
		yyv3224 := &x.Finalizers
		yym3225 := z.DecBinary()
		_ = yym3225
		if false {
		} else {
			h.decSliceFinalizerName((*[]FinalizerName)(yyv3224), d)
		}
	}
	for {
		yyj3223++
		if yyhl3223 {
			yyb3223 = yyj3223 > l
		} else {
			yyb3223 = r.CheckBreak()
		}
		if yyb3223 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3223-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x FinalizerName) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3226 := z.EncBinary()
	_ = yym3226
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *FinalizerName) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3227 := z.DecBinary()
	_ = yym3227
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *NamespaceStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3228 := z.EncBinary()
		_ = yym3228
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3229 := !z.EncBinary()
			yy2arr3229 := z.EncBasicHandle().StructToArray
			var yyq3229 [1]bool
			_, _, _ = yysep3229, yyq3229, yy2arr3229
			const yyr3229 bool = false
			yyq3229[0] = x.Phase != ""
			var yynn3229 int
			if yyr3229 || yy2arr3229 {
				r.EncodeArrayStart(1)
			} else {
				yynn3229 = 0
				for _, b := range yyq3229 {
					if b {
						yynn3229++
					}
				}
				r.EncodeMapStart(yynn3229)
				yynn3229 = 0
			}
			if yyr3229 || yy2arr3229 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3229[0] {
					x.Phase.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3229[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("phase"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Phase.CodecEncodeSelf(e)
				}
			}
			if yyr3229 || yy2arr3229 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3231 := z.DecBinary()
	_ = yym3231
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3232 := r.ContainerType()
		if yyct3232 == codecSelferValueTypeMap1234 {
			yyl3232 := r.ReadMapStart()
			if yyl3232 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3232, d)
			}
		} else if yyct3232 == codecSelferValueTypeArray1234 {
			yyl3232 := r.ReadArrayStart()
			if yyl3232 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3232, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3233Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3233Slc
	var yyhl3233 bool = l >= 0
	for yyj3233 := 0; ; yyj3233++ {
		if yyhl3233 {
			if yyj3233 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3233Slc = r.DecodeBytes(yys3233Slc, true, true)
		yys3233 := string(yys3233Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3233 {
		case "phase":
			if r.TryDecodeAsNil() {
				x.Phase = ""
			} else {
				x.Phase = NamespacePhase(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3233)
		} // end switch yys3233
	} // end for yyj3233
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3235 int
	var yyb3235 bool
	var yyhl3235 bool = l >= 0
	yyj3235++
	if yyhl3235 {
		yyb3235 = yyj3235 > l
	} else {
		yyb3235 = r.CheckBreak()
	}
	if yyb3235 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Phase = ""
	} else {
		x.Phase = NamespacePhase(r.DecodeString())
	}
	for {
		yyj3235++
		if yyhl3235 {
			yyb3235 = yyj3235 > l
		} else {
			yyb3235 = r.CheckBreak()
		}
		if yyb3235 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3235-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x NamespacePhase) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3237 := z.EncBinary()
	_ = yym3237
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *NamespacePhase) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3238 := z.DecBinary()
	_ = yym3238
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *Namespace) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3239 := z.EncBinary()
		_ = yym3239
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3240 := !z.EncBinary()
			yy2arr3240 := z.EncBasicHandle().StructToArray
			var yyq3240 [5]bool
			_, _, _ = yysep3240, yyq3240, yy2arr3240
			const yyr3240 bool = false
			yyq3240[0] = x.Kind != ""
			yyq3240[1] = x.APIVersion != ""
			yyq3240[2] = true
			yyq3240[3] = true
			yyq3240[4] = true
			var yynn3240 int
			if yyr3240 || yy2arr3240 {
				r.EncodeArrayStart(5)
			} else {
				yynn3240 = 0
				for _, b := range yyq3240 {
					if b {
						yynn3240++
					}
				}
				r.EncodeMapStart(yynn3240)
				yynn3240 = 0
			}
			if yyr3240 || yy2arr3240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3240[0] {
					yym3242 := z.EncBinary()
					_ = yym3242
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3240[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3243 := z.EncBinary()
					_ = yym3243
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3240 || yy2arr3240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3240[1] {
					yym3245 := z.EncBinary()
					_ = yym3245
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3240[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3246 := z.EncBinary()
					_ = yym3246
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3240 || yy2arr3240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3240[2] {
					yy3248 := &x.ObjectMeta
					yy3248.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3240[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3249 := &x.ObjectMeta
					yy3249.CodecEncodeSelf(e)
				}
			}
			if yyr3240 || yy2arr3240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3240[3] {
					yy3251 := &x.Spec
					yy3251.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3240[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3252 := &x.Spec
					yy3252.CodecEncodeSelf(e)
				}
			}
			if yyr3240 || yy2arr3240 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3240[4] {
					yy3254 := &x.Status
					yy3254.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3240[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3255 := &x.Status
					yy3255.CodecEncodeSelf(e)
				}
			}
			if yyr3240 || yy2arr3240 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Namespace) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3256 := z.DecBinary()
	_ = yym3256
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3257 := r.ContainerType()
		if yyct3257 == codecSelferValueTypeMap1234 {
			yyl3257 := r.ReadMapStart()
			if yyl3257 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3257, d)
			}
		} else if yyct3257 == codecSelferValueTypeArray1234 {
			yyl3257 := r.ReadArrayStart()
			if yyl3257 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3257, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Namespace) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3258Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3258Slc
	var yyhl3258 bool = l >= 0
	for yyj3258 := 0; ; yyj3258++ {
		if yyhl3258 {
			if yyj3258 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3258Slc = r.DecodeBytes(yys3258Slc, true, true)
		yys3258 := string(yys3258Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3258 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3261 := &x.ObjectMeta
				yyv3261.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = NamespaceSpec{}
			} else {
				yyv3262 := &x.Spec
				yyv3262.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = NamespaceStatus{}
			} else {
				yyv3263 := &x.Status
				yyv3263.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3258)
		} // end switch yys3258
	} // end for yyj3258
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Namespace) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3264 int
	var yyb3264 bool
	var yyhl3264 bool = l >= 0
	yyj3264++
	if yyhl3264 {
		yyb3264 = yyj3264 > l
	} else {
		yyb3264 = r.CheckBreak()
	}
	if yyb3264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3264++
	if yyhl3264 {
		yyb3264 = yyj3264 > l
	} else {
		yyb3264 = r.CheckBreak()
	}
	if yyb3264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3264++
	if yyhl3264 {
		yyb3264 = yyj3264 > l
	} else {
		yyb3264 = r.CheckBreak()
	}
	if yyb3264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3267 := &x.ObjectMeta
		yyv3267.CodecDecodeSelf(d)
	}
	yyj3264++
	if yyhl3264 {
		yyb3264 = yyj3264 > l
	} else {
		yyb3264 = r.CheckBreak()
	}
	if yyb3264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = NamespaceSpec{}
	} else {
		yyv3268 := &x.Spec
		yyv3268.CodecDecodeSelf(d)
	}
	yyj3264++
	if yyhl3264 {
		yyb3264 = yyj3264 > l
	} else {
		yyb3264 = r.CheckBreak()
	}
	if yyb3264 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = NamespaceStatus{}
	} else {
		yyv3269 := &x.Status
		yyv3269.CodecDecodeSelf(d)
	}
	for {
		yyj3264++
		if yyhl3264 {
			yyb3264 = yyj3264 > l
		} else {
			yyb3264 = r.CheckBreak()
		}
		if yyb3264 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3264-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NamespaceList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3270 := z.EncBinary()
		_ = yym3270
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3271 := !z.EncBinary()
			yy2arr3271 := z.EncBasicHandle().StructToArray
			var yyq3271 [4]bool
			_, _, _ = yysep3271, yyq3271, yy2arr3271
			const yyr3271 bool = false
			yyq3271[0] = x.Kind != ""
			yyq3271[1] = x.APIVersion != ""
			yyq3271[2] = true
			var yynn3271 int
			if yyr3271 || yy2arr3271 {
				r.EncodeArrayStart(4)
			} else {
				yynn3271 = 1
				for _, b := range yyq3271 {
					if b {
						yynn3271++
					}
				}
				r.EncodeMapStart(yynn3271)
				yynn3271 = 0
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3271[0] {
					yym3273 := z.EncBinary()
					_ = yym3273
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3271[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3274 := z.EncBinary()
					_ = yym3274
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3271[1] {
					yym3276 := z.EncBinary()
					_ = yym3276
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3271[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3277 := z.EncBinary()
					_ = yym3277
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3271[2] {
					yy3279 := &x.ListMeta
					yym3280 := z.EncBinary()
					_ = yym3280
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3279) {
					} else {
						z.EncFallback(yy3279)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3271[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3281 := &x.ListMeta
					yym3282 := z.EncBinary()
					_ = yym3282
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3281) {
					} else {
						z.EncFallback(yy3281)
					}
				}
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3284 := z.EncBinary()
					_ = yym3284
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3285 := z.EncBinary()
					_ = yym3285
					if false {
					} else {
						h.encSliceNamespace(([]Namespace)(x.Items), e)
					}
				}
			}
			if yyr3271 || yy2arr3271 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NamespaceList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3286 := z.DecBinary()
	_ = yym3286
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3287 := r.ContainerType()
		if yyct3287 == codecSelferValueTypeMap1234 {
			yyl3287 := r.ReadMapStart()
			if yyl3287 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3287, d)
			}
		} else if yyct3287 == codecSelferValueTypeArray1234 {
			yyl3287 := r.ReadArrayStart()
			if yyl3287 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3287, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NamespaceList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3288Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3288Slc
	var yyhl3288 bool = l >= 0
	for yyj3288 := 0; ; yyj3288++ {
		if yyhl3288 {
			if yyj3288 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3288Slc = r.DecodeBytes(yys3288Slc, true, true)
		yys3288 := string(yys3288Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3288 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3291 := &x.ListMeta
				yym3292 := z.DecBinary()
				_ = yym3292
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3291) {
				} else {
					z.DecFallback(yyv3291, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3293 := &x.Items
				yym3294 := z.DecBinary()
				_ = yym3294
				if false {
				} else {
					h.decSliceNamespace((*[]Namespace)(yyv3293), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3288)
		} // end switch yys3288
	} // end for yyj3288
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NamespaceList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3295 int
	var yyb3295 bool
	var yyhl3295 bool = l >= 0
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3298 := &x.ListMeta
		yym3299 := z.DecBinary()
		_ = yym3299
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3298) {
		} else {
			z.DecFallback(yyv3298, false)
		}
	}
	yyj3295++
	if yyhl3295 {
		yyb3295 = yyj3295 > l
	} else {
		yyb3295 = r.CheckBreak()
	}
	if yyb3295 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3300 := &x.Items
		yym3301 := z.DecBinary()
		_ = yym3301
		if false {
		} else {
			h.decSliceNamespace((*[]Namespace)(yyv3300), d)
		}
	}
	for {
		yyj3295++
		if yyhl3295 {
			yyb3295 = yyj3295 > l
		} else {
			yyb3295 = r.CheckBreak()
		}
		if yyb3295 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3295-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Binding) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3302 := z.EncBinary()
		_ = yym3302
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3303 := !z.EncBinary()
			yy2arr3303 := z.EncBasicHandle().StructToArray
			var yyq3303 [4]bool
			_, _, _ = yysep3303, yyq3303, yy2arr3303
			const yyr3303 bool = false
			yyq3303[0] = x.Kind != ""
			yyq3303[1] = x.APIVersion != ""
			yyq3303[2] = true
			var yynn3303 int
			if yyr3303 || yy2arr3303 {
				r.EncodeArrayStart(4)
			} else {
				yynn3303 = 1
				for _, b := range yyq3303 {
					if b {
						yynn3303++
					}
				}
				r.EncodeMapStart(yynn3303)
				yynn3303 = 0
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[0] {
					yym3305 := z.EncBinary()
					_ = yym3305
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3303[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3306 := z.EncBinary()
					_ = yym3306
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[1] {
					yym3308 := z.EncBinary()
					_ = yym3308
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3303[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3309 := z.EncBinary()
					_ = yym3309
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3303[2] {
					yy3311 := &x.ObjectMeta
					yy3311.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3303[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3312 := &x.ObjectMeta
					yy3312.CodecEncodeSelf(e)
				}
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yy3314 := &x.Target
				yy3314.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("target"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yy3315 := &x.Target
				yy3315.CodecEncodeSelf(e)
			}
			if yyr3303 || yy2arr3303 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Binding) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3316 := z.DecBinary()
	_ = yym3316
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3317 := r.ContainerType()
		if yyct3317 == codecSelferValueTypeMap1234 {
			yyl3317 := r.ReadMapStart()
			if yyl3317 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3317, d)
			}
		} else if yyct3317 == codecSelferValueTypeArray1234 {
			yyl3317 := r.ReadArrayStart()
			if yyl3317 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3317, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Binding) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3318Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3318Slc
	var yyhl3318 bool = l >= 0
	for yyj3318 := 0; ; yyj3318++ {
		if yyhl3318 {
			if yyj3318 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3318Slc = r.DecodeBytes(yys3318Slc, true, true)
		yys3318 := string(yys3318Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3318 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3321 := &x.ObjectMeta
				yyv3321.CodecDecodeSelf(d)
			}
		case "target":
			if r.TryDecodeAsNil() {
				x.Target = ObjectReference{}
			} else {
				yyv3322 := &x.Target
				yyv3322.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3318)
		} // end switch yys3318
	} // end for yyj3318
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Binding) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3323 int
	var yyb3323 bool
	var yyhl3323 bool = l >= 0
	yyj3323++
	if yyhl3323 {
		yyb3323 = yyj3323 > l
	} else {
		yyb3323 = r.CheckBreak()
	}
	if yyb3323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3323++
	if yyhl3323 {
		yyb3323 = yyj3323 > l
	} else {
		yyb3323 = r.CheckBreak()
	}
	if yyb3323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3323++
	if yyhl3323 {
		yyb3323 = yyj3323 > l
	} else {
		yyb3323 = r.CheckBreak()
	}
	if yyb3323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3326 := &x.ObjectMeta
		yyv3326.CodecDecodeSelf(d)
	}
	yyj3323++
	if yyhl3323 {
		yyb3323 = yyj3323 > l
	} else {
		yyb3323 = r.CheckBreak()
	}
	if yyb3323 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Target = ObjectReference{}
	} else {
		yyv3327 := &x.Target
		yyv3327.CodecDecodeSelf(d)
	}
	for {
		yyj3323++
		if yyhl3323 {
			yyb3323 = yyj3323 > l
		} else {
			yyb3323 = r.CheckBreak()
		}
		if yyb3323 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3323-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Preconditions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3328 := z.EncBinary()
		_ = yym3328
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3329 := !z.EncBinary()
			yy2arr3329 := z.EncBasicHandle().StructToArray
			var yyq3329 [1]bool
			_, _, _ = yysep3329, yyq3329, yy2arr3329
			const yyr3329 bool = false
			yyq3329[0] = x.UID != nil
			var yynn3329 int
			if yyr3329 || yy2arr3329 {
				r.EncodeArrayStart(1)
			} else {
				yynn3329 = 0
				for _, b := range yyq3329 {
					if b {
						yynn3329++
					}
				}
				r.EncodeMapStart(yynn3329)
				yynn3329 = 0
			}
			if yyr3329 || yy2arr3329 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3329[0] {
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3331 := *x.UID
						yym3332 := z.EncBinary()
						_ = yym3332
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3331) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3331))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3329[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.UID == nil {
						r.EncodeNil()
					} else {
						yy3333 := *x.UID
						yym3334 := z.EncBinary()
						_ = yym3334
						if false {
						} else if z.HasExtensions() && z.EncExt(yy3333) {
						} else {
							r.EncodeString(codecSelferC_UTF81234, string(yy3333))
						}
					}
				}
			}
			if yyr3329 || yy2arr3329 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Preconditions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3335 := z.DecBinary()
	_ = yym3335
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3336 := r.ContainerType()
		if yyct3336 == codecSelferValueTypeMap1234 {
			yyl3336 := r.ReadMapStart()
			if yyl3336 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3336, d)
			}
		} else if yyct3336 == codecSelferValueTypeArray1234 {
			yyl3336 := r.ReadArrayStart()
			if yyl3336 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3336, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Preconditions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3337Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3337Slc
	var yyhl3337 bool = l >= 0
	for yyj3337 := 0; ; yyj3337++ {
		if yyhl3337 {
			if yyj3337 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3337Slc = r.DecodeBytes(yys3337Slc, true, true)
		yys3337 := string(yys3337Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3337 {
		case "uid":
			if r.TryDecodeAsNil() {
				if x.UID != nil {
					x.UID = nil
				}
			} else {
				if x.UID == nil {
					x.UID = new(pkg1_types.UID)
				}
				yym3339 := z.DecBinary()
				_ = yym3339
				if false {
				} else if z.HasExtensions() && z.DecExt(x.UID) {
				} else {
					*((*string)(x.UID)) = r.DecodeString()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3337)
		} // end switch yys3337
	} // end for yyj3337
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Preconditions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3340 int
	var yyb3340 bool
	var yyhl3340 bool = l >= 0
	yyj3340++
	if yyhl3340 {
		yyb3340 = yyj3340 > l
	} else {
		yyb3340 = r.CheckBreak()
	}
	if yyb3340 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.UID != nil {
			x.UID = nil
		}
	} else {
		if x.UID == nil {
			x.UID = new(pkg1_types.UID)
		}
		yym3342 := z.DecBinary()
		_ = yym3342
		if false {
		} else if z.HasExtensions() && z.DecExt(x.UID) {
		} else {
			*((*string)(x.UID)) = r.DecodeString()
		}
	}
	for {
		yyj3340++
		if yyhl3340 {
			yyb3340 = yyj3340 > l
		} else {
			yyb3340 = r.CheckBreak()
		}
		if yyb3340 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3340-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *DeleteOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3343 := z.EncBinary()
		_ = yym3343
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3344 := !z.EncBinary()
			yy2arr3344 := z.EncBasicHandle().StructToArray
			var yyq3344 [5]bool
			_, _, _ = yysep3344, yyq3344, yy2arr3344
			const yyr3344 bool = false
			yyq3344[0] = x.Kind != ""
			yyq3344[1] = x.APIVersion != ""
			yyq3344[2] = x.GracePeriodSeconds != nil
			yyq3344[3] = x.Preconditions != nil
			yyq3344[4] = x.OrphanDependents != nil
			var yynn3344 int
			if yyr3344 || yy2arr3344 {
				r.EncodeArrayStart(5)
			} else {
				yynn3344 = 0
				for _, b := range yyq3344 {
					if b {
						yynn3344++
					}
				}
				r.EncodeMapStart(yynn3344)
				yynn3344 = 0
			}
			if yyr3344 || yy2arr3344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3344[0] {
					yym3346 := z.EncBinary()
					_ = yym3346
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3344[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3347 := z.EncBinary()
					_ = yym3347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3344 || yy2arr3344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3344[1] {
					yym3349 := z.EncBinary()
					_ = yym3349
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3344[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3350 := z.EncBinary()
					_ = yym3350
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3344 || yy2arr3344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3344[2] {
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3352 := *x.GracePeriodSeconds
						yym3353 := z.EncBinary()
						_ = yym3353
						if false {
						} else {
							r.EncodeInt(int64(yy3352))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3344[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("gracePeriodSeconds"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.GracePeriodSeconds == nil {
						r.EncodeNil()
					} else {
						yy3354 := *x.GracePeriodSeconds
						yym3355 := z.EncBinary()
						_ = yym3355
						if false {
						} else {
							r.EncodeInt(int64(yy3354))
						}
					}
				}
			}
			if yyr3344 || yy2arr3344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3344[3] {
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3344[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("preconditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Preconditions == nil {
						r.EncodeNil()
					} else {
						x.Preconditions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3344 || yy2arr3344 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3344[4] {
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3358 := *x.OrphanDependents
						yym3359 := z.EncBinary()
						_ = yym3359
						if false {
						} else {
							r.EncodeBool(bool(yy3358))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3344[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("orphanDependents"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.OrphanDependents == nil {
						r.EncodeNil()
					} else {
						yy3360 := *x.OrphanDependents
						yym3361 := z.EncBinary()
						_ = yym3361
						if false {
						} else {
							r.EncodeBool(bool(yy3360))
						}
					}
				}
			}
			if yyr3344 || yy2arr3344 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *DeleteOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3362 := z.DecBinary()
	_ = yym3362
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3363 := r.ContainerType()
		if yyct3363 == codecSelferValueTypeMap1234 {
			yyl3363 := r.ReadMapStart()
			if yyl3363 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3363, d)
			}
		} else if yyct3363 == codecSelferValueTypeArray1234 {
			yyl3363 := r.ReadArrayStart()
			if yyl3363 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3363, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *DeleteOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3364Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3364Slc
	var yyhl3364 bool = l >= 0
	for yyj3364 := 0; ; yyj3364++ {
		if yyhl3364 {
			if yyj3364 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3364Slc = r.DecodeBytes(yys3364Slc, true, true)
		yys3364 := string(yys3364Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3364 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "gracePeriodSeconds":
			if r.TryDecodeAsNil() {
				if x.GracePeriodSeconds != nil {
					x.GracePeriodSeconds = nil
				}
			} else {
				if x.GracePeriodSeconds == nil {
					x.GracePeriodSeconds = new(int64)
				}
				yym3368 := z.DecBinary()
				_ = yym3368
				if false {
				} else {
					*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "preconditions":
			if r.TryDecodeAsNil() {
				if x.Preconditions != nil {
					x.Preconditions = nil
				}
			} else {
				if x.Preconditions == nil {
					x.Preconditions = new(Preconditions)
				}
				x.Preconditions.CodecDecodeSelf(d)
			}
		case "orphanDependents":
			if r.TryDecodeAsNil() {
				if x.OrphanDependents != nil {
					x.OrphanDependents = nil
				}
			} else {
				if x.OrphanDependents == nil {
					x.OrphanDependents = new(bool)
				}
				yym3371 := z.DecBinary()
				_ = yym3371
				if false {
				} else {
					*((*bool)(x.OrphanDependents)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3364)
		} // end switch yys3364
	} // end for yyj3364
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *DeleteOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3372 int
	var yyb3372 bool
	var yyhl3372 bool = l >= 0
	yyj3372++
	if yyhl3372 {
		yyb3372 = yyj3372 > l
	} else {
		yyb3372 = r.CheckBreak()
	}
	if yyb3372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3372++
	if yyhl3372 {
		yyb3372 = yyj3372 > l
	} else {
		yyb3372 = r.CheckBreak()
	}
	if yyb3372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3372++
	if yyhl3372 {
		yyb3372 = yyj3372 > l
	} else {
		yyb3372 = r.CheckBreak()
	}
	if yyb3372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.GracePeriodSeconds != nil {
			x.GracePeriodSeconds = nil
		}
	} else {
		if x.GracePeriodSeconds == nil {
			x.GracePeriodSeconds = new(int64)
		}
		yym3376 := z.DecBinary()
		_ = yym3376
		if false {
		} else {
			*((*int64)(x.GracePeriodSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3372++
	if yyhl3372 {
		yyb3372 = yyj3372 > l
	} else {
		yyb3372 = r.CheckBreak()
	}
	if yyb3372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Preconditions != nil {
			x.Preconditions = nil
		}
	} else {
		if x.Preconditions == nil {
			x.Preconditions = new(Preconditions)
		}
		x.Preconditions.CodecDecodeSelf(d)
	}
	yyj3372++
	if yyhl3372 {
		yyb3372 = yyj3372 > l
	} else {
		yyb3372 = r.CheckBreak()
	}
	if yyb3372 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.OrphanDependents != nil {
			x.OrphanDependents = nil
		}
	} else {
		if x.OrphanDependents == nil {
			x.OrphanDependents = new(bool)
		}
		yym3379 := z.DecBinary()
		_ = yym3379
		if false {
		} else {
			*((*bool)(x.OrphanDependents)) = r.DecodeBool()
		}
	}
	for {
		yyj3372++
		if yyhl3372 {
			yyb3372 = yyj3372 > l
		} else {
			yyb3372 = r.CheckBreak()
		}
		if yyb3372 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3372-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ExportOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3380 := z.EncBinary()
		_ = yym3380
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3381 := !z.EncBinary()
			yy2arr3381 := z.EncBasicHandle().StructToArray
			var yyq3381 [4]bool
			_, _, _ = yysep3381, yyq3381, yy2arr3381
			const yyr3381 bool = false
			yyq3381[0] = x.Kind != ""
			yyq3381[1] = x.APIVersion != ""
			var yynn3381 int
			if yyr3381 || yy2arr3381 {
				r.EncodeArrayStart(4)
			} else {
				yynn3381 = 2
				for _, b := range yyq3381 {
					if b {
						yynn3381++
					}
				}
				r.EncodeMapStart(yynn3381)
				yynn3381 = 0
			}
			if yyr3381 || yy2arr3381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3381[0] {
					yym3383 := z.EncBinary()
					_ = yym3383
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3381[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3384 := z.EncBinary()
					_ = yym3384
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3381 || yy2arr3381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3381[1] {
					yym3386 := z.EncBinary()
					_ = yym3386
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3381[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3387 := z.EncBinary()
					_ = yym3387
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3381 || yy2arr3381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3389 := z.EncBinary()
				_ = yym3389
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("export"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3390 := z.EncBinary()
				_ = yym3390
				if false {
				} else {
					r.EncodeBool(bool(x.Export))
				}
			}
			if yyr3381 || yy2arr3381 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3392 := z.EncBinary()
				_ = yym3392
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("exact"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3393 := z.EncBinary()
				_ = yym3393
				if false {
				} else {
					r.EncodeBool(bool(x.Exact))
				}
			}
			if yyr3381 || yy2arr3381 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ExportOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3394 := z.DecBinary()
	_ = yym3394
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3395 := r.ContainerType()
		if yyct3395 == codecSelferValueTypeMap1234 {
			yyl3395 := r.ReadMapStart()
			if yyl3395 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3395, d)
			}
		} else if yyct3395 == codecSelferValueTypeArray1234 {
			yyl3395 := r.ReadArrayStart()
			if yyl3395 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3395, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ExportOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3396Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3396Slc
	var yyhl3396 bool = l >= 0
	for yyj3396 := 0; ; yyj3396++ {
		if yyhl3396 {
			if yyj3396 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3396Slc = r.DecodeBytes(yys3396Slc, true, true)
		yys3396 := string(yys3396Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3396 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "export":
			if r.TryDecodeAsNil() {
				x.Export = false
			} else {
				x.Export = bool(r.DecodeBool())
			}
		case "exact":
			if r.TryDecodeAsNil() {
				x.Exact = false
			} else {
				x.Exact = bool(r.DecodeBool())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3396)
		} // end switch yys3396
	} // end for yyj3396
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ExportOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3401 int
	var yyb3401 bool
	var yyhl3401 bool = l >= 0
	yyj3401++
	if yyhl3401 {
		yyb3401 = yyj3401 > l
	} else {
		yyb3401 = r.CheckBreak()
	}
	if yyb3401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3401++
	if yyhl3401 {
		yyb3401 = yyj3401 > l
	} else {
		yyb3401 = r.CheckBreak()
	}
	if yyb3401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3401++
	if yyhl3401 {
		yyb3401 = yyj3401 > l
	} else {
		yyb3401 = r.CheckBreak()
	}
	if yyb3401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Export = false
	} else {
		x.Export = bool(r.DecodeBool())
	}
	yyj3401++
	if yyhl3401 {
		yyb3401 = yyj3401 > l
	} else {
		yyb3401 = r.CheckBreak()
	}
	if yyb3401 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Exact = false
	} else {
		x.Exact = bool(r.DecodeBool())
	}
	for {
		yyj3401++
		if yyhl3401 {
			yyb3401 = yyj3401 > l
		} else {
			yyb3401 = r.CheckBreak()
		}
		if yyb3401 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3401-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ListOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3406 := z.EncBinary()
		_ = yym3406
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3407 := !z.EncBinary()
			yy2arr3407 := z.EncBasicHandle().StructToArray
			var yyq3407 [7]bool
			_, _, _ = yysep3407, yyq3407, yy2arr3407
			const yyr3407 bool = false
			yyq3407[0] = x.Kind != ""
			yyq3407[1] = x.APIVersion != ""
			var yynn3407 int
			if yyr3407 || yy2arr3407 {
				r.EncodeArrayStart(7)
			} else {
				yynn3407 = 5
				for _, b := range yyq3407 {
					if b {
						yynn3407++
					}
				}
				r.EncodeMapStart(yynn3407)
				yynn3407 = 0
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3407[0] {
					yym3409 := z.EncBinary()
					_ = yym3409
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3407[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3410 := z.EncBinary()
					_ = yym3410
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3407[1] {
					yym3412 := z.EncBinary()
					_ = yym3412
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3407[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3413 := z.EncBinary()
					_ = yym3413
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3415 := z.EncBinary()
					_ = yym3415
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LabelSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LabelSelector == nil {
					r.EncodeNil()
				} else {
					yym3416 := z.EncBinary()
					_ = yym3416
					if false {
					} else if z.HasExtensions() && z.EncExt(x.LabelSelector) {
					} else {
						z.EncFallback(x.LabelSelector)
					}
				}
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3418 := z.EncBinary()
					_ = yym3418
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("FieldSelector"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.FieldSelector == nil {
					r.EncodeNil()
				} else {
					yym3419 := z.EncBinary()
					_ = yym3419
					if false {
					} else if z.HasExtensions() && z.EncExt(x.FieldSelector) {
					} else {
						z.EncFallback(x.FieldSelector)
					}
				}
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3421 := z.EncBinary()
				_ = yym3421
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Watch"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3422 := z.EncBinary()
				_ = yym3422
				if false {
				} else {
					r.EncodeBool(bool(x.Watch))
				}
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3424 := z.EncBinary()
				_ = yym3424
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("ResourceVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3425 := z.EncBinary()
				_ = yym3425
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
				}
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3427 := *x.TimeoutSeconds
					yym3428 := z.EncBinary()
					_ = yym3428
					if false {
					} else {
						r.EncodeInt(int64(yy3427))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TimeoutSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TimeoutSeconds == nil {
					r.EncodeNil()
				} else {
					yy3429 := *x.TimeoutSeconds
					yym3430 := z.EncBinary()
					_ = yym3430
					if false {
					} else {
						r.EncodeInt(int64(yy3429))
					}
				}
			}
			if yyr3407 || yy2arr3407 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ListOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3431 := z.DecBinary()
	_ = yym3431
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3432 := r.ContainerType()
		if yyct3432 == codecSelferValueTypeMap1234 {
			yyl3432 := r.ReadMapStart()
			if yyl3432 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3432, d)
			}
		} else if yyct3432 == codecSelferValueTypeArray1234 {
			yyl3432 := r.ReadArrayStart()
			if yyl3432 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3432, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ListOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3433Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3433Slc
	var yyhl3433 bool = l >= 0
	for yyj3433 := 0; ; yyj3433++ {
		if yyhl3433 {
			if yyj3433 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3433Slc = r.DecodeBytes(yys3433Slc, true, true)
		yys3433 := string(yys3433Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3433 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "LabelSelector":
			if r.TryDecodeAsNil() {
				x.LabelSelector = nil
			} else {
				yyv3436 := &x.LabelSelector
				yym3437 := z.DecBinary()
				_ = yym3437
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3436) {
				} else {
					z.DecFallback(yyv3436, true)
				}
			}
		case "FieldSelector":
			if r.TryDecodeAsNil() {
				x.FieldSelector = nil
			} else {
				yyv3438 := &x.FieldSelector
				yym3439 := z.DecBinary()
				_ = yym3439
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3438) {
				} else {
					z.DecFallback(yyv3438, true)
				}
			}
		case "Watch":
			if r.TryDecodeAsNil() {
				x.Watch = false
			} else {
				x.Watch = bool(r.DecodeBool())
			}
		case "ResourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "TimeoutSeconds":
			if r.TryDecodeAsNil() {
				if x.TimeoutSeconds != nil {
					x.TimeoutSeconds = nil
				}
			} else {
				if x.TimeoutSeconds == nil {
					x.TimeoutSeconds = new(int64)
				}
				yym3443 := z.DecBinary()
				_ = yym3443
				if false {
				} else {
					*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3433)
		} // end switch yys3433
	} // end for yyj3433
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ListOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3444 int
	var yyb3444 bool
	var yyhl3444 bool = l >= 0
	yyj3444++
	if yyhl3444 {
		yyb3444 = yyj3444 > l
	} else {
		yyb3444 = r.CheckBreak()
	}
	if yyb3444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3444++
	if yyhl3444 {
		yyb3444 = yyj3444 > l
	} else {
		yyb3444 = r.CheckBreak()
	}
	if yyb3444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3444++
	if yyhl3444 {
		yyb3444 = yyj3444 > l
	} else {
		yyb3444 = r.CheckBreak()
	}
	if yyb3444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LabelSelector = nil
	} else {
		yyv3447 := &x.LabelSelector
		yym3448 := z.DecBinary()
		_ = yym3448
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3447) {
		} else {
			z.DecFallback(yyv3447, true)
		}
	}
	yyj3444++
	if yyhl3444 {
		yyb3444 = yyj3444 > l
	} else {
		yyb3444 = r.CheckBreak()
	}
	if yyb3444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldSelector = nil
	} else {
		yyv3449 := &x.FieldSelector
		yym3450 := z.DecBinary()
		_ = yym3450
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3449) {
		} else {
			z.DecFallback(yyv3449, true)
		}
	}
	yyj3444++
	if yyhl3444 {
		yyb3444 = yyj3444 > l
	} else {
		yyb3444 = r.CheckBreak()
	}
	if yyb3444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Watch = false
	} else {
		x.Watch = bool(r.DecodeBool())
	}
	yyj3444++
	if yyhl3444 {
		yyb3444 = yyj3444 > l
	} else {
		yyb3444 = r.CheckBreak()
	}
	if yyb3444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3444++
	if yyhl3444 {
		yyb3444 = yyj3444 > l
	} else {
		yyb3444 = r.CheckBreak()
	}
	if yyb3444 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TimeoutSeconds != nil {
			x.TimeoutSeconds = nil
		}
	} else {
		if x.TimeoutSeconds == nil {
			x.TimeoutSeconds = new(int64)
		}
		yym3454 := z.DecBinary()
		_ = yym3454
		if false {
		} else {
			*((*int64)(x.TimeoutSeconds)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3444++
		if yyhl3444 {
			yyb3444 = yyj3444 > l
		} else {
			yyb3444 = r.CheckBreak()
		}
		if yyb3444 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3444-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodLogOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3455 := z.EncBinary()
		_ = yym3455
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3456 := !z.EncBinary()
			yy2arr3456 := z.EncBasicHandle().StructToArray
			var yyq3456 [10]bool
			_, _, _ = yysep3456, yyq3456, yy2arr3456
			const yyr3456 bool = false
			yyq3456[0] = x.Kind != ""
			yyq3456[1] = x.APIVersion != ""
			var yynn3456 int
			if yyr3456 || yy2arr3456 {
				r.EncodeArrayStart(10)
			} else {
				yynn3456 = 8
				for _, b := range yyq3456 {
					if b {
						yynn3456++
					}
				}
				r.EncodeMapStart(yynn3456)
				yynn3456 = 0
			}
			if yyr3456 || yy2arr3456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3456[0] {
					yym3458 := z.EncBinary()
					_ = yym3458
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3456[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3459 := z.EncBinary()
					_ = yym3459
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3456 || yy2arr3456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3456[1] {
					yym3461 := z.EncBinary()
					_ = yym3461
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3456[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3462 := z.EncBinary()
					_ = yym3462
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3456 || yy2arr3456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3464 := z.EncBinary()
				_ = yym3464
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3465 := z.EncBinary()
				_ = yym3465
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3456 || yy2arr3456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3467 := z.EncBinary()
				_ = yym3467
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Follow"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3468 := z.EncBinary()
				_ = yym3468
				if false {
				} else {
					r.EncodeBool(bool(x.Follow))
				}
			}
			if yyr3456 || yy2arr3456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3470 := z.EncBinary()
				_ = yym3470
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Previous"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3471 := z.EncBinary()
				_ = yym3471
				if false {
				} else {
					r.EncodeBool(bool(x.Previous))
				}
			}
			if yyr3456 || yy2arr3456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3473 := *x.SinceSeconds
					yym3474 := z.EncBinary()
					_ = yym3474
					if false {
					} else {
						r.EncodeInt(int64(yy3473))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceSeconds"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceSeconds == nil {
					r.EncodeNil()
				} else {
					yy3475 := *x.SinceSeconds
					yym3476 := z.EncBinary()
					_ = yym3476
					if false {
					} else {
						r.EncodeInt(int64(yy3475))
					}
				}
			}
			if yyr3456 || yy2arr3456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3478 := z.EncBinary()
					_ = yym3478
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3478 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3478 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("SinceTime"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.SinceTime == nil {
					r.EncodeNil()
				} else {
					yym3479 := z.EncBinary()
					_ = yym3479
					if false {
					} else if z.HasExtensions() && z.EncExt(x.SinceTime) {
					} else if yym3479 {
						z.EncBinaryMarshal(x.SinceTime)
					} else if !yym3479 && z.IsJSONHandle() {
						z.EncJSONMarshal(x.SinceTime)
					} else {
						z.EncFallback(x.SinceTime)
					}
				}
			}
			if yyr3456 || yy2arr3456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3481 := z.EncBinary()
				_ = yym3481
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Timestamps"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3482 := z.EncBinary()
				_ = yym3482
				if false {
				} else {
					r.EncodeBool(bool(x.Timestamps))
				}
			}
			if yyr3456 || yy2arr3456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3484 := *x.TailLines
					yym3485 := z.EncBinary()
					_ = yym3485
					if false {
					} else {
						r.EncodeInt(int64(yy3484))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TailLines"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.TailLines == nil {
					r.EncodeNil()
				} else {
					yy3486 := *x.TailLines
					yym3487 := z.EncBinary()
					_ = yym3487
					if false {
					} else {
						r.EncodeInt(int64(yy3486))
					}
				}
			}
			if yyr3456 || yy2arr3456 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3489 := *x.LimitBytes
					yym3490 := z.EncBinary()
					_ = yym3490
					if false {
					} else {
						r.EncodeInt(int64(yy3489))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("LimitBytes"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.LimitBytes == nil {
					r.EncodeNil()
				} else {
					yy3491 := *x.LimitBytes
					yym3492 := z.EncBinary()
					_ = yym3492
					if false {
					} else {
						r.EncodeInt(int64(yy3491))
					}
				}
			}
			if yyr3456 || yy2arr3456 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodLogOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3493 := z.DecBinary()
	_ = yym3493
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3494 := r.ContainerType()
		if yyct3494 == codecSelferValueTypeMap1234 {
			yyl3494 := r.ReadMapStart()
			if yyl3494 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3494, d)
			}
		} else if yyct3494 == codecSelferValueTypeArray1234 {
			yyl3494 := r.ReadArrayStart()
			if yyl3494 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3494, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodLogOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3495Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3495Slc
	var yyhl3495 bool = l >= 0
	for yyj3495 := 0; ; yyj3495++ {
		if yyhl3495 {
			if yyj3495 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3495Slc = r.DecodeBytes(yys3495Slc, true, true)
		yys3495 := string(yys3495Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3495 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Follow":
			if r.TryDecodeAsNil() {
				x.Follow = false
			} else {
				x.Follow = bool(r.DecodeBool())
			}
		case "Previous":
			if r.TryDecodeAsNil() {
				x.Previous = false
			} else {
				x.Previous = bool(r.DecodeBool())
			}
		case "SinceSeconds":
			if r.TryDecodeAsNil() {
				if x.SinceSeconds != nil {
					x.SinceSeconds = nil
				}
			} else {
				if x.SinceSeconds == nil {
					x.SinceSeconds = new(int64)
				}
				yym3502 := z.DecBinary()
				_ = yym3502
				if false {
				} else {
					*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
				}
			}
		case "SinceTime":
			if r.TryDecodeAsNil() {
				if x.SinceTime != nil {
					x.SinceTime = nil
				}
			} else {
				if x.SinceTime == nil {
					x.SinceTime = new(pkg2_unversioned.Time)
				}
				yym3504 := z.DecBinary()
				_ = yym3504
				if false {
				} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
				} else if yym3504 {
					z.DecBinaryUnmarshal(x.SinceTime)
				} else if !yym3504 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(x.SinceTime)
				} else {
					z.DecFallback(x.SinceTime, false)
				}
			}
		case "Timestamps":
			if r.TryDecodeAsNil() {
				x.Timestamps = false
			} else {
				x.Timestamps = bool(r.DecodeBool())
			}
		case "TailLines":
			if r.TryDecodeAsNil() {
				if x.TailLines != nil {
					x.TailLines = nil
				}
			} else {
				if x.TailLines == nil {
					x.TailLines = new(int64)
				}
				yym3507 := z.DecBinary()
				_ = yym3507
				if false {
				} else {
					*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
				}
			}
		case "LimitBytes":
			if r.TryDecodeAsNil() {
				if x.LimitBytes != nil {
					x.LimitBytes = nil
				}
			} else {
				if x.LimitBytes == nil {
					x.LimitBytes = new(int64)
				}
				yym3509 := z.DecBinary()
				_ = yym3509
				if false {
				} else {
					*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3495)
		} // end switch yys3495
	} // end for yyj3495
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodLogOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3510 int
	var yyb3510 bool
	var yyhl3510 bool = l >= 0
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Follow = false
	} else {
		x.Follow = bool(r.DecodeBool())
	}
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Previous = false
	} else {
		x.Previous = bool(r.DecodeBool())
	}
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceSeconds != nil {
			x.SinceSeconds = nil
		}
	} else {
		if x.SinceSeconds == nil {
			x.SinceSeconds = new(int64)
		}
		yym3517 := z.DecBinary()
		_ = yym3517
		if false {
		} else {
			*((*int64)(x.SinceSeconds)) = int64(r.DecodeInt(64))
		}
	}
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SinceTime != nil {
			x.SinceTime = nil
		}
	} else {
		if x.SinceTime == nil {
			x.SinceTime = new(pkg2_unversioned.Time)
		}
		yym3519 := z.DecBinary()
		_ = yym3519
		if false {
		} else if z.HasExtensions() && z.DecExt(x.SinceTime) {
		} else if yym3519 {
			z.DecBinaryUnmarshal(x.SinceTime)
		} else if !yym3519 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(x.SinceTime)
		} else {
			z.DecFallback(x.SinceTime, false)
		}
	}
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Timestamps = false
	} else {
		x.Timestamps = bool(r.DecodeBool())
	}
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.TailLines != nil {
			x.TailLines = nil
		}
	} else {
		if x.TailLines == nil {
			x.TailLines = new(int64)
		}
		yym3522 := z.DecBinary()
		_ = yym3522
		if false {
		} else {
			*((*int64)(x.TailLines)) = int64(r.DecodeInt(64))
		}
	}
	yyj3510++
	if yyhl3510 {
		yyb3510 = yyj3510 > l
	} else {
		yyb3510 = r.CheckBreak()
	}
	if yyb3510 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.LimitBytes != nil {
			x.LimitBytes = nil
		}
	} else {
		if x.LimitBytes == nil {
			x.LimitBytes = new(int64)
		}
		yym3524 := z.DecBinary()
		_ = yym3524
		if false {
		} else {
			*((*int64)(x.LimitBytes)) = int64(r.DecodeInt(64))
		}
	}
	for {
		yyj3510++
		if yyhl3510 {
			yyb3510 = yyj3510 > l
		} else {
			yyb3510 = r.CheckBreak()
		}
		if yyb3510 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3510-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodAttachOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3525 := z.EncBinary()
		_ = yym3525
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3526 := !z.EncBinary()
			yy2arr3526 := z.EncBasicHandle().StructToArray
			var yyq3526 [7]bool
			_, _, _ = yysep3526, yyq3526, yy2arr3526
			const yyr3526 bool = false
			yyq3526[0] = x.Kind != ""
			yyq3526[1] = x.APIVersion != ""
			yyq3526[2] = x.Stdin != false
			yyq3526[3] = x.Stdout != false
			yyq3526[4] = x.Stderr != false
			yyq3526[5] = x.TTY != false
			yyq3526[6] = x.Container != ""
			var yynn3526 int
			if yyr3526 || yy2arr3526 {
				r.EncodeArrayStart(7)
			} else {
				yynn3526 = 0
				for _, b := range yyq3526 {
					if b {
						yynn3526++
					}
				}
				r.EncodeMapStart(yynn3526)
				yynn3526 = 0
			}
			if yyr3526 || yy2arr3526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3526[0] {
					yym3528 := z.EncBinary()
					_ = yym3528
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3526[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3529 := z.EncBinary()
					_ = yym3529
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3526 || yy2arr3526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3526[1] {
					yym3531 := z.EncBinary()
					_ = yym3531
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3526[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3532 := z.EncBinary()
					_ = yym3532
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3526 || yy2arr3526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3526[2] {
					yym3534 := z.EncBinary()
					_ = yym3534
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3526[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdin"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3535 := z.EncBinary()
					_ = yym3535
					if false {
					} else {
						r.EncodeBool(bool(x.Stdin))
					}
				}
			}
			if yyr3526 || yy2arr3526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3526[3] {
					yym3537 := z.EncBinary()
					_ = yym3537
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3526[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stdout"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3538 := z.EncBinary()
					_ = yym3538
					if false {
					} else {
						r.EncodeBool(bool(x.Stdout))
					}
				}
			}
			if yyr3526 || yy2arr3526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3526[4] {
					yym3540 := z.EncBinary()
					_ = yym3540
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3526[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("stderr"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3541 := z.EncBinary()
					_ = yym3541
					if false {
					} else {
						r.EncodeBool(bool(x.Stderr))
					}
				}
			}
			if yyr3526 || yy2arr3526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3526[5] {
					yym3543 := z.EncBinary()
					_ = yym3543
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				} else {
					r.EncodeBool(false)
				}
			} else {
				if yyq3526[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("tty"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3544 := z.EncBinary()
					_ = yym3544
					if false {
					} else {
						r.EncodeBool(bool(x.TTY))
					}
				}
			}
			if yyr3526 || yy2arr3526 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3526[6] {
					yym3546 := z.EncBinary()
					_ = yym3546
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3526[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("container"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3547 := z.EncBinary()
					_ = yym3547
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Container))
					}
				}
			}
			if yyr3526 || yy2arr3526 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodAttachOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3548 := z.DecBinary()
	_ = yym3548
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3549 := r.ContainerType()
		if yyct3549 == codecSelferValueTypeMap1234 {
			yyl3549 := r.ReadMapStart()
			if yyl3549 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3549, d)
			}
		} else if yyct3549 == codecSelferValueTypeArray1234 {
			yyl3549 := r.ReadArrayStart()
			if yyl3549 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3549, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodAttachOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3550Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3550Slc
	var yyhl3550 bool = l >= 0
	for yyj3550 := 0; ; yyj3550++ {
		if yyhl3550 {
			if yyj3550 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3550Slc = r.DecodeBytes(yys3550Slc, true, true)
		yys3550 := string(yys3550Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3550 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "tty":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3550)
		} // end switch yys3550
	} // end for yyj3550
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodAttachOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3558 int
	var yyb3558 bool
	var yyhl3558 bool = l >= 0
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3558++
	if yyhl3558 {
		yyb3558 = yyj3558 > l
	} else {
		yyb3558 = r.CheckBreak()
	}
	if yyb3558 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3558++
		if yyhl3558 {
			yyb3558 = yyj3558 > l
		} else {
			yyb3558 = r.CheckBreak()
		}
		if yyb3558 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3558-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3566 := z.EncBinary()
		_ = yym3566
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3567 := !z.EncBinary()
			yy2arr3567 := z.EncBasicHandle().StructToArray
			var yyq3567 [8]bool
			_, _, _ = yysep3567, yyq3567, yy2arr3567
			const yyr3567 bool = false
			yyq3567[0] = x.Kind != ""
			yyq3567[1] = x.APIVersion != ""
			var yynn3567 int
			if yyr3567 || yy2arr3567 {
				r.EncodeArrayStart(8)
			} else {
				yynn3567 = 6
				for _, b := range yyq3567 {
					if b {
						yynn3567++
					}
				}
				r.EncodeMapStart(yynn3567)
				yynn3567 = 0
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3567[0] {
					yym3569 := z.EncBinary()
					_ = yym3569
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3567[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3570 := z.EncBinary()
					_ = yym3570
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3567[1] {
					yym3572 := z.EncBinary()
					_ = yym3572
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3567[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3573 := z.EncBinary()
					_ = yym3573
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3575 := z.EncBinary()
				_ = yym3575
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3576 := z.EncBinary()
				_ = yym3576
				if false {
				} else {
					r.EncodeBool(bool(x.Stdin))
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3578 := z.EncBinary()
				_ = yym3578
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3579 := z.EncBinary()
				_ = yym3579
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3581 := z.EncBinary()
				_ = yym3581
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3582 := z.EncBinary()
				_ = yym3582
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3584 := z.EncBinary()
				_ = yym3584
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("TTY"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3585 := z.EncBinary()
				_ = yym3585
				if false {
				} else {
					r.EncodeBool(bool(x.TTY))
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3587 := z.EncBinary()
				_ = yym3587
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3588 := z.EncBinary()
				_ = yym3588
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3590 := z.EncBinary()
					_ = yym3590
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Command"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Command == nil {
					r.EncodeNil()
				} else {
					yym3591 := z.EncBinary()
					_ = yym3591
					if false {
					} else {
						z.F.EncSliceStringV(x.Command, false, e)
					}
				}
			}
			if yyr3567 || yy2arr3567 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3592 := z.DecBinary()
	_ = yym3592
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3593 := r.ContainerType()
		if yyct3593 == codecSelferValueTypeMap1234 {
			yyl3593 := r.ReadMapStart()
			if yyl3593 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3593, d)
			}
		} else if yyct3593 == codecSelferValueTypeArray1234 {
			yyl3593 := r.ReadArrayStart()
			if yyl3593 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3593, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3594Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3594Slc
	var yyhl3594 bool = l >= 0
	for yyj3594 := 0; ; yyj3594++ {
		if yyhl3594 {
			if yyj3594 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3594Slc = r.DecodeBytes(yys3594Slc, true, true)
		yys3594 := string(yys3594Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3594 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = false
			} else {
				x.Stdin = bool(r.DecodeBool())
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "TTY":
			if r.TryDecodeAsNil() {
				x.TTY = false
			} else {
				x.TTY = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		case "Command":
			if r.TryDecodeAsNil() {
				x.Command = nil
			} else {
				yyv3602 := &x.Command
				yym3603 := z.DecBinary()
				_ = yym3603
				if false {
				} else {
					z.F.DecSliceStringX(yyv3602, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3594)
		} // end switch yys3594
	} // end for yyj3594
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3604 int
	var yyb3604 bool
	var yyhl3604 bool = l >= 0
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = false
	} else {
		x.Stdin = bool(r.DecodeBool())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.TTY = false
	} else {
		x.TTY = bool(r.DecodeBool())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	yyj3604++
	if yyhl3604 {
		yyb3604 = yyj3604 > l
	} else {
		yyb3604 = r.CheckBreak()
	}
	if yyb3604 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Command = nil
	} else {
		yyv3612 := &x.Command
		yym3613 := z.DecBinary()
		_ = yym3613
		if false {
		} else {
			z.F.DecSliceStringX(yyv3612, false, d)
		}
	}
	for {
		yyj3604++
		if yyhl3604 {
			yyb3604 = yyj3604 > l
		} else {
			yyb3604 = r.CheckBreak()
		}
		if yyb3604 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3604-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodSimpleExecOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3614 := z.EncBinary()
		_ = yym3614
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3615 := !z.EncBinary()
			yy2arr3615 := z.EncBasicHandle().StructToArray
			var yyq3615 [6]bool
			_, _, _ = yysep3615, yyq3615, yy2arr3615
			const yyr3615 bool = false
			yyq3615[0] = x.Kind != ""
			yyq3615[1] = x.APIVersion != ""
			var yynn3615 int
			if yyr3615 || yy2arr3615 {
				r.EncodeArrayStart(6)
			} else {
				yynn3615 = 4
				for _, b := range yyq3615 {
					if b {
						yynn3615++
					}
				}
				r.EncodeMapStart(yynn3615)
				yynn3615 = 0
			}
			if yyr3615 || yy2arr3615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3615[0] {
					yym3617 := z.EncBinary()
					_ = yym3617
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3615[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3618 := z.EncBinary()
					_ = yym3618
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3615 || yy2arr3615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3615[1] {
					yym3620 := z.EncBinary()
					_ = yym3620
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3615[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3621 := z.EncBinary()
					_ = yym3621
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3615 || yy2arr3615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Stdin == nil {
					r.EncodeNil()
				} else {
					yym3623 := z.EncBinary()
					_ = yym3623
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Stdin))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdin"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Stdin == nil {
					r.EncodeNil()
				} else {
					yym3624 := z.EncBinary()
					_ = yym3624
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Stdin))
					}
				}
			}
			if yyr3615 || yy2arr3615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3626 := z.EncBinary()
				_ = yym3626
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stdout"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3627 := z.EncBinary()
				_ = yym3627
				if false {
				} else {
					r.EncodeBool(bool(x.Stdout))
				}
			}
			if yyr3615 || yy2arr3615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3629 := z.EncBinary()
				_ = yym3629
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Stderr"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3630 := z.EncBinary()
				_ = yym3630
				if false {
				} else {
					r.EncodeBool(bool(x.Stderr))
				}
			}
			if yyr3615 || yy2arr3615 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3632 := z.EncBinary()
				_ = yym3632
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Container"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3633 := z.EncBinary()
				_ = yym3633
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Container))
				}
			}
			if yyr3615 || yy2arr3615 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodSimpleExecOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3634 := z.DecBinary()
	_ = yym3634
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3635 := r.ContainerType()
		if yyct3635 == codecSelferValueTypeMap1234 {
			yyl3635 := r.ReadMapStart()
			if yyl3635 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3635, d)
			}
		} else if yyct3635 == codecSelferValueTypeArray1234 {
			yyl3635 := r.ReadArrayStart()
			if yyl3635 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3635, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodSimpleExecOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3636Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3636Slc
	var yyhl3636 bool = l >= 0
	for yyj3636 := 0; ; yyj3636++ {
		if yyhl3636 {
			if yyj3636 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3636Slc = r.DecodeBytes(yys3636Slc, true, true)
		yys3636 := string(yys3636Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3636 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Stdin":
			if r.TryDecodeAsNil() {
				x.Stdin = nil
			} else {
				yyv3639 := &x.Stdin
				yym3640 := z.DecBinary()
				_ = yym3640
				if false {
				} else {
					*yyv3639 = r.DecodeBytes(*(*[]byte)(yyv3639), false, false)
				}
			}
		case "Stdout":
			if r.TryDecodeAsNil() {
				x.Stdout = false
			} else {
				x.Stdout = bool(r.DecodeBool())
			}
		case "Stderr":
			if r.TryDecodeAsNil() {
				x.Stderr = false
			} else {
				x.Stderr = bool(r.DecodeBool())
			}
		case "Container":
			if r.TryDecodeAsNil() {
				x.Container = ""
			} else {
				x.Container = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3636)
		} // end switch yys3636
	} // end for yyj3636
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodSimpleExecOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3644 int
	var yyb3644 bool
	var yyhl3644 bool = l >= 0
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdin = nil
	} else {
		yyv3647 := &x.Stdin
		yym3648 := z.DecBinary()
		_ = yym3648
		if false {
		} else {
			*yyv3647 = r.DecodeBytes(*(*[]byte)(yyv3647), false, false)
		}
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stdout = false
	} else {
		x.Stdout = bool(r.DecodeBool())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Stderr = false
	} else {
		x.Stderr = bool(r.DecodeBool())
	}
	yyj3644++
	if yyhl3644 {
		yyb3644 = yyj3644 > l
	} else {
		yyb3644 = r.CheckBreak()
	}
	if yyb3644 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Container = ""
	} else {
		x.Container = string(r.DecodeString())
	}
	for {
		yyj3644++
		if yyhl3644 {
			yyb3644 = yyj3644 > l
		} else {
			yyb3644 = r.CheckBreak()
		}
		if yyb3644 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3644-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *PodProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3652 := z.EncBinary()
		_ = yym3652
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3653 := !z.EncBinary()
			yy2arr3653 := z.EncBasicHandle().StructToArray
			var yyq3653 [3]bool
			_, _, _ = yysep3653, yyq3653, yy2arr3653
			const yyr3653 bool = false
			yyq3653[0] = x.Kind != ""
			yyq3653[1] = x.APIVersion != ""
			var yynn3653 int
			if yyr3653 || yy2arr3653 {
				r.EncodeArrayStart(3)
			} else {
				yynn3653 = 1
				for _, b := range yyq3653 {
					if b {
						yynn3653++
					}
				}
				r.EncodeMapStart(yynn3653)
				yynn3653 = 0
			}
			if yyr3653 || yy2arr3653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3653[0] {
					yym3655 := z.EncBinary()
					_ = yym3655
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3653[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3656 := z.EncBinary()
					_ = yym3656
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3653 || yy2arr3653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3653[1] {
					yym3658 := z.EncBinary()
					_ = yym3658
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3653[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3659 := z.EncBinary()
					_ = yym3659
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3653 || yy2arr3653 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3661 := z.EncBinary()
				_ = yym3661
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3662 := z.EncBinary()
				_ = yym3662
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3653 || yy2arr3653 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *PodProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3663 := z.DecBinary()
	_ = yym3663
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3664 := r.ContainerType()
		if yyct3664 == codecSelferValueTypeMap1234 {
			yyl3664 := r.ReadMapStart()
			if yyl3664 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3664, d)
			}
		} else if yyct3664 == codecSelferValueTypeArray1234 {
			yyl3664 := r.ReadArrayStart()
			if yyl3664 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3664, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *PodProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3665Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3665Slc
	var yyhl3665 bool = l >= 0
	for yyj3665 := 0; ; yyj3665++ {
		if yyhl3665 {
			if yyj3665 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3665Slc = r.DecodeBytes(yys3665Slc, true, true)
		yys3665 := string(yys3665Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3665 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3665)
		} // end switch yys3665
	} // end for yyj3665
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *PodProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3669 int
	var yyb3669 bool
	var yyhl3669 bool = l >= 0
	yyj3669++
	if yyhl3669 {
		yyb3669 = yyj3669 > l
	} else {
		yyb3669 = r.CheckBreak()
	}
	if yyb3669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3669++
	if yyhl3669 {
		yyb3669 = yyj3669 > l
	} else {
		yyb3669 = r.CheckBreak()
	}
	if yyb3669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3669++
	if yyhl3669 {
		yyb3669 = yyj3669 > l
	} else {
		yyb3669 = r.CheckBreak()
	}
	if yyb3669 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3669++
		if yyhl3669 {
			yyb3669 = yyj3669 > l
		} else {
			yyb3669 = r.CheckBreak()
		}
		if yyb3669 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3669-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *NodeProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3673 := z.EncBinary()
		_ = yym3673
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3674 := !z.EncBinary()
			yy2arr3674 := z.EncBasicHandle().StructToArray
			var yyq3674 [3]bool
			_, _, _ = yysep3674, yyq3674, yy2arr3674
			const yyr3674 bool = false
			yyq3674[0] = x.Kind != ""
			yyq3674[1] = x.APIVersion != ""
			var yynn3674 int
			if yyr3674 || yy2arr3674 {
				r.EncodeArrayStart(3)
			} else {
				yynn3674 = 1
				for _, b := range yyq3674 {
					if b {
						yynn3674++
					}
				}
				r.EncodeMapStart(yynn3674)
				yynn3674 = 0
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3674[0] {
					yym3676 := z.EncBinary()
					_ = yym3676
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3674[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3677 := z.EncBinary()
					_ = yym3677
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3674[1] {
					yym3679 := z.EncBinary()
					_ = yym3679
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3674[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3680 := z.EncBinary()
					_ = yym3680
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3682 := z.EncBinary()
				_ = yym3682
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3683 := z.EncBinary()
				_ = yym3683
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3674 || yy2arr3674 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *NodeProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3684 := z.DecBinary()
	_ = yym3684
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3685 := r.ContainerType()
		if yyct3685 == codecSelferValueTypeMap1234 {
			yyl3685 := r.ReadMapStart()
			if yyl3685 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3685, d)
			}
		} else if yyct3685 == codecSelferValueTypeArray1234 {
			yyl3685 := r.ReadArrayStart()
			if yyl3685 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3685, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *NodeProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3686Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3686Slc
	var yyhl3686 bool = l >= 0
	for yyj3686 := 0; ; yyj3686++ {
		if yyhl3686 {
			if yyj3686 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3686Slc = r.DecodeBytes(yys3686Slc, true, true)
		yys3686 := string(yys3686Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3686 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3686)
		} // end switch yys3686
	} // end for yyj3686
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *NodeProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3690 int
	var yyb3690 bool
	var yyhl3690 bool = l >= 0
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3690++
	if yyhl3690 {
		yyb3690 = yyj3690 > l
	} else {
		yyb3690 = r.CheckBreak()
	}
	if yyb3690 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3690++
		if yyhl3690 {
			yyb3690 = yyj3690 > l
		} else {
			yyb3690 = r.CheckBreak()
		}
		if yyb3690 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3690-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ServiceProxyOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3694 := z.EncBinary()
		_ = yym3694
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3695 := !z.EncBinary()
			yy2arr3695 := z.EncBasicHandle().StructToArray
			var yyq3695 [3]bool
			_, _, _ = yysep3695, yyq3695, yy2arr3695
			const yyr3695 bool = false
			yyq3695[0] = x.Kind != ""
			yyq3695[1] = x.APIVersion != ""
			var yynn3695 int
			if yyr3695 || yy2arr3695 {
				r.EncodeArrayStart(3)
			} else {
				yynn3695 = 1
				for _, b := range yyq3695 {
					if b {
						yynn3695++
					}
				}
				r.EncodeMapStart(yynn3695)
				yynn3695 = 0
			}
			if yyr3695 || yy2arr3695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3695[0] {
					yym3697 := z.EncBinary()
					_ = yym3697
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3695[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3698 := z.EncBinary()
					_ = yym3698
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3695 || yy2arr3695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3695[1] {
					yym3700 := z.EncBinary()
					_ = yym3700
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3695[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3701 := z.EncBinary()
					_ = yym3701
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3695 || yy2arr3695 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3703 := z.EncBinary()
				_ = yym3703
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Path"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3704 := z.EncBinary()
				_ = yym3704
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Path))
				}
			}
			if yyr3695 || yy2arr3695 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ServiceProxyOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3705 := z.DecBinary()
	_ = yym3705
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3706 := r.ContainerType()
		if yyct3706 == codecSelferValueTypeMap1234 {
			yyl3706 := r.ReadMapStart()
			if yyl3706 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3706, d)
			}
		} else if yyct3706 == codecSelferValueTypeArray1234 {
			yyl3706 := r.ReadArrayStart()
			if yyl3706 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3706, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ServiceProxyOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3707Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3707Slc
	var yyhl3707 bool = l >= 0
	for yyj3707 := 0; ; yyj3707++ {
		if yyhl3707 {
			if yyj3707 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3707Slc = r.DecodeBytes(yys3707Slc, true, true)
		yys3707 := string(yys3707Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3707 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "Path":
			if r.TryDecodeAsNil() {
				x.Path = ""
			} else {
				x.Path = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3707)
		} // end switch yys3707
	} // end for yyj3707
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ServiceProxyOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3711 int
	var yyb3711 bool
	var yyhl3711 bool = l >= 0
	yyj3711++
	if yyhl3711 {
		yyb3711 = yyj3711 > l
	} else {
		yyb3711 = r.CheckBreak()
	}
	if yyb3711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3711++
	if yyhl3711 {
		yyb3711 = yyj3711 > l
	} else {
		yyb3711 = r.CheckBreak()
	}
	if yyb3711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3711++
	if yyhl3711 {
		yyb3711 = yyj3711 > l
	} else {
		yyb3711 = r.CheckBreak()
	}
	if yyb3711 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Path = ""
	} else {
		x.Path = string(r.DecodeString())
	}
	for {
		yyj3711++
		if yyhl3711 {
			yyb3711 = yyj3711 > l
		} else {
			yyb3711 = r.CheckBreak()
		}
		if yyb3711 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3711-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *OwnerReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3715 := z.EncBinary()
		_ = yym3715
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3716 := !z.EncBinary()
			yy2arr3716 := z.EncBasicHandle().StructToArray
			var yyq3716 [5]bool
			_, _, _ = yysep3716, yyq3716, yy2arr3716
			const yyr3716 bool = false
			yyq3716[4] = x.Controller != nil
			var yynn3716 int
			if yyr3716 || yy2arr3716 {
				r.EncodeArrayStart(5)
			} else {
				yynn3716 = 4
				for _, b := range yyq3716 {
					if b {
						yynn3716++
					}
				}
				r.EncodeMapStart(yynn3716)
				yynn3716 = 0
			}
			if yyr3716 || yy2arr3716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3718 := z.EncBinary()
				_ = yym3718
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3719 := z.EncBinary()
				_ = yym3719
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
				}
			}
			if yyr3716 || yy2arr3716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3721 := z.EncBinary()
				_ = yym3721
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("kind"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3722 := z.EncBinary()
				_ = yym3722
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
				}
			}
			if yyr3716 || yy2arr3716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3724 := z.EncBinary()
				_ = yym3724
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3725 := z.EncBinary()
				_ = yym3725
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3716 || yy2arr3716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3727 := z.EncBinary()
				_ = yym3727
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("uid"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3728 := z.EncBinary()
				_ = yym3728
				if false {
				} else if z.HasExtensions() && z.EncExt(x.UID) {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.UID))
				}
			}
			if yyr3716 || yy2arr3716 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3716[4] {
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3730 := *x.Controller
						yym3731 := z.EncBinary()
						_ = yym3731
						if false {
						} else {
							r.EncodeBool(bool(yy3730))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3716[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("controller"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Controller == nil {
						r.EncodeNil()
					} else {
						yy3732 := *x.Controller
						yym3733 := z.EncBinary()
						_ = yym3733
						if false {
						} else {
							r.EncodeBool(bool(yy3732))
						}
					}
				}
			}
			if yyr3716 || yy2arr3716 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *OwnerReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3734 := z.DecBinary()
	_ = yym3734
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3735 := r.ContainerType()
		if yyct3735 == codecSelferValueTypeMap1234 {
			yyl3735 := r.ReadMapStart()
			if yyl3735 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3735, d)
			}
		} else if yyct3735 == codecSelferValueTypeArray1234 {
			yyl3735 := r.ReadArrayStart()
			if yyl3735 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3735, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *OwnerReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3736Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3736Slc
	var yyhl3736 bool = l >= 0
	for yyj3736 := 0; ; yyj3736++ {
		if yyhl3736 {
			if yyj3736 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3736Slc = r.DecodeBytes(yys3736Slc, true, true)
		yys3736 := string(yys3736Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3736 {
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "controller":
			if r.TryDecodeAsNil() {
				if x.Controller != nil {
					x.Controller = nil
				}
			} else {
				if x.Controller == nil {
					x.Controller = new(bool)
				}
				yym3742 := z.DecBinary()
				_ = yym3742
				if false {
				} else {
					*((*bool)(x.Controller)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3736)
		} // end switch yys3736
	} // end for yyj3736
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *OwnerReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3743 int
	var yyb3743 bool
	var yyhl3743 bool = l >= 0
	yyj3743++
	if yyhl3743 {
		yyb3743 = yyj3743 > l
	} else {
		yyb3743 = r.CheckBreak()
	}
	if yyb3743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3743++
	if yyhl3743 {
		yyb3743 = yyj3743 > l
	} else {
		yyb3743 = r.CheckBreak()
	}
	if yyb3743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3743++
	if yyhl3743 {
		yyb3743 = yyj3743 > l
	} else {
		yyb3743 = r.CheckBreak()
	}
	if yyb3743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3743++
	if yyhl3743 {
		yyb3743 = yyj3743 > l
	} else {
		yyb3743 = r.CheckBreak()
	}
	if yyb3743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3743++
	if yyhl3743 {
		yyb3743 = yyj3743 > l
	} else {
		yyb3743 = r.CheckBreak()
	}
	if yyb3743 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Controller != nil {
			x.Controller = nil
		}
	} else {
		if x.Controller == nil {
			x.Controller = new(bool)
		}
		yym3749 := z.DecBinary()
		_ = yym3749
		if false {
		} else {
			*((*bool)(x.Controller)) = r.DecodeBool()
		}
	}
	for {
		yyj3743++
		if yyhl3743 {
			yyb3743 = yyj3743 > l
		} else {
			yyb3743 = r.CheckBreak()
		}
		if yyb3743 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3743-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3750 := z.EncBinary()
		_ = yym3750
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3751 := !z.EncBinary()
			yy2arr3751 := z.EncBasicHandle().StructToArray
			var yyq3751 [7]bool
			_, _, _ = yysep3751, yyq3751, yy2arr3751
			const yyr3751 bool = false
			yyq3751[0] = x.Kind != ""
			yyq3751[1] = x.Namespace != ""
			yyq3751[2] = x.Name != ""
			yyq3751[3] = x.UID != ""
			yyq3751[4] = x.APIVersion != ""
			yyq3751[5] = x.ResourceVersion != ""
			yyq3751[6] = x.FieldPath != ""
			var yynn3751 int
			if yyr3751 || yy2arr3751 {
				r.EncodeArrayStart(7)
			} else {
				yynn3751 = 0
				for _, b := range yyq3751 {
					if b {
						yynn3751++
					}
				}
				r.EncodeMapStart(yynn3751)
				yynn3751 = 0
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[0] {
					yym3753 := z.EncBinary()
					_ = yym3753
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3754 := z.EncBinary()
					_ = yym3754
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[1] {
					yym3756 := z.EncBinary()
					_ = yym3756
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("namespace"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3757 := z.EncBinary()
					_ = yym3757
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Namespace))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[2] {
					yym3759 := z.EncBinary()
					_ = yym3759
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("name"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3760 := z.EncBinary()
					_ = yym3760
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Name))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[3] {
					yym3762 := z.EncBinary()
					_ = yym3762
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("uid"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3763 := z.EncBinary()
					_ = yym3763
					if false {
					} else if z.HasExtensions() && z.EncExt(x.UID) {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.UID))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[4] {
					yym3765 := z.EncBinary()
					_ = yym3765
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3766 := z.EncBinary()
					_ = yym3766
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[5] {
					yym3768 := z.EncBinary()
					_ = yym3768
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("resourceVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3769 := z.EncBinary()
					_ = yym3769
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.ResourceVersion))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3751[6] {
					yym3771 := z.EncBinary()
					_ = yym3771
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3751[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("fieldPath"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3772 := z.EncBinary()
					_ = yym3772
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.FieldPath))
					}
				}
			}
			if yyr3751 || yy2arr3751 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3773 := z.DecBinary()
	_ = yym3773
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3774 := r.ContainerType()
		if yyct3774 == codecSelferValueTypeMap1234 {
			yyl3774 := r.ReadMapStart()
			if yyl3774 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3774, d)
			}
		} else if yyct3774 == codecSelferValueTypeArray1234 {
			yyl3774 := r.ReadArrayStart()
			if yyl3774 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3774, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3775Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3775Slc
	var yyhl3775 bool = l >= 0
	for yyj3775 := 0; ; yyj3775++ {
		if yyhl3775 {
			if yyj3775 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3775Slc = r.DecodeBytes(yys3775Slc, true, true)
		yys3775 := string(yys3775Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3775 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "namespace":
			if r.TryDecodeAsNil() {
				x.Namespace = ""
			} else {
				x.Namespace = string(r.DecodeString())
			}
		case "name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		case "uid":
			if r.TryDecodeAsNil() {
				x.UID = ""
			} else {
				x.UID = pkg1_types.UID(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "resourceVersion":
			if r.TryDecodeAsNil() {
				x.ResourceVersion = ""
			} else {
				x.ResourceVersion = string(r.DecodeString())
			}
		case "fieldPath":
			if r.TryDecodeAsNil() {
				x.FieldPath = ""
			} else {
				x.FieldPath = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3775)
		} // end switch yys3775
	} // end for yyj3775
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3783 int
	var yyb3783 bool
	var yyhl3783 bool = l >= 0
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Namespace = ""
	} else {
		x.Namespace = string(r.DecodeString())
	}
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.UID = ""
	} else {
		x.UID = pkg1_types.UID(r.DecodeString())
	}
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ResourceVersion = ""
	} else {
		x.ResourceVersion = string(r.DecodeString())
	}
	yyj3783++
	if yyhl3783 {
		yyb3783 = yyj3783 > l
	} else {
		yyb3783 = r.CheckBreak()
	}
	if yyb3783 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FieldPath = ""
	} else {
		x.FieldPath = string(r.DecodeString())
	}
	for {
		yyj3783++
		if yyhl3783 {
			yyb3783 = yyj3783 > l
		} else {
			yyb3783 = r.CheckBreak()
		}
		if yyb3783 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3783-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LocalObjectReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3791 := z.EncBinary()
		_ = yym3791
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3792 := !z.EncBinary()
			yy2arr3792 := z.EncBasicHandle().StructToArray
			var yyq3792 [1]bool
			_, _, _ = yysep3792, yyq3792, yy2arr3792
			const yyr3792 bool = false
			var yynn3792 int
			if yyr3792 || yy2arr3792 {
				r.EncodeArrayStart(1)
			} else {
				yynn3792 = 1
				for _, b := range yyq3792 {
					if b {
						yynn3792++
					}
				}
				r.EncodeMapStart(yynn3792)
				yynn3792 = 0
			}
			if yyr3792 || yy2arr3792 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym3794 := z.EncBinary()
				_ = yym3794
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("Name"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym3795 := z.EncBinary()
				_ = yym3795
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Name))
				}
			}
			if yyr3792 || yy2arr3792 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LocalObjectReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3796 := z.DecBinary()
	_ = yym3796
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3797 := r.ContainerType()
		if yyct3797 == codecSelferValueTypeMap1234 {
			yyl3797 := r.ReadMapStart()
			if yyl3797 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3797, d)
			}
		} else if yyct3797 == codecSelferValueTypeArray1234 {
			yyl3797 := r.ReadArrayStart()
			if yyl3797 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3797, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LocalObjectReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3798Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3798Slc
	var yyhl3798 bool = l >= 0
	for yyj3798 := 0; ; yyj3798++ {
		if yyhl3798 {
			if yyj3798 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3798Slc = r.DecodeBytes(yys3798Slc, true, true)
		yys3798 := string(yys3798Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3798 {
		case "Name":
			if r.TryDecodeAsNil() {
				x.Name = ""
			} else {
				x.Name = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3798)
		} // end switch yys3798
	} // end for yyj3798
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LocalObjectReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3800 int
	var yyb3800 bool
	var yyhl3800 bool = l >= 0
	yyj3800++
	if yyhl3800 {
		yyb3800 = yyj3800 > l
	} else {
		yyb3800 = r.CheckBreak()
	}
	if yyb3800 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Name = ""
	} else {
		x.Name = string(r.DecodeString())
	}
	for {
		yyj3800++
		if yyhl3800 {
			yyb3800 = yyj3800 > l
		} else {
			yyb3800 = r.CheckBreak()
		}
		if yyb3800 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3800-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SerializedReference) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3802 := z.EncBinary()
		_ = yym3802
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3803 := !z.EncBinary()
			yy2arr3803 := z.EncBasicHandle().StructToArray
			var yyq3803 [3]bool
			_, _, _ = yysep3803, yyq3803, yy2arr3803
			const yyr3803 bool = false
			yyq3803[0] = x.Kind != ""
			yyq3803[1] = x.APIVersion != ""
			yyq3803[2] = true
			var yynn3803 int
			if yyr3803 || yy2arr3803 {
				r.EncodeArrayStart(3)
			} else {
				yynn3803 = 0
				for _, b := range yyq3803 {
					if b {
						yynn3803++
					}
				}
				r.EncodeMapStart(yynn3803)
				yynn3803 = 0
			}
			if yyr3803 || yy2arr3803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3803[0] {
					yym3805 := z.EncBinary()
					_ = yym3805
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3803[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3806 := z.EncBinary()
					_ = yym3806
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3803 || yy2arr3803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3803[1] {
					yym3808 := z.EncBinary()
					_ = yym3808
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3803[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3809 := z.EncBinary()
					_ = yym3809
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3803 || yy2arr3803 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3803[2] {
					yy3811 := &x.Reference
					yy3811.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3803[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reference"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3812 := &x.Reference
					yy3812.CodecEncodeSelf(e)
				}
			}
			if yyr3803 || yy2arr3803 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SerializedReference) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3813 := z.DecBinary()
	_ = yym3813
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3814 := r.ContainerType()
		if yyct3814 == codecSelferValueTypeMap1234 {
			yyl3814 := r.ReadMapStart()
			if yyl3814 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3814, d)
			}
		} else if yyct3814 == codecSelferValueTypeArray1234 {
			yyl3814 := r.ReadArrayStart()
			if yyl3814 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3814, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SerializedReference) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3815Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3815Slc
	var yyhl3815 bool = l >= 0
	for yyj3815 := 0; ; yyj3815++ {
		if yyhl3815 {
			if yyj3815 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3815Slc = r.DecodeBytes(yys3815Slc, true, true)
		yys3815 := string(yys3815Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3815 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "reference":
			if r.TryDecodeAsNil() {
				x.Reference = ObjectReference{}
			} else {
				yyv3818 := &x.Reference
				yyv3818.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3815)
		} // end switch yys3815
	} // end for yyj3815
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SerializedReference) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3819 int
	var yyb3819 bool
	var yyhl3819 bool = l >= 0
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3819++
	if yyhl3819 {
		yyb3819 = yyj3819 > l
	} else {
		yyb3819 = r.CheckBreak()
	}
	if yyb3819 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reference = ObjectReference{}
	} else {
		yyv3822 := &x.Reference
		yyv3822.CodecDecodeSelf(d)
	}
	for {
		yyj3819++
		if yyhl3819 {
			yyb3819 = yyj3819 > l
		} else {
			yyb3819 = r.CheckBreak()
		}
		if yyb3819 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3819-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventSource) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3823 := z.EncBinary()
		_ = yym3823
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3824 := !z.EncBinary()
			yy2arr3824 := z.EncBasicHandle().StructToArray
			var yyq3824 [2]bool
			_, _, _ = yysep3824, yyq3824, yy2arr3824
			const yyr3824 bool = false
			yyq3824[0] = x.Component != ""
			yyq3824[1] = x.Host != ""
			var yynn3824 int
			if yyr3824 || yy2arr3824 {
				r.EncodeArrayStart(2)
			} else {
				yynn3824 = 0
				for _, b := range yyq3824 {
					if b {
						yynn3824++
					}
				}
				r.EncodeMapStart(yynn3824)
				yynn3824 = 0
			}
			if yyr3824 || yy2arr3824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3824[0] {
					yym3826 := z.EncBinary()
					_ = yym3826
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3824[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("component"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3827 := z.EncBinary()
					_ = yym3827
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Component))
					}
				}
			}
			if yyr3824 || yy2arr3824 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3824[1] {
					yym3829 := z.EncBinary()
					_ = yym3829
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3824[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("host"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3830 := z.EncBinary()
					_ = yym3830
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Host))
					}
				}
			}
			if yyr3824 || yy2arr3824 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventSource) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3831 := z.DecBinary()
	_ = yym3831
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3832 := r.ContainerType()
		if yyct3832 == codecSelferValueTypeMap1234 {
			yyl3832 := r.ReadMapStart()
			if yyl3832 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3832, d)
			}
		} else if yyct3832 == codecSelferValueTypeArray1234 {
			yyl3832 := r.ReadArrayStart()
			if yyl3832 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3832, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventSource) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3833Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3833Slc
	var yyhl3833 bool = l >= 0
	for yyj3833 := 0; ; yyj3833++ {
		if yyhl3833 {
			if yyj3833 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3833Slc = r.DecodeBytes(yys3833Slc, true, true)
		yys3833 := string(yys3833Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3833 {
		case "component":
			if r.TryDecodeAsNil() {
				x.Component = ""
			} else {
				x.Component = string(r.DecodeString())
			}
		case "host":
			if r.TryDecodeAsNil() {
				x.Host = ""
			} else {
				x.Host = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3833)
		} // end switch yys3833
	} // end for yyj3833
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventSource) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3836 int
	var yyb3836 bool
	var yyhl3836 bool = l >= 0
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Component = ""
	} else {
		x.Component = string(r.DecodeString())
	}
	yyj3836++
	if yyhl3836 {
		yyb3836 = yyj3836 > l
	} else {
		yyb3836 = r.CheckBreak()
	}
	if yyb3836 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Host = ""
	} else {
		x.Host = string(r.DecodeString())
	}
	for {
		yyj3836++
		if yyhl3836 {
			yyb3836 = yyj3836 > l
		} else {
			yyb3836 = r.CheckBreak()
		}
		if yyb3836 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3836-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Event) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3839 := z.EncBinary()
		_ = yym3839
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3840 := !z.EncBinary()
			yy2arr3840 := z.EncBasicHandle().StructToArray
			var yyq3840 [11]bool
			_, _, _ = yysep3840, yyq3840, yy2arr3840
			const yyr3840 bool = false
			yyq3840[0] = x.Kind != ""
			yyq3840[1] = x.APIVersion != ""
			yyq3840[2] = true
			yyq3840[3] = true
			yyq3840[4] = x.Reason != ""
			yyq3840[5] = x.Message != ""
			yyq3840[6] = true
			yyq3840[7] = true
			yyq3840[8] = true
			yyq3840[9] = x.Count != 0
			yyq3840[10] = x.Type != ""
			var yynn3840 int
			if yyr3840 || yy2arr3840 {
				r.EncodeArrayStart(11)
			} else {
				yynn3840 = 0
				for _, b := range yyq3840 {
					if b {
						yynn3840++
					}
				}
				r.EncodeMapStart(yynn3840)
				yynn3840 = 0
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[0] {
					yym3842 := z.EncBinary()
					_ = yym3842
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3840[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3843 := z.EncBinary()
					_ = yym3843
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[1] {
					yym3845 := z.EncBinary()
					_ = yym3845
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3840[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3846 := z.EncBinary()
					_ = yym3846
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[2] {
					yy3848 := &x.ObjectMeta
					yy3848.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3840[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3849 := &x.ObjectMeta
					yy3849.CodecEncodeSelf(e)
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[3] {
					yy3851 := &x.InvolvedObject
					yy3851.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3840[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("involvedObject"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3852 := &x.InvolvedObject
					yy3852.CodecEncodeSelf(e)
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[4] {
					yym3854 := z.EncBinary()
					_ = yym3854
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3840[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("reason"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3855 := z.EncBinary()
					_ = yym3855
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Reason))
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[5] {
					yym3857 := z.EncBinary()
					_ = yym3857
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3840[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3858 := z.EncBinary()
					_ = yym3858
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[6] {
					yy3860 := &x.Source
					yy3860.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3840[6] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("source"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3861 := &x.Source
					yy3861.CodecEncodeSelf(e)
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[7] {
					yy3863 := &x.FirstTimestamp
					yym3864 := z.EncBinary()
					_ = yym3864
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3863) {
					} else if yym3864 {
						z.EncBinaryMarshal(yy3863)
					} else if !yym3864 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3863)
					} else {
						z.EncFallback(yy3863)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3840[7] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("firstTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3865 := &x.FirstTimestamp
					yym3866 := z.EncBinary()
					_ = yym3866
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3865) {
					} else if yym3866 {
						z.EncBinaryMarshal(yy3865)
					} else if !yym3866 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3865)
					} else {
						z.EncFallback(yy3865)
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[8] {
					yy3868 := &x.LastTimestamp
					yym3869 := z.EncBinary()
					_ = yym3869
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3868) {
					} else if yym3869 {
						z.EncBinaryMarshal(yy3868)
					} else if !yym3869 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3868)
					} else {
						z.EncFallback(yy3868)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3840[8] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("lastTimestamp"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3870 := &x.LastTimestamp
					yym3871 := z.EncBinary()
					_ = yym3871
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3870) {
					} else if yym3871 {
						z.EncBinaryMarshal(yy3870)
					} else if !yym3871 && z.IsJSONHandle() {
						z.EncJSONMarshal(yy3870)
					} else {
						z.EncFallback(yy3870)
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[9] {
					yym3873 := z.EncBinary()
					_ = yym3873
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				} else {
					r.EncodeInt(0)
				}
			} else {
				if yyq3840[9] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("count"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3874 := z.EncBinary()
					_ = yym3874
					if false {
					} else {
						r.EncodeInt(int64(x.Count))
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3840[10] {
					yym3876 := z.EncBinary()
					_ = yym3876
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3840[10] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3877 := z.EncBinary()
					_ = yym3877
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr3840 || yy2arr3840 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Event) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3878 := z.DecBinary()
	_ = yym3878
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3879 := r.ContainerType()
		if yyct3879 == codecSelferValueTypeMap1234 {
			yyl3879 := r.ReadMapStart()
			if yyl3879 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3879, d)
			}
		} else if yyct3879 == codecSelferValueTypeArray1234 {
			yyl3879 := r.ReadArrayStart()
			if yyl3879 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3879, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Event) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3880Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3880Slc
	var yyhl3880 bool = l >= 0
	for yyj3880 := 0; ; yyj3880++ {
		if yyhl3880 {
			if yyj3880 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3880Slc = r.DecodeBytes(yys3880Slc, true, true)
		yys3880 := string(yys3880Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3880 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv3883 := &x.ObjectMeta
				yyv3883.CodecDecodeSelf(d)
			}
		case "involvedObject":
			if r.TryDecodeAsNil() {
				x.InvolvedObject = ObjectReference{}
			} else {
				yyv3884 := &x.InvolvedObject
				yyv3884.CodecDecodeSelf(d)
			}
		case "reason":
			if r.TryDecodeAsNil() {
				x.Reason = ""
			} else {
				x.Reason = string(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "source":
			if r.TryDecodeAsNil() {
				x.Source = EventSource{}
			} else {
				yyv3887 := &x.Source
				yyv3887.CodecDecodeSelf(d)
			}
		case "firstTimestamp":
			if r.TryDecodeAsNil() {
				x.FirstTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3888 := &x.FirstTimestamp
				yym3889 := z.DecBinary()
				_ = yym3889
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3888) {
				} else if yym3889 {
					z.DecBinaryUnmarshal(yyv3888)
				} else if !yym3889 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3888)
				} else {
					z.DecFallback(yyv3888, false)
				}
			}
		case "lastTimestamp":
			if r.TryDecodeAsNil() {
				x.LastTimestamp = pkg2_unversioned.Time{}
			} else {
				yyv3890 := &x.LastTimestamp
				yym3891 := z.DecBinary()
				_ = yym3891
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3890) {
				} else if yym3891 {
					z.DecBinaryUnmarshal(yyv3890)
				} else if !yym3891 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv3890)
				} else {
					z.DecFallback(yyv3890, false)
				}
			}
		case "count":
			if r.TryDecodeAsNil() {
				x.Count = 0
			} else {
				x.Count = int32(r.DecodeInt(32))
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys3880)
		} // end switch yys3880
	} // end for yyj3880
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Event) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3894 int
	var yyb3894 bool
	var yyhl3894 bool = l >= 0
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv3897 := &x.ObjectMeta
		yyv3897.CodecDecodeSelf(d)
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.InvolvedObject = ObjectReference{}
	} else {
		yyv3898 := &x.InvolvedObject
		yyv3898.CodecDecodeSelf(d)
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Reason = ""
	} else {
		x.Reason = string(r.DecodeString())
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Source = EventSource{}
	} else {
		yyv3901 := &x.Source
		yyv3901.CodecDecodeSelf(d)
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.FirstTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3902 := &x.FirstTimestamp
		yym3903 := z.DecBinary()
		_ = yym3903
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3902) {
		} else if yym3903 {
			z.DecBinaryUnmarshal(yyv3902)
		} else if !yym3903 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3902)
		} else {
			z.DecFallback(yyv3902, false)
		}
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.LastTimestamp = pkg2_unversioned.Time{}
	} else {
		yyv3904 := &x.LastTimestamp
		yym3905 := z.DecBinary()
		_ = yym3905
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3904) {
		} else if yym3905 {
			z.DecBinaryUnmarshal(yyv3904)
		} else if !yym3905 && z.IsJSONHandle() {
			z.DecJSONUnmarshal(yyv3904)
		} else {
			z.DecFallback(yyv3904, false)
		}
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Count = 0
	} else {
		x.Count = int32(r.DecodeInt(32))
	}
	yyj3894++
	if yyhl3894 {
		yyb3894 = yyj3894 > l
	} else {
		yyb3894 = r.CheckBreak()
	}
	if yyb3894 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	for {
		yyj3894++
		if yyhl3894 {
			yyb3894 = yyj3894 > l
		} else {
			yyb3894 = r.CheckBreak()
		}
		if yyb3894 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3894-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *EventList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3908 := z.EncBinary()
		_ = yym3908
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3909 := !z.EncBinary()
			yy2arr3909 := z.EncBasicHandle().StructToArray
			var yyq3909 [4]bool
			_, _, _ = yysep3909, yyq3909, yy2arr3909
			const yyr3909 bool = false
			yyq3909[0] = x.Kind != ""
			yyq3909[1] = x.APIVersion != ""
			yyq3909[2] = true
			var yynn3909 int
			if yyr3909 || yy2arr3909 {
				r.EncodeArrayStart(4)
			} else {
				yynn3909 = 1
				for _, b := range yyq3909 {
					if b {
						yynn3909++
					}
				}
				r.EncodeMapStart(yynn3909)
				yynn3909 = 0
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[0] {
					yym3911 := z.EncBinary()
					_ = yym3911
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3909[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3912 := z.EncBinary()
					_ = yym3912
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[1] {
					yym3914 := z.EncBinary()
					_ = yym3914
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3909[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3915 := z.EncBinary()
					_ = yym3915
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3909[2] {
					yy3917 := &x.ListMeta
					yym3918 := z.EncBinary()
					_ = yym3918
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3917) {
					} else {
						z.EncFallback(yy3917)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3909[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3919 := &x.ListMeta
					yym3920 := z.EncBinary()
					_ = yym3920
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3919) {
					} else {
						z.EncFallback(yy3919)
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3922 := z.EncBinary()
					_ = yym3922
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3923 := z.EncBinary()
					_ = yym3923
					if false {
					} else {
						h.encSliceEvent(([]Event)(x.Items), e)
					}
				}
			}
			if yyr3909 || yy2arr3909 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *EventList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3924 := z.DecBinary()
	_ = yym3924
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3925 := r.ContainerType()
		if yyct3925 == codecSelferValueTypeMap1234 {
			yyl3925 := r.ReadMapStart()
			if yyl3925 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3925, d)
			}
		} else if yyct3925 == codecSelferValueTypeArray1234 {
			yyl3925 := r.ReadArrayStart()
			if yyl3925 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3925, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *EventList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3926Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3926Slc
	var yyhl3926 bool = l >= 0
	for yyj3926 := 0; ; yyj3926++ {
		if yyhl3926 {
			if yyj3926 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3926Slc = r.DecodeBytes(yys3926Slc, true, true)
		yys3926 := string(yys3926Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3926 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3929 := &x.ListMeta
				yym3930 := z.DecBinary()
				_ = yym3930
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3929) {
				} else {
					z.DecFallback(yyv3929, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3931 := &x.Items
				yym3932 := z.DecBinary()
				_ = yym3932
				if false {
				} else {
					h.decSliceEvent((*[]Event)(yyv3931), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3926)
		} // end switch yys3926
	} // end for yyj3926
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *EventList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3933 int
	var yyb3933 bool
	var yyhl3933 bool = l >= 0
	yyj3933++
	if yyhl3933 {
		yyb3933 = yyj3933 > l
	} else {
		yyb3933 = r.CheckBreak()
	}
	if yyb3933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3933++
	if yyhl3933 {
		yyb3933 = yyj3933 > l
	} else {
		yyb3933 = r.CheckBreak()
	}
	if yyb3933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3933++
	if yyhl3933 {
		yyb3933 = yyj3933 > l
	} else {
		yyb3933 = r.CheckBreak()
	}
	if yyb3933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3936 := &x.ListMeta
		yym3937 := z.DecBinary()
		_ = yym3937
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3936) {
		} else {
			z.DecFallback(yyv3936, false)
		}
	}
	yyj3933++
	if yyhl3933 {
		yyb3933 = yyj3933 > l
	} else {
		yyb3933 = r.CheckBreak()
	}
	if yyb3933 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3938 := &x.Items
		yym3939 := z.DecBinary()
		_ = yym3939
		if false {
		} else {
			h.decSliceEvent((*[]Event)(yyv3938), d)
		}
	}
	for {
		yyj3933++
		if yyhl3933 {
			yyb3933 = yyj3933 > l
		} else {
			yyb3933 = r.CheckBreak()
		}
		if yyb3933 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3933-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *List) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3940 := z.EncBinary()
		_ = yym3940
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3941 := !z.EncBinary()
			yy2arr3941 := z.EncBasicHandle().StructToArray
			var yyq3941 [4]bool
			_, _, _ = yysep3941, yyq3941, yy2arr3941
			const yyr3941 bool = false
			yyq3941[0] = x.Kind != ""
			yyq3941[1] = x.APIVersion != ""
			yyq3941[2] = true
			var yynn3941 int
			if yyr3941 || yy2arr3941 {
				r.EncodeArrayStart(4)
			} else {
				yynn3941 = 1
				for _, b := range yyq3941 {
					if b {
						yynn3941++
					}
				}
				r.EncodeMapStart(yynn3941)
				yynn3941 = 0
			}
			if yyr3941 || yy2arr3941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3941[0] {
					yym3943 := z.EncBinary()
					_ = yym3943
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3941[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3944 := z.EncBinary()
					_ = yym3944
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr3941 || yy2arr3941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3941[1] {
					yym3946 := z.EncBinary()
					_ = yym3946
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3941[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym3947 := z.EncBinary()
					_ = yym3947
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr3941 || yy2arr3941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3941[2] {
					yy3949 := &x.ListMeta
					yym3950 := z.EncBinary()
					_ = yym3950
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3949) {
					} else {
						z.EncFallback(yy3949)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3941[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy3951 := &x.ListMeta
					yym3952 := z.EncBinary()
					_ = yym3952
					if false {
					} else if z.HasExtensions() && z.EncExt(yy3951) {
					} else {
						z.EncFallback(yy3951)
					}
				}
			}
			if yyr3941 || yy2arr3941 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3954 := z.EncBinary()
					_ = yym3954
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym3955 := z.EncBinary()
					_ = yym3955
					if false {
					} else {
						h.encSliceruntime_Object(([]pkg7_runtime.Object)(x.Items), e)
					}
				}
			}
			if yyr3941 || yy2arr3941 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *List) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3956 := z.DecBinary()
	_ = yym3956
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3957 := r.ContainerType()
		if yyct3957 == codecSelferValueTypeMap1234 {
			yyl3957 := r.ReadMapStart()
			if yyl3957 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3957, d)
			}
		} else if yyct3957 == codecSelferValueTypeArray1234 {
			yyl3957 := r.ReadArrayStart()
			if yyl3957 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3957, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *List) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3958Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3958Slc
	var yyhl3958 bool = l >= 0
	for yyj3958 := 0; ; yyj3958++ {
		if yyhl3958 {
			if yyj3958 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3958Slc = r.DecodeBytes(yys3958Slc, true, true)
		yys3958 := string(yys3958Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3958 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv3961 := &x.ListMeta
				yym3962 := z.DecBinary()
				_ = yym3962
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv3961) {
				} else {
					z.DecFallback(yyv3961, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv3963 := &x.Items
				yym3964 := z.DecBinary()
				_ = yym3964
				if false {
				} else {
					h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3963), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys3958)
		} // end switch yys3958
	} // end for yyj3958
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *List) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3965 int
	var yyb3965 bool
	var yyhl3965 bool = l >= 0
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv3968 := &x.ListMeta
		yym3969 := z.DecBinary()
		_ = yym3969
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv3968) {
		} else {
			z.DecFallback(yyv3968, false)
		}
	}
	yyj3965++
	if yyhl3965 {
		yyb3965 = yyj3965 > l
	} else {
		yyb3965 = r.CheckBreak()
	}
	if yyb3965 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv3970 := &x.Items
		yym3971 := z.DecBinary()
		_ = yym3971
		if false {
		} else {
			h.decSliceruntime_Object((*[]pkg7_runtime.Object)(yyv3970), d)
		}
	}
	for {
		yyj3965++
		if yyhl3965 {
			yyb3965 = yyj3965 > l
		} else {
			yyb3965 = r.CheckBreak()
		}
		if yyb3965 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3965-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x LimitType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym3972 := z.EncBinary()
	_ = yym3972
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *LimitType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3973 := z.DecBinary()
	_ = yym3973
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *LimitRangeItem) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3974 := z.EncBinary()
		_ = yym3974
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3975 := !z.EncBinary()
			yy2arr3975 := z.EncBasicHandle().StructToArray
			var yyq3975 [6]bool
			_, _, _ = yysep3975, yyq3975, yy2arr3975
			const yyr3975 bool = false
			yyq3975[0] = x.Type != ""
			yyq3975[1] = len(x.Max) != 0
			yyq3975[2] = len(x.Min) != 0
			yyq3975[3] = len(x.Default) != 0
			yyq3975[4] = len(x.DefaultRequest) != 0
			yyq3975[5] = len(x.MaxLimitRequestRatio) != 0
			var yynn3975 int
			if yyr3975 || yy2arr3975 {
				r.EncodeArrayStart(6)
			} else {
				yynn3975 = 0
				for _, b := range yyq3975 {
					if b {
						yynn3975++
					}
				}
				r.EncodeMapStart(yynn3975)
				yynn3975 = 0
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[0] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq3975[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[1] {
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3975[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("max"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Max == nil {
						r.EncodeNil()
					} else {
						x.Max.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[2] {
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3975[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("min"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Min == nil {
						r.EncodeNil()
					} else {
						x.Min.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[3] {
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3975[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("default"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Default == nil {
						r.EncodeNil()
					} else {
						x.Default.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[4] {
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3975[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("defaultRequest"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.DefaultRequest == nil {
						r.EncodeNil()
					} else {
						x.DefaultRequest.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq3975[5] {
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq3975[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("maxLimitRequestRatio"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.MaxLimitRequestRatio == nil {
						r.EncodeNil()
					} else {
						x.MaxLimitRequestRatio.CodecEncodeSelf(e)
					}
				}
			}
			if yyr3975 || yy2arr3975 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeItem) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym3982 := z.DecBinary()
	_ = yym3982
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct3983 := r.ContainerType()
		if yyct3983 == codecSelferValueTypeMap1234 {
			yyl3983 := r.ReadMapStart()
			if yyl3983 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl3983, d)
			}
		} else if yyct3983 == codecSelferValueTypeArray1234 {
			yyl3983 := r.ReadArrayStart()
			if yyl3983 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl3983, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeItem) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys3984Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys3984Slc
	var yyhl3984 bool = l >= 0
	for yyj3984 := 0; ; yyj3984++ {
		if yyhl3984 {
			if yyj3984 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys3984Slc = r.DecodeBytes(yys3984Slc, true, true)
		yys3984 := string(yys3984Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys3984 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = LimitType(r.DecodeString())
			}
		case "max":
			if r.TryDecodeAsNil() {
				x.Max = nil
			} else {
				yyv3986 := &x.Max
				yyv3986.CodecDecodeSelf(d)
			}
		case "min":
			if r.TryDecodeAsNil() {
				x.Min = nil
			} else {
				yyv3987 := &x.Min
				yyv3987.CodecDecodeSelf(d)
			}
		case "default":
			if r.TryDecodeAsNil() {
				x.Default = nil
			} else {
				yyv3988 := &x.Default
				yyv3988.CodecDecodeSelf(d)
			}
		case "defaultRequest":
			if r.TryDecodeAsNil() {
				x.DefaultRequest = nil
			} else {
				yyv3989 := &x.DefaultRequest
				yyv3989.CodecDecodeSelf(d)
			}
		case "maxLimitRequestRatio":
			if r.TryDecodeAsNil() {
				x.MaxLimitRequestRatio = nil
			} else {
				yyv3990 := &x.MaxLimitRequestRatio
				yyv3990.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys3984)
		} // end switch yys3984
	} // end for yyj3984
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeItem) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj3991 int
	var yyb3991 bool
	var yyhl3991 bool = l >= 0
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = LimitType(r.DecodeString())
	}
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Max = nil
	} else {
		yyv3993 := &x.Max
		yyv3993.CodecDecodeSelf(d)
	}
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Min = nil
	} else {
		yyv3994 := &x.Min
		yyv3994.CodecDecodeSelf(d)
	}
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Default = nil
	} else {
		yyv3995 := &x.Default
		yyv3995.CodecDecodeSelf(d)
	}
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.DefaultRequest = nil
	} else {
		yyv3996 := &x.DefaultRequest
		yyv3996.CodecDecodeSelf(d)
	}
	yyj3991++
	if yyhl3991 {
		yyb3991 = yyj3991 > l
	} else {
		yyb3991 = r.CheckBreak()
	}
	if yyb3991 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.MaxLimitRequestRatio = nil
	} else {
		yyv3997 := &x.MaxLimitRequestRatio
		yyv3997.CodecDecodeSelf(d)
	}
	for {
		yyj3991++
		if yyhl3991 {
			yyb3991 = yyj3991 > l
		} else {
			yyb3991 = r.CheckBreak()
		}
		if yyb3991 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj3991-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym3998 := z.EncBinary()
		_ = yym3998
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep3999 := !z.EncBinary()
			yy2arr3999 := z.EncBasicHandle().StructToArray
			var yyq3999 [1]bool
			_, _, _ = yysep3999, yyq3999, yy2arr3999
			const yyr3999 bool = false
			var yynn3999 int
			if yyr3999 || yy2arr3999 {
				r.EncodeArrayStart(1)
			} else {
				yynn3999 = 1
				for _, b := range yyq3999 {
					if b {
						yynn3999++
					}
				}
				r.EncodeMapStart(yynn3999)
				yynn3999 = 0
			}
			if yyr3999 || yy2arr3999 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4001 := z.EncBinary()
					_ = yym4001
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("limits"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Limits == nil {
					r.EncodeNil()
				} else {
					yym4002 := z.EncBinary()
					_ = yym4002
					if false {
					} else {
						h.encSliceLimitRangeItem(([]LimitRangeItem)(x.Limits), e)
					}
				}
			}
			if yyr3999 || yy2arr3999 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4003 := z.DecBinary()
	_ = yym4003
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4004 := r.ContainerType()
		if yyct4004 == codecSelferValueTypeMap1234 {
			yyl4004 := r.ReadMapStart()
			if yyl4004 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4004, d)
			}
		} else if yyct4004 == codecSelferValueTypeArray1234 {
			yyl4004 := r.ReadArrayStart()
			if yyl4004 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4004, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4005Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4005Slc
	var yyhl4005 bool = l >= 0
	for yyj4005 := 0; ; yyj4005++ {
		if yyhl4005 {
			if yyj4005 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4005Slc = r.DecodeBytes(yys4005Slc, true, true)
		yys4005 := string(yys4005Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4005 {
		case "limits":
			if r.TryDecodeAsNil() {
				x.Limits = nil
			} else {
				yyv4006 := &x.Limits
				yym4007 := z.DecBinary()
				_ = yym4007
				if false {
				} else {
					h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4006), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4005)
		} // end switch yys4005
	} // end for yyj4005
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4008 int
	var yyb4008 bool
	var yyhl4008 bool = l >= 0
	yyj4008++
	if yyhl4008 {
		yyb4008 = yyj4008 > l
	} else {
		yyb4008 = r.CheckBreak()
	}
	if yyb4008 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Limits = nil
	} else {
		yyv4009 := &x.Limits
		yym4010 := z.DecBinary()
		_ = yym4010
		if false {
		} else {
			h.decSliceLimitRangeItem((*[]LimitRangeItem)(yyv4009), d)
		}
	}
	for {
		yyj4008++
		if yyhl4008 {
			yyb4008 = yyj4008 > l
		} else {
			yyb4008 = r.CheckBreak()
		}
		if yyb4008 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4008-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRange) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4011 := z.EncBinary()
		_ = yym4011
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4012 := !z.EncBinary()
			yy2arr4012 := z.EncBasicHandle().StructToArray
			var yyq4012 [4]bool
			_, _, _ = yysep4012, yyq4012, yy2arr4012
			const yyr4012 bool = false
			yyq4012[0] = x.Kind != ""
			yyq4012[1] = x.APIVersion != ""
			yyq4012[2] = true
			yyq4012[3] = true
			var yynn4012 int
			if yyr4012 || yy2arr4012 {
				r.EncodeArrayStart(4)
			} else {
				yynn4012 = 0
				for _, b := range yyq4012 {
					if b {
						yynn4012++
					}
				}
				r.EncodeMapStart(yynn4012)
				yynn4012 = 0
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4012[0] {
					yym4014 := z.EncBinary()
					_ = yym4014
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4012[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4015 := z.EncBinary()
					_ = yym4015
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4012[1] {
					yym4017 := z.EncBinary()
					_ = yym4017
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4012[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4018 := z.EncBinary()
					_ = yym4018
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4012[2] {
					yy4020 := &x.ObjectMeta
					yy4020.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4012[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4021 := &x.ObjectMeta
					yy4021.CodecEncodeSelf(e)
				}
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4012[3] {
					yy4023 := &x.Spec
					yy4023.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4012[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4024 := &x.Spec
					yy4024.CodecEncodeSelf(e)
				}
			}
			if yyr4012 || yy2arr4012 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRange) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4025 := z.DecBinary()
	_ = yym4025
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4026 := r.ContainerType()
		if yyct4026 == codecSelferValueTypeMap1234 {
			yyl4026 := r.ReadMapStart()
			if yyl4026 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4026, d)
			}
		} else if yyct4026 == codecSelferValueTypeArray1234 {
			yyl4026 := r.ReadArrayStart()
			if yyl4026 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4026, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRange) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4027Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4027Slc
	var yyhl4027 bool = l >= 0
	for yyj4027 := 0; ; yyj4027++ {
		if yyhl4027 {
			if yyj4027 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4027Slc = r.DecodeBytes(yys4027Slc, true, true)
		yys4027 := string(yys4027Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4027 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4030 := &x.ObjectMeta
				yyv4030.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = LimitRangeSpec{}
			} else {
				yyv4031 := &x.Spec
				yyv4031.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4027)
		} // end switch yys4027
	} // end for yyj4027
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRange) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4032 int
	var yyb4032 bool
	var yyhl4032 bool = l >= 0
	yyj4032++
	if yyhl4032 {
		yyb4032 = yyj4032 > l
	} else {
		yyb4032 = r.CheckBreak()
	}
	if yyb4032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4032++
	if yyhl4032 {
		yyb4032 = yyj4032 > l
	} else {
		yyb4032 = r.CheckBreak()
	}
	if yyb4032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4032++
	if yyhl4032 {
		yyb4032 = yyj4032 > l
	} else {
		yyb4032 = r.CheckBreak()
	}
	if yyb4032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4035 := &x.ObjectMeta
		yyv4035.CodecDecodeSelf(d)
	}
	yyj4032++
	if yyhl4032 {
		yyb4032 = yyj4032 > l
	} else {
		yyb4032 = r.CheckBreak()
	}
	if yyb4032 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = LimitRangeSpec{}
	} else {
		yyv4036 := &x.Spec
		yyv4036.CodecDecodeSelf(d)
	}
	for {
		yyj4032++
		if yyhl4032 {
			yyb4032 = yyj4032 > l
		} else {
			yyb4032 = r.CheckBreak()
		}
		if yyb4032 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4032-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *LimitRangeList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4037 := z.EncBinary()
		_ = yym4037
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4038 := !z.EncBinary()
			yy2arr4038 := z.EncBasicHandle().StructToArray
			var yyq4038 [4]bool
			_, _, _ = yysep4038, yyq4038, yy2arr4038
			const yyr4038 bool = false
			yyq4038[0] = x.Kind != ""
			yyq4038[1] = x.APIVersion != ""
			yyq4038[2] = true
			var yynn4038 int
			if yyr4038 || yy2arr4038 {
				r.EncodeArrayStart(4)
			} else {
				yynn4038 = 1
				for _, b := range yyq4038 {
					if b {
						yynn4038++
					}
				}
				r.EncodeMapStart(yynn4038)
				yynn4038 = 0
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4038[0] {
					yym4040 := z.EncBinary()
					_ = yym4040
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4038[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4041 := z.EncBinary()
					_ = yym4041
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4038[1] {
					yym4043 := z.EncBinary()
					_ = yym4043
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4038[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4044 := z.EncBinary()
					_ = yym4044
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4038[2] {
					yy4046 := &x.ListMeta
					yym4047 := z.EncBinary()
					_ = yym4047
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4046) {
					} else {
						z.EncFallback(yy4046)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4038[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4048 := &x.ListMeta
					yym4049 := z.EncBinary()
					_ = yym4049
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4048) {
					} else {
						z.EncFallback(yy4048)
					}
				}
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4051 := z.EncBinary()
					_ = yym4051
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4052 := z.EncBinary()
					_ = yym4052
					if false {
					} else {
						h.encSliceLimitRange(([]LimitRange)(x.Items), e)
					}
				}
			}
			if yyr4038 || yy2arr4038 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *LimitRangeList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4053 := z.DecBinary()
	_ = yym4053
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4054 := r.ContainerType()
		if yyct4054 == codecSelferValueTypeMap1234 {
			yyl4054 := r.ReadMapStart()
			if yyl4054 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4054, d)
			}
		} else if yyct4054 == codecSelferValueTypeArray1234 {
			yyl4054 := r.ReadArrayStart()
			if yyl4054 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4054, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *LimitRangeList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4055Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4055Slc
	var yyhl4055 bool = l >= 0
	for yyj4055 := 0; ; yyj4055++ {
		if yyhl4055 {
			if yyj4055 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4055Slc = r.DecodeBytes(yys4055Slc, true, true)
		yys4055 := string(yys4055Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4055 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4058 := &x.ListMeta
				yym4059 := z.DecBinary()
				_ = yym4059
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4058) {
				} else {
					z.DecFallback(yyv4058, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4060 := &x.Items
				yym4061 := z.DecBinary()
				_ = yym4061
				if false {
				} else {
					h.decSliceLimitRange((*[]LimitRange)(yyv4060), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4055)
		} // end switch yys4055
	} // end for yyj4055
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *LimitRangeList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4062 int
	var yyb4062 bool
	var yyhl4062 bool = l >= 0
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4065 := &x.ListMeta
		yym4066 := z.DecBinary()
		_ = yym4066
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4065) {
		} else {
			z.DecFallback(yyv4065, false)
		}
	}
	yyj4062++
	if yyhl4062 {
		yyb4062 = yyj4062 > l
	} else {
		yyb4062 = r.CheckBreak()
	}
	if yyb4062 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4067 := &x.Items
		yym4068 := z.DecBinary()
		_ = yym4068
		if false {
		} else {
			h.decSliceLimitRange((*[]LimitRange)(yyv4067), d)
		}
	}
	for {
		yyj4062++
		if yyhl4062 {
			yyb4062 = yyj4062 > l
		} else {
			yyb4062 = r.CheckBreak()
		}
		if yyb4062 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4062-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x ResourceQuotaScope) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4069 := z.EncBinary()
	_ = yym4069
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ResourceQuotaScope) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4070 := z.DecBinary()
	_ = yym4070
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ResourceQuotaSpec) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4071 := z.EncBinary()
		_ = yym4071
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4072 := !z.EncBinary()
			yy2arr4072 := z.EncBasicHandle().StructToArray
			var yyq4072 [2]bool
			_, _, _ = yysep4072, yyq4072, yy2arr4072
			const yyr4072 bool = false
			yyq4072[0] = len(x.Hard) != 0
			yyq4072[1] = len(x.Scopes) != 0
			var yynn4072 int
			if yyr4072 || yy2arr4072 {
				r.EncodeArrayStart(2)
			} else {
				yynn4072 = 0
				for _, b := range yyq4072 {
					if b {
						yynn4072++
					}
				}
				r.EncodeMapStart(yynn4072)
				yynn4072 = 0
			}
			if yyr4072 || yy2arr4072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4072[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4072[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4072 || yy2arr4072 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4072[1] {
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4075 := z.EncBinary()
						_ = yym4075
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4072[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("scopes"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Scopes == nil {
						r.EncodeNil()
					} else {
						yym4076 := z.EncBinary()
						_ = yym4076
						if false {
						} else {
							h.encSliceResourceQuotaScope(([]ResourceQuotaScope)(x.Scopes), e)
						}
					}
				}
			}
			if yyr4072 || yy2arr4072 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaSpec) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4077 := z.DecBinary()
	_ = yym4077
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4078 := r.ContainerType()
		if yyct4078 == codecSelferValueTypeMap1234 {
			yyl4078 := r.ReadMapStart()
			if yyl4078 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4078, d)
			}
		} else if yyct4078 == codecSelferValueTypeArray1234 {
			yyl4078 := r.ReadArrayStart()
			if yyl4078 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4078, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4079Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4079Slc
	var yyhl4079 bool = l >= 0
	for yyj4079 := 0; ; yyj4079++ {
		if yyhl4079 {
			if yyj4079 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4079Slc = r.DecodeBytes(yys4079Slc, true, true)
		yys4079 := string(yys4079Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4079 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4080 := &x.Hard
				yyv4080.CodecDecodeSelf(d)
			}
		case "scopes":
			if r.TryDecodeAsNil() {
				x.Scopes = nil
			} else {
				yyv4081 := &x.Scopes
				yym4082 := z.DecBinary()
				_ = yym4082
				if false {
				} else {
					h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4081), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4079)
		} // end switch yys4079
	} // end for yyj4079
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaSpec) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4083 int
	var yyb4083 bool
	var yyhl4083 bool = l >= 0
	yyj4083++
	if yyhl4083 {
		yyb4083 = yyj4083 > l
	} else {
		yyb4083 = r.CheckBreak()
	}
	if yyb4083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4084 := &x.Hard
		yyv4084.CodecDecodeSelf(d)
	}
	yyj4083++
	if yyhl4083 {
		yyb4083 = yyj4083 > l
	} else {
		yyb4083 = r.CheckBreak()
	}
	if yyb4083 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Scopes = nil
	} else {
		yyv4085 := &x.Scopes
		yym4086 := z.DecBinary()
		_ = yym4086
		if false {
		} else {
			h.decSliceResourceQuotaScope((*[]ResourceQuotaScope)(yyv4085), d)
		}
	}
	for {
		yyj4083++
		if yyhl4083 {
			yyb4083 = yyj4083 > l
		} else {
			yyb4083 = r.CheckBreak()
		}
		if yyb4083 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4083-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4087 := z.EncBinary()
		_ = yym4087
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4088 := !z.EncBinary()
			yy2arr4088 := z.EncBasicHandle().StructToArray
			var yyq4088 [2]bool
			_, _, _ = yysep4088, yyq4088, yy2arr4088
			const yyr4088 bool = false
			yyq4088[0] = len(x.Hard) != 0
			yyq4088[1] = len(x.Used) != 0
			var yynn4088 int
			if yyr4088 || yy2arr4088 {
				r.EncodeArrayStart(2)
			} else {
				yynn4088 = 0
				for _, b := range yyq4088 {
					if b {
						yynn4088++
					}
				}
				r.EncodeMapStart(yynn4088)
				yynn4088 = 0
			}
			if yyr4088 || yy2arr4088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4088[0] {
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4088[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("hard"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Hard == nil {
						r.EncodeNil()
					} else {
						x.Hard.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4088 || yy2arr4088 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4088[1] {
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4088[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("used"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Used == nil {
						r.EncodeNil()
					} else {
						x.Used.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4088 || yy2arr4088 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4091 := z.DecBinary()
	_ = yym4091
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4092 := r.ContainerType()
		if yyct4092 == codecSelferValueTypeMap1234 {
			yyl4092 := r.ReadMapStart()
			if yyl4092 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4092, d)
			}
		} else if yyct4092 == codecSelferValueTypeArray1234 {
			yyl4092 := r.ReadArrayStart()
			if yyl4092 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4092, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4093Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4093Slc
	var yyhl4093 bool = l >= 0
	for yyj4093 := 0; ; yyj4093++ {
		if yyhl4093 {
			if yyj4093 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4093Slc = r.DecodeBytes(yys4093Slc, true, true)
		yys4093 := string(yys4093Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4093 {
		case "hard":
			if r.TryDecodeAsNil() {
				x.Hard = nil
			} else {
				yyv4094 := &x.Hard
				yyv4094.CodecDecodeSelf(d)
			}
		case "used":
			if r.TryDecodeAsNil() {
				x.Used = nil
			} else {
				yyv4095 := &x.Used
				yyv4095.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4093)
		} // end switch yys4093
	} // end for yyj4093
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4096 int
	var yyb4096 bool
	var yyhl4096 bool = l >= 0
	yyj4096++
	if yyhl4096 {
		yyb4096 = yyj4096 > l
	} else {
		yyb4096 = r.CheckBreak()
	}
	if yyb4096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Hard = nil
	} else {
		yyv4097 := &x.Hard
		yyv4097.CodecDecodeSelf(d)
	}
	yyj4096++
	if yyhl4096 {
		yyb4096 = yyj4096 > l
	} else {
		yyb4096 = r.CheckBreak()
	}
	if yyb4096 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Used = nil
	} else {
		yyv4098 := &x.Used
		yyv4098.CodecDecodeSelf(d)
	}
	for {
		yyj4096++
		if yyhl4096 {
			yyb4096 = yyj4096 > l
		} else {
			yyb4096 = r.CheckBreak()
		}
		if yyb4096 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4096-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuota) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4099 := z.EncBinary()
		_ = yym4099
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4100 := !z.EncBinary()
			yy2arr4100 := z.EncBasicHandle().StructToArray
			var yyq4100 [5]bool
			_, _, _ = yysep4100, yyq4100, yy2arr4100
			const yyr4100 bool = false
			yyq4100[0] = x.Kind != ""
			yyq4100[1] = x.APIVersion != ""
			yyq4100[2] = true
			yyq4100[3] = true
			yyq4100[4] = true
			var yynn4100 int
			if yyr4100 || yy2arr4100 {
				r.EncodeArrayStart(5)
			} else {
				yynn4100 = 0
				for _, b := range yyq4100 {
					if b {
						yynn4100++
					}
				}
				r.EncodeMapStart(yynn4100)
				yynn4100 = 0
			}
			if yyr4100 || yy2arr4100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4100[0] {
					yym4102 := z.EncBinary()
					_ = yym4102
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4100[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4103 := z.EncBinary()
					_ = yym4103
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4100 || yy2arr4100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4100[1] {
					yym4105 := z.EncBinary()
					_ = yym4105
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4100[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4106 := z.EncBinary()
					_ = yym4106
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4100 || yy2arr4100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4100[2] {
					yy4108 := &x.ObjectMeta
					yy4108.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4100[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4109 := &x.ObjectMeta
					yy4109.CodecEncodeSelf(e)
				}
			}
			if yyr4100 || yy2arr4100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4100[3] {
					yy4111 := &x.Spec
					yy4111.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4100[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("spec"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4112 := &x.Spec
					yy4112.CodecEncodeSelf(e)
				}
			}
			if yyr4100 || yy2arr4100 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4100[4] {
					yy4114 := &x.Status
					yy4114.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4100[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("status"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4115 := &x.Status
					yy4115.CodecEncodeSelf(e)
				}
			}
			if yyr4100 || yy2arr4100 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuota) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4116 := z.DecBinary()
	_ = yym4116
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4117 := r.ContainerType()
		if yyct4117 == codecSelferValueTypeMap1234 {
			yyl4117 := r.ReadMapStart()
			if yyl4117 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4117, d)
			}
		} else if yyct4117 == codecSelferValueTypeArray1234 {
			yyl4117 := r.ReadArrayStart()
			if yyl4117 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4117, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuota) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4118Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4118Slc
	var yyhl4118 bool = l >= 0
	for yyj4118 := 0; ; yyj4118++ {
		if yyhl4118 {
			if yyj4118 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4118Slc = r.DecodeBytes(yys4118Slc, true, true)
		yys4118 := string(yys4118Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4118 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4121 := &x.ObjectMeta
				yyv4121.CodecDecodeSelf(d)
			}
		case "spec":
			if r.TryDecodeAsNil() {
				x.Spec = ResourceQuotaSpec{}
			} else {
				yyv4122 := &x.Spec
				yyv4122.CodecDecodeSelf(d)
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ResourceQuotaStatus{}
			} else {
				yyv4123 := &x.Status
				yyv4123.CodecDecodeSelf(d)
			}
		default:
			z.DecStructFieldNotFound(-1, yys4118)
		} // end switch yys4118
	} // end for yyj4118
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuota) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4124 int
	var yyb4124 bool
	var yyhl4124 bool = l >= 0
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4127 := &x.ObjectMeta
		yyv4127.CodecDecodeSelf(d)
	}
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Spec = ResourceQuotaSpec{}
	} else {
		yyv4128 := &x.Spec
		yyv4128.CodecDecodeSelf(d)
	}
	yyj4124++
	if yyhl4124 {
		yyb4124 = yyj4124 > l
	} else {
		yyb4124 = r.CheckBreak()
	}
	if yyb4124 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ResourceQuotaStatus{}
	} else {
		yyv4129 := &x.Status
		yyv4129.CodecDecodeSelf(d)
	}
	for {
		yyj4124++
		if yyhl4124 {
			yyb4124 = yyj4124 > l
		} else {
			yyb4124 = r.CheckBreak()
		}
		if yyb4124 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4124-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ResourceQuotaList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4130 := z.EncBinary()
		_ = yym4130
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4131 := !z.EncBinary()
			yy2arr4131 := z.EncBasicHandle().StructToArray
			var yyq4131 [4]bool
			_, _, _ = yysep4131, yyq4131, yy2arr4131
			const yyr4131 bool = false
			yyq4131[0] = x.Kind != ""
			yyq4131[1] = x.APIVersion != ""
			yyq4131[2] = true
			var yynn4131 int
			if yyr4131 || yy2arr4131 {
				r.EncodeArrayStart(4)
			} else {
				yynn4131 = 1
				for _, b := range yyq4131 {
					if b {
						yynn4131++
					}
				}
				r.EncodeMapStart(yynn4131)
				yynn4131 = 0
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4131[0] {
					yym4133 := z.EncBinary()
					_ = yym4133
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4131[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4134 := z.EncBinary()
					_ = yym4134
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4131[1] {
					yym4136 := z.EncBinary()
					_ = yym4136
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4131[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4137 := z.EncBinary()
					_ = yym4137
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4131[2] {
					yy4139 := &x.ListMeta
					yym4140 := z.EncBinary()
					_ = yym4140
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4139) {
					} else {
						z.EncFallback(yy4139)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4131[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4141 := &x.ListMeta
					yym4142 := z.EncBinary()
					_ = yym4142
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4141) {
					} else {
						z.EncFallback(yy4141)
					}
				}
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4144 := z.EncBinary()
					_ = yym4144
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4145 := z.EncBinary()
					_ = yym4145
					if false {
					} else {
						h.encSliceResourceQuota(([]ResourceQuota)(x.Items), e)
					}
				}
			}
			if yyr4131 || yy2arr4131 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ResourceQuotaList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4146 := z.DecBinary()
	_ = yym4146
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4147 := r.ContainerType()
		if yyct4147 == codecSelferValueTypeMap1234 {
			yyl4147 := r.ReadMapStart()
			if yyl4147 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4147, d)
			}
		} else if yyct4147 == codecSelferValueTypeArray1234 {
			yyl4147 := r.ReadArrayStart()
			if yyl4147 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4147, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ResourceQuotaList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4148Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4148Slc
	var yyhl4148 bool = l >= 0
	for yyj4148 := 0; ; yyj4148++ {
		if yyhl4148 {
			if yyj4148 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4148Slc = r.DecodeBytes(yys4148Slc, true, true)
		yys4148 := string(yys4148Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4148 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4151 := &x.ListMeta
				yym4152 := z.DecBinary()
				_ = yym4152
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4151) {
				} else {
					z.DecFallback(yyv4151, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4153 := &x.Items
				yym4154 := z.DecBinary()
				_ = yym4154
				if false {
				} else {
					h.decSliceResourceQuota((*[]ResourceQuota)(yyv4153), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4148)
		} // end switch yys4148
	} // end for yyj4148
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ResourceQuotaList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4155 int
	var yyb4155 bool
	var yyhl4155 bool = l >= 0
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4158 := &x.ListMeta
		yym4159 := z.DecBinary()
		_ = yym4159
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4158) {
		} else {
			z.DecFallback(yyv4158, false)
		}
	}
	yyj4155++
	if yyhl4155 {
		yyb4155 = yyj4155 > l
	} else {
		yyb4155 = r.CheckBreak()
	}
	if yyb4155 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4160 := &x.Items
		yym4161 := z.DecBinary()
		_ = yym4161
		if false {
		} else {
			h.decSliceResourceQuota((*[]ResourceQuota)(yyv4160), d)
		}
	}
	for {
		yyj4155++
		if yyhl4155 {
			yyb4155 = yyj4155 > l
		} else {
			yyb4155 = r.CheckBreak()
		}
		if yyb4155 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4155-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *Secret) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4162 := z.EncBinary()
		_ = yym4162
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4163 := !z.EncBinary()
			yy2arr4163 := z.EncBasicHandle().StructToArray
			var yyq4163 [5]bool
			_, _, _ = yysep4163, yyq4163, yy2arr4163
			const yyr4163 bool = false
			yyq4163[0] = x.Kind != ""
			yyq4163[1] = x.APIVersion != ""
			yyq4163[2] = true
			yyq4163[3] = len(x.Data) != 0
			yyq4163[4] = x.Type != ""
			var yynn4163 int
			if yyr4163 || yy2arr4163 {
				r.EncodeArrayStart(5)
			} else {
				yynn4163 = 0
				for _, b := range yyq4163 {
					if b {
						yynn4163++
					}
				}
				r.EncodeMapStart(yynn4163)
				yynn4163 = 0
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[0] {
					yym4165 := z.EncBinary()
					_ = yym4165
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4163[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4166 := z.EncBinary()
					_ = yym4166
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[1] {
					yym4168 := z.EncBinary()
					_ = yym4168
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4163[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4169 := z.EncBinary()
					_ = yym4169
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[2] {
					yy4171 := &x.ObjectMeta
					yy4171.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4163[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4172 := &x.ObjectMeta
					yy4172.CodecEncodeSelf(e)
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4174 := z.EncBinary()
						_ = yym4174
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4163[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4175 := z.EncBinary()
						_ = yym4175
						if false {
						} else {
							h.encMapstringSliceuint8((map[string][]uint8)(x.Data), e)
						}
					}
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4163[4] {
					x.Type.CodecEncodeSelf(e)
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4163[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					x.Type.CodecEncodeSelf(e)
				}
			}
			if yyr4163 || yy2arr4163 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *Secret) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4177 := z.DecBinary()
	_ = yym4177
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4178 := r.ContainerType()
		if yyct4178 == codecSelferValueTypeMap1234 {
			yyl4178 := r.ReadMapStart()
			if yyl4178 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4178, d)
			}
		} else if yyct4178 == codecSelferValueTypeArray1234 {
			yyl4178 := r.ReadArrayStart()
			if yyl4178 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4178, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *Secret) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4179Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4179Slc
	var yyhl4179 bool = l >= 0
	for yyj4179 := 0; ; yyj4179++ {
		if yyhl4179 {
			if yyj4179 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4179Slc = r.DecodeBytes(yys4179Slc, true, true)
		yys4179 := string(yys4179Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4179 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4182 := &x.ObjectMeta
				yyv4182.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4183 := &x.Data
				yym4184 := z.DecBinary()
				_ = yym4184
				if false {
				} else {
					h.decMapstringSliceuint8((*map[string][]uint8)(yyv4183), d)
				}
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = SecretType(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4179)
		} // end switch yys4179
	} // end for yyj4179
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *Secret) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4186 int
	var yyb4186 bool
	var yyhl4186 bool = l >= 0
	yyj4186++
	if yyhl4186 {
		yyb4186 = yyj4186 > l
	} else {
		yyb4186 = r.CheckBreak()
	}
	if yyb4186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4186++
	if yyhl4186 {
		yyb4186 = yyj4186 > l
	} else {
		yyb4186 = r.CheckBreak()
	}
	if yyb4186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4186++
	if yyhl4186 {
		yyb4186 = yyj4186 > l
	} else {
		yyb4186 = r.CheckBreak()
	}
	if yyb4186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4189 := &x.ObjectMeta
		yyv4189.CodecDecodeSelf(d)
	}
	yyj4186++
	if yyhl4186 {
		yyb4186 = yyj4186 > l
	} else {
		yyb4186 = r.CheckBreak()
	}
	if yyb4186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4190 := &x.Data
		yym4191 := z.DecBinary()
		_ = yym4191
		if false {
		} else {
			h.decMapstringSliceuint8((*map[string][]uint8)(yyv4190), d)
		}
	}
	yyj4186++
	if yyhl4186 {
		yyb4186 = yyj4186 > l
	} else {
		yyb4186 = r.CheckBreak()
	}
	if yyb4186 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = SecretType(r.DecodeString())
	}
	for {
		yyj4186++
		if yyhl4186 {
			yyb4186 = yyj4186 > l
		} else {
			yyb4186 = r.CheckBreak()
		}
		if yyb4186 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4186-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x SecretType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4193 := z.EncBinary()
	_ = yym4193
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *SecretType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4194 := z.DecBinary()
	_ = yym4194
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *SecretList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4195 := z.EncBinary()
		_ = yym4195
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4196 := !z.EncBinary()
			yy2arr4196 := z.EncBasicHandle().StructToArray
			var yyq4196 [4]bool
			_, _, _ = yysep4196, yyq4196, yy2arr4196
			const yyr4196 bool = false
			yyq4196[0] = x.Kind != ""
			yyq4196[1] = x.APIVersion != ""
			yyq4196[2] = true
			var yynn4196 int
			if yyr4196 || yy2arr4196 {
				r.EncodeArrayStart(4)
			} else {
				yynn4196 = 1
				for _, b := range yyq4196 {
					if b {
						yynn4196++
					}
				}
				r.EncodeMapStart(yynn4196)
				yynn4196 = 0
			}
			if yyr4196 || yy2arr4196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4196[0] {
					yym4198 := z.EncBinary()
					_ = yym4198
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4196[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4199 := z.EncBinary()
					_ = yym4199
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4196 || yy2arr4196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4196[1] {
					yym4201 := z.EncBinary()
					_ = yym4201
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4196[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4202 := z.EncBinary()
					_ = yym4202
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4196 || yy2arr4196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4196[2] {
					yy4204 := &x.ListMeta
					yym4205 := z.EncBinary()
					_ = yym4205
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4204) {
					} else {
						z.EncFallback(yy4204)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4196[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4206 := &x.ListMeta
					yym4207 := z.EncBinary()
					_ = yym4207
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4206) {
					} else {
						z.EncFallback(yy4206)
					}
				}
			}
			if yyr4196 || yy2arr4196 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4209 := z.EncBinary()
					_ = yym4209
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4210 := z.EncBinary()
					_ = yym4210
					if false {
					} else {
						h.encSliceSecret(([]Secret)(x.Items), e)
					}
				}
			}
			if yyr4196 || yy2arr4196 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecretList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4211 := z.DecBinary()
	_ = yym4211
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4212 := r.ContainerType()
		if yyct4212 == codecSelferValueTypeMap1234 {
			yyl4212 := r.ReadMapStart()
			if yyl4212 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4212, d)
			}
		} else if yyct4212 == codecSelferValueTypeArray1234 {
			yyl4212 := r.ReadArrayStart()
			if yyl4212 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4212, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecretList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4213Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4213Slc
	var yyhl4213 bool = l >= 0
	for yyj4213 := 0; ; yyj4213++ {
		if yyhl4213 {
			if yyj4213 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4213Slc = r.DecodeBytes(yys4213Slc, true, true)
		yys4213 := string(yys4213Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4213 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4216 := &x.ListMeta
				yym4217 := z.DecBinary()
				_ = yym4217
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4216) {
				} else {
					z.DecFallback(yyv4216, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4218 := &x.Items
				yym4219 := z.DecBinary()
				_ = yym4219
				if false {
				} else {
					h.decSliceSecret((*[]Secret)(yyv4218), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4213)
		} // end switch yys4213
	} // end for yyj4213
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecretList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4220 int
	var yyb4220 bool
	var yyhl4220 bool = l >= 0
	yyj4220++
	if yyhl4220 {
		yyb4220 = yyj4220 > l
	} else {
		yyb4220 = r.CheckBreak()
	}
	if yyb4220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4220++
	if yyhl4220 {
		yyb4220 = yyj4220 > l
	} else {
		yyb4220 = r.CheckBreak()
	}
	if yyb4220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4220++
	if yyhl4220 {
		yyb4220 = yyj4220 > l
	} else {
		yyb4220 = r.CheckBreak()
	}
	if yyb4220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4223 := &x.ListMeta
		yym4224 := z.DecBinary()
		_ = yym4224
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4223) {
		} else {
			z.DecFallback(yyv4223, false)
		}
	}
	yyj4220++
	if yyhl4220 {
		yyb4220 = yyj4220 > l
	} else {
		yyb4220 = r.CheckBreak()
	}
	if yyb4220 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4225 := &x.Items
		yym4226 := z.DecBinary()
		_ = yym4226
		if false {
		} else {
			h.decSliceSecret((*[]Secret)(yyv4225), d)
		}
	}
	for {
		yyj4220++
		if yyhl4220 {
			yyb4220 = yyj4220 > l
		} else {
			yyb4220 = r.CheckBreak()
		}
		if yyb4220 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4220-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMap) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4227 := z.EncBinary()
		_ = yym4227
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4228 := !z.EncBinary()
			yy2arr4228 := z.EncBasicHandle().StructToArray
			var yyq4228 [4]bool
			_, _, _ = yysep4228, yyq4228, yy2arr4228
			const yyr4228 bool = false
			yyq4228[0] = x.Kind != ""
			yyq4228[1] = x.APIVersion != ""
			yyq4228[2] = true
			yyq4228[3] = len(x.Data) != 0
			var yynn4228 int
			if yyr4228 || yy2arr4228 {
				r.EncodeArrayStart(4)
			} else {
				yynn4228 = 0
				for _, b := range yyq4228 {
					if b {
						yynn4228++
					}
				}
				r.EncodeMapStart(yynn4228)
				yynn4228 = 0
			}
			if yyr4228 || yy2arr4228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4228[0] {
					yym4230 := z.EncBinary()
					_ = yym4230
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4228[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4231 := z.EncBinary()
					_ = yym4231
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4228 || yy2arr4228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4228[1] {
					yym4233 := z.EncBinary()
					_ = yym4233
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4228[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4234 := z.EncBinary()
					_ = yym4234
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4228 || yy2arr4228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4228[2] {
					yy4236 := &x.ObjectMeta
					yy4236.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4228[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4237 := &x.ObjectMeta
					yy4237.CodecEncodeSelf(e)
				}
			}
			if yyr4228 || yy2arr4228 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4228[3] {
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4239 := z.EncBinary()
						_ = yym4239
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4228[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("data"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Data == nil {
						r.EncodeNil()
					} else {
						yym4240 := z.EncBinary()
						_ = yym4240
						if false {
						} else {
							z.F.EncMapStringStringV(x.Data, false, e)
						}
					}
				}
			}
			if yyr4228 || yy2arr4228 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMap) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4241 := z.DecBinary()
	_ = yym4241
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4242 := r.ContainerType()
		if yyct4242 == codecSelferValueTypeMap1234 {
			yyl4242 := r.ReadMapStart()
			if yyl4242 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4242, d)
			}
		} else if yyct4242 == codecSelferValueTypeArray1234 {
			yyl4242 := r.ReadArrayStart()
			if yyl4242 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4242, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMap) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4243Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4243Slc
	var yyhl4243 bool = l >= 0
	for yyj4243 := 0; ; yyj4243++ {
		if yyhl4243 {
			if yyj4243 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4243Slc = r.DecodeBytes(yys4243Slc, true, true)
		yys4243 := string(yys4243Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4243 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4246 := &x.ObjectMeta
				yyv4246.CodecDecodeSelf(d)
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4247 := &x.Data
				yym4248 := z.DecBinary()
				_ = yym4248
				if false {
				} else {
					z.F.DecMapStringStringX(yyv4247, false, d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4243)
		} // end switch yys4243
	} // end for yyj4243
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMap) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4249 int
	var yyb4249 bool
	var yyhl4249 bool = l >= 0
	yyj4249++
	if yyhl4249 {
		yyb4249 = yyj4249 > l
	} else {
		yyb4249 = r.CheckBreak()
	}
	if yyb4249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4249++
	if yyhl4249 {
		yyb4249 = yyj4249 > l
	} else {
		yyb4249 = r.CheckBreak()
	}
	if yyb4249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4249++
	if yyhl4249 {
		yyb4249 = yyj4249 > l
	} else {
		yyb4249 = r.CheckBreak()
	}
	if yyb4249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4252 := &x.ObjectMeta
		yyv4252.CodecDecodeSelf(d)
	}
	yyj4249++
	if yyhl4249 {
		yyb4249 = yyj4249 > l
	} else {
		yyb4249 = r.CheckBreak()
	}
	if yyb4249 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4253 := &x.Data
		yym4254 := z.DecBinary()
		_ = yym4254
		if false {
		} else {
			z.F.DecMapStringStringX(yyv4253, false, d)
		}
	}
	for {
		yyj4249++
		if yyhl4249 {
			yyb4249 = yyj4249 > l
		} else {
			yyb4249 = r.CheckBreak()
		}
		if yyb4249 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4249-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ConfigMapList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4255 := z.EncBinary()
		_ = yym4255
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4256 := !z.EncBinary()
			yy2arr4256 := z.EncBasicHandle().StructToArray
			var yyq4256 [4]bool
			_, _, _ = yysep4256, yyq4256, yy2arr4256
			const yyr4256 bool = false
			yyq4256[0] = x.Kind != ""
			yyq4256[1] = x.APIVersion != ""
			yyq4256[2] = true
			var yynn4256 int
			if yyr4256 || yy2arr4256 {
				r.EncodeArrayStart(4)
			} else {
				yynn4256 = 1
				for _, b := range yyq4256 {
					if b {
						yynn4256++
					}
				}
				r.EncodeMapStart(yynn4256)
				yynn4256 = 0
			}
			if yyr4256 || yy2arr4256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4256[0] {
					yym4258 := z.EncBinary()
					_ = yym4258
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4256[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4259 := z.EncBinary()
					_ = yym4259
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4256 || yy2arr4256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4256[1] {
					yym4261 := z.EncBinary()
					_ = yym4261
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4256[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4262 := z.EncBinary()
					_ = yym4262
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4256 || yy2arr4256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4256[2] {
					yy4264 := &x.ListMeta
					yym4265 := z.EncBinary()
					_ = yym4265
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4264) {
					} else {
						z.EncFallback(yy4264)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4256[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4266 := &x.ListMeta
					yym4267 := z.EncBinary()
					_ = yym4267
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4266) {
					} else {
						z.EncFallback(yy4266)
					}
				}
			}
			if yyr4256 || yy2arr4256 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4269 := z.EncBinary()
					_ = yym4269
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4270 := z.EncBinary()
					_ = yym4270
					if false {
					} else {
						h.encSliceConfigMap(([]ConfigMap)(x.Items), e)
					}
				}
			}
			if yyr4256 || yy2arr4256 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ConfigMapList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4271 := z.DecBinary()
	_ = yym4271
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4272 := r.ContainerType()
		if yyct4272 == codecSelferValueTypeMap1234 {
			yyl4272 := r.ReadMapStart()
			if yyl4272 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4272, d)
			}
		} else if yyct4272 == codecSelferValueTypeArray1234 {
			yyl4272 := r.ReadArrayStart()
			if yyl4272 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4272, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ConfigMapList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4273Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4273Slc
	var yyhl4273 bool = l >= 0
	for yyj4273 := 0; ; yyj4273++ {
		if yyhl4273 {
			if yyj4273 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4273Slc = r.DecodeBytes(yys4273Slc, true, true)
		yys4273 := string(yys4273Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4273 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4276 := &x.ListMeta
				yym4277 := z.DecBinary()
				_ = yym4277
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4276) {
				} else {
					z.DecFallback(yyv4276, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4278 := &x.Items
				yym4279 := z.DecBinary()
				_ = yym4279
				if false {
				} else {
					h.decSliceConfigMap((*[]ConfigMap)(yyv4278), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4273)
		} // end switch yys4273
	} // end for yyj4273
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ConfigMapList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4280 int
	var yyb4280 bool
	var yyhl4280 bool = l >= 0
	yyj4280++
	if yyhl4280 {
		yyb4280 = yyj4280 > l
	} else {
		yyb4280 = r.CheckBreak()
	}
	if yyb4280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4280++
	if yyhl4280 {
		yyb4280 = yyj4280 > l
	} else {
		yyb4280 = r.CheckBreak()
	}
	if yyb4280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4280++
	if yyhl4280 {
		yyb4280 = yyj4280 > l
	} else {
		yyb4280 = r.CheckBreak()
	}
	if yyb4280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4283 := &x.ListMeta
		yym4284 := z.DecBinary()
		_ = yym4284
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4283) {
		} else {
			z.DecFallback(yyv4283, false)
		}
	}
	yyj4280++
	if yyhl4280 {
		yyb4280 = yyj4280 > l
	} else {
		yyb4280 = r.CheckBreak()
	}
	if yyb4280 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4285 := &x.Items
		yym4286 := z.DecBinary()
		_ = yym4286
		if false {
		} else {
			h.decSliceConfigMap((*[]ConfigMap)(yyv4285), d)
		}
	}
	for {
		yyj4280++
		if yyhl4280 {
			yyb4280 = yyj4280 > l
		} else {
			yyb4280 = r.CheckBreak()
		}
		if yyb4280 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4280-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x PatchType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4287 := z.EncBinary()
	_ = yym4287
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *PatchType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4288 := z.DecBinary()
	_ = yym4288
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x ComponentConditionType) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	yym4289 := z.EncBinary()
	_ = yym4289
	if false {
	} else if z.HasExtensions() && z.EncExt(x) {
	} else {
		r.EncodeString(codecSelferC_UTF81234, string(x))
	}
}

func (x *ComponentConditionType) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4290 := z.DecBinary()
	_ = yym4290
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		*((*string)(x)) = r.DecodeString()
	}
}

func (x *ComponentCondition) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4291 := z.EncBinary()
		_ = yym4291
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4292 := !z.EncBinary()
			yy2arr4292 := z.EncBasicHandle().StructToArray
			var yyq4292 [4]bool
			_, _, _ = yysep4292, yyq4292, yy2arr4292
			const yyr4292 bool = false
			yyq4292[2] = x.Message != ""
			yyq4292[3] = x.Error != ""
			var yynn4292 int
			if yyr4292 || yy2arr4292 {
				r.EncodeArrayStart(4)
			} else {
				yynn4292 = 2
				for _, b := range yyq4292 {
					if b {
						yynn4292++
					}
				}
				r.EncodeMapStart(yynn4292)
				yynn4292 = 0
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Type.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("type"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Type.CodecEncodeSelf(e)
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				x.Status.CodecEncodeSelf(e)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("status"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				x.Status.CodecEncodeSelf(e)
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4292[2] {
					yym4296 := z.EncBinary()
					_ = yym4296
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4292[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("message"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4297 := z.EncBinary()
					_ = yym4297
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Message))
					}
				}
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4292[3] {
					yym4299 := z.EncBinary()
					_ = yym4299
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4292[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("error"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4300 := z.EncBinary()
					_ = yym4300
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Error))
					}
				}
			}
			if yyr4292 || yy2arr4292 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentCondition) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4301 := z.DecBinary()
	_ = yym4301
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4302 := r.ContainerType()
		if yyct4302 == codecSelferValueTypeMap1234 {
			yyl4302 := r.ReadMapStart()
			if yyl4302 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4302, d)
			}
		} else if yyct4302 == codecSelferValueTypeArray1234 {
			yyl4302 := r.ReadArrayStart()
			if yyl4302 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4302, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentCondition) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4303Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4303Slc
	var yyhl4303 bool = l >= 0
	for yyj4303 := 0; ; yyj4303++ {
		if yyhl4303 {
			if yyj4303 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4303Slc = r.DecodeBytes(yys4303Slc, true, true)
		yys4303 := string(yys4303Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4303 {
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = ComponentConditionType(r.DecodeString())
			}
		case "status":
			if r.TryDecodeAsNil() {
				x.Status = ""
			} else {
				x.Status = ConditionStatus(r.DecodeString())
			}
		case "message":
			if r.TryDecodeAsNil() {
				x.Message = ""
			} else {
				x.Message = string(r.DecodeString())
			}
		case "error":
			if r.TryDecodeAsNil() {
				x.Error = ""
			} else {
				x.Error = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4303)
		} // end switch yys4303
	} // end for yyj4303
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentCondition) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4308 int
	var yyb4308 bool
	var yyhl4308 bool = l >= 0
	yyj4308++
	if yyhl4308 {
		yyb4308 = yyj4308 > l
	} else {
		yyb4308 = r.CheckBreak()
	}
	if yyb4308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = ComponentConditionType(r.DecodeString())
	}
	yyj4308++
	if yyhl4308 {
		yyb4308 = yyj4308 > l
	} else {
		yyb4308 = r.CheckBreak()
	}
	if yyb4308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Status = ""
	} else {
		x.Status = ConditionStatus(r.DecodeString())
	}
	yyj4308++
	if yyhl4308 {
		yyb4308 = yyj4308 > l
	} else {
		yyb4308 = r.CheckBreak()
	}
	if yyb4308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Message = ""
	} else {
		x.Message = string(r.DecodeString())
	}
	yyj4308++
	if yyhl4308 {
		yyb4308 = yyj4308 > l
	} else {
		yyb4308 = r.CheckBreak()
	}
	if yyb4308 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Error = ""
	} else {
		x.Error = string(r.DecodeString())
	}
	for {
		yyj4308++
		if yyhl4308 {
			yyb4308 = yyj4308 > l
		} else {
			yyb4308 = r.CheckBreak()
		}
		if yyb4308 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4308-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatus) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4313 := z.EncBinary()
		_ = yym4313
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4314 := !z.EncBinary()
			yy2arr4314 := z.EncBasicHandle().StructToArray
			var yyq4314 [4]bool
			_, _, _ = yysep4314, yyq4314, yy2arr4314
			const yyr4314 bool = false
			yyq4314[0] = x.Kind != ""
			yyq4314[1] = x.APIVersion != ""
			yyq4314[2] = true
			yyq4314[3] = len(x.Conditions) != 0
			var yynn4314 int
			if yyr4314 || yy2arr4314 {
				r.EncodeArrayStart(4)
			} else {
				yynn4314 = 0
				for _, b := range yyq4314 {
					if b {
						yynn4314++
					}
				}
				r.EncodeMapStart(yynn4314)
				yynn4314 = 0
			}
			if yyr4314 || yy2arr4314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4314[0] {
					yym4316 := z.EncBinary()
					_ = yym4316
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4314[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4317 := z.EncBinary()
					_ = yym4317
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4314 || yy2arr4314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4314[1] {
					yym4319 := z.EncBinary()
					_ = yym4319
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4314[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4320 := z.EncBinary()
					_ = yym4320
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4314 || yy2arr4314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4314[2] {
					yy4322 := &x.ObjectMeta
					yy4322.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4314[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4323 := &x.ObjectMeta
					yy4323.CodecEncodeSelf(e)
				}
			}
			if yyr4314 || yy2arr4314 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4314[3] {
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4325 := z.EncBinary()
						_ = yym4325
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4314[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("conditions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Conditions == nil {
						r.EncodeNil()
					} else {
						yym4326 := z.EncBinary()
						_ = yym4326
						if false {
						} else {
							h.encSliceComponentCondition(([]ComponentCondition)(x.Conditions), e)
						}
					}
				}
			}
			if yyr4314 || yy2arr4314 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatus) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4327 := z.DecBinary()
	_ = yym4327
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4328 := r.ContainerType()
		if yyct4328 == codecSelferValueTypeMap1234 {
			yyl4328 := r.ReadMapStart()
			if yyl4328 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4328, d)
			}
		} else if yyct4328 == codecSelferValueTypeArray1234 {
			yyl4328 := r.ReadArrayStart()
			if yyl4328 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4328, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatus) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4329Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4329Slc
	var yyhl4329 bool = l >= 0
	for yyj4329 := 0; ; yyj4329++ {
		if yyhl4329 {
			if yyj4329 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4329Slc = r.DecodeBytes(yys4329Slc, true, true)
		yys4329 := string(yys4329Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4329 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4332 := &x.ObjectMeta
				yyv4332.CodecDecodeSelf(d)
			}
		case "conditions":
			if r.TryDecodeAsNil() {
				x.Conditions = nil
			} else {
				yyv4333 := &x.Conditions
				yym4334 := z.DecBinary()
				_ = yym4334
				if false {
				} else {
					h.decSliceComponentCondition((*[]ComponentCondition)(yyv4333), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4329)
		} // end switch yys4329
	} // end for yyj4329
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatus) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4335 int
	var yyb4335 bool
	var yyhl4335 bool = l >= 0
	yyj4335++
	if yyhl4335 {
		yyb4335 = yyj4335 > l
	} else {
		yyb4335 = r.CheckBreak()
	}
	if yyb4335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4335++
	if yyhl4335 {
		yyb4335 = yyj4335 > l
	} else {
		yyb4335 = r.CheckBreak()
	}
	if yyb4335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4335++
	if yyhl4335 {
		yyb4335 = yyj4335 > l
	} else {
		yyb4335 = r.CheckBreak()
	}
	if yyb4335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4338 := &x.ObjectMeta
		yyv4338.CodecDecodeSelf(d)
	}
	yyj4335++
	if yyhl4335 {
		yyb4335 = yyj4335 > l
	} else {
		yyb4335 = r.CheckBreak()
	}
	if yyb4335 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Conditions = nil
	} else {
		yyv4339 := &x.Conditions
		yym4340 := z.DecBinary()
		_ = yym4340
		if false {
		} else {
			h.decSliceComponentCondition((*[]ComponentCondition)(yyv4339), d)
		}
	}
	for {
		yyj4335++
		if yyhl4335 {
			yyb4335 = yyj4335 > l
		} else {
			yyb4335 = r.CheckBreak()
		}
		if yyb4335 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4335-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *ComponentStatusList) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4341 := z.EncBinary()
		_ = yym4341
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4342 := !z.EncBinary()
			yy2arr4342 := z.EncBasicHandle().StructToArray
			var yyq4342 [4]bool
			_, _, _ = yysep4342, yyq4342, yy2arr4342
			const yyr4342 bool = false
			yyq4342[0] = x.Kind != ""
			yyq4342[1] = x.APIVersion != ""
			yyq4342[2] = true
			var yynn4342 int
			if yyr4342 || yy2arr4342 {
				r.EncodeArrayStart(4)
			} else {
				yynn4342 = 1
				for _, b := range yyq4342 {
					if b {
						yynn4342++
					}
				}
				r.EncodeMapStart(yynn4342)
				yynn4342 = 0
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4342[0] {
					yym4344 := z.EncBinary()
					_ = yym4344
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4342[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4345 := z.EncBinary()
					_ = yym4345
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4342[1] {
					yym4347 := z.EncBinary()
					_ = yym4347
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4342[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4348 := z.EncBinary()
					_ = yym4348
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4342[2] {
					yy4350 := &x.ListMeta
					yym4351 := z.EncBinary()
					_ = yym4351
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4350) {
					} else {
						z.EncFallback(yy4350)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4342[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4352 := &x.ListMeta
					yym4353 := z.EncBinary()
					_ = yym4353
					if false {
					} else if z.HasExtensions() && z.EncExt(yy4352) {
					} else {
						z.EncFallback(yy4352)
					}
				}
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4355 := z.EncBinary()
					_ = yym4355
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("items"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Items == nil {
					r.EncodeNil()
				} else {
					yym4356 := z.EncBinary()
					_ = yym4356
					if false {
					} else {
						h.encSliceComponentStatus(([]ComponentStatus)(x.Items), e)
					}
				}
			}
			if yyr4342 || yy2arr4342 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *ComponentStatusList) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4357 := z.DecBinary()
	_ = yym4357
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4358 := r.ContainerType()
		if yyct4358 == codecSelferValueTypeMap1234 {
			yyl4358 := r.ReadMapStart()
			if yyl4358 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4358, d)
			}
		} else if yyct4358 == codecSelferValueTypeArray1234 {
			yyl4358 := r.ReadArrayStart()
			if yyl4358 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4358, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *ComponentStatusList) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4359Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4359Slc
	var yyhl4359 bool = l >= 0
	for yyj4359 := 0; ; yyj4359++ {
		if yyhl4359 {
			if yyj4359 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4359Slc = r.DecodeBytes(yys4359Slc, true, true)
		yys4359 := string(yys4359Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4359 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ListMeta = pkg2_unversioned.ListMeta{}
			} else {
				yyv4362 := &x.ListMeta
				yym4363 := z.DecBinary()
				_ = yym4363
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4362) {
				} else {
					z.DecFallback(yyv4362, false)
				}
			}
		case "items":
			if r.TryDecodeAsNil() {
				x.Items = nil
			} else {
				yyv4364 := &x.Items
				yym4365 := z.DecBinary()
				_ = yym4365
				if false {
				} else {
					h.decSliceComponentStatus((*[]ComponentStatus)(yyv4364), d)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4359)
		} // end switch yys4359
	} // end for yyj4359
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *ComponentStatusList) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4366 int
	var yyb4366 bool
	var yyhl4366 bool = l >= 0
	yyj4366++
	if yyhl4366 {
		yyb4366 = yyj4366 > l
	} else {
		yyb4366 = r.CheckBreak()
	}
	if yyb4366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4366++
	if yyhl4366 {
		yyb4366 = yyj4366 > l
	} else {
		yyb4366 = r.CheckBreak()
	}
	if yyb4366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4366++
	if yyhl4366 {
		yyb4366 = yyj4366 > l
	} else {
		yyb4366 = r.CheckBreak()
	}
	if yyb4366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ListMeta = pkg2_unversioned.ListMeta{}
	} else {
		yyv4369 := &x.ListMeta
		yym4370 := z.DecBinary()
		_ = yym4370
		if false {
		} else if z.HasExtensions() && z.DecExt(yyv4369) {
		} else {
			z.DecFallback(yyv4369, false)
		}
	}
	yyj4366++
	if yyhl4366 {
		yyb4366 = yyj4366 > l
	} else {
		yyb4366 = r.CheckBreak()
	}
	if yyb4366 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Items = nil
	} else {
		yyv4371 := &x.Items
		yym4372 := z.DecBinary()
		_ = yym4372
		if false {
		} else {
			h.decSliceComponentStatus((*[]ComponentStatus)(yyv4371), d)
		}
	}
	for {
		yyj4366++
		if yyhl4366 {
			yyb4366 = yyj4366 > l
		} else {
			yyb4366 = r.CheckBreak()
		}
		if yyb4366 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4366-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SecurityContext) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4373 := z.EncBinary()
		_ = yym4373
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4374 := !z.EncBinary()
			yy2arr4374 := z.EncBasicHandle().StructToArray
			var yyq4374 [6]bool
			_, _, _ = yysep4374, yyq4374, yy2arr4374
			const yyr4374 bool = false
			yyq4374[0] = x.Capabilities != nil
			yyq4374[1] = x.Privileged != nil
			yyq4374[2] = x.SELinuxOptions != nil
			yyq4374[3] = x.RunAsUser != nil
			yyq4374[4] = x.RunAsNonRoot != nil
			yyq4374[5] = x.ReadOnlyRootFilesystem != nil
			var yynn4374 int
			if yyr4374 || yy2arr4374 {
				r.EncodeArrayStart(6)
			} else {
				yynn4374 = 0
				for _, b := range yyq4374 {
					if b {
						yynn4374++
					}
				}
				r.EncodeMapStart(yynn4374)
				yynn4374 = 0
			}
			if yyr4374 || yy2arr4374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4374[0] {
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4374[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("capabilities"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Capabilities == nil {
						r.EncodeNil()
					} else {
						x.Capabilities.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4374 || yy2arr4374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4374[1] {
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4377 := *x.Privileged
						yym4378 := z.EncBinary()
						_ = yym4378
						if false {
						} else {
							r.EncodeBool(bool(yy4377))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4374[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("privileged"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.Privileged == nil {
						r.EncodeNil()
					} else {
						yy4379 := *x.Privileged
						yym4380 := z.EncBinary()
						_ = yym4380
						if false {
						} else {
							r.EncodeBool(bool(yy4379))
						}
					}
				}
			}
			if yyr4374 || yy2arr4374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4374[2] {
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4374[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("seLinuxOptions"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.SELinuxOptions == nil {
						r.EncodeNil()
					} else {
						x.SELinuxOptions.CodecEncodeSelf(e)
					}
				}
			}
			if yyr4374 || yy2arr4374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4374[3] {
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4383 := *x.RunAsUser
						yym4384 := z.EncBinary()
						_ = yym4384
						if false {
						} else {
							r.EncodeInt(int64(yy4383))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4374[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsUser"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsUser == nil {
						r.EncodeNil()
					} else {
						yy4385 := *x.RunAsUser
						yym4386 := z.EncBinary()
						_ = yym4386
						if false {
						} else {
							r.EncodeInt(int64(yy4385))
						}
					}
				}
			}
			if yyr4374 || yy2arr4374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4374[4] {
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4388 := *x.RunAsNonRoot
						yym4389 := z.EncBinary()
						_ = yym4389
						if false {
						} else {
							r.EncodeBool(bool(yy4388))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4374[4] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("runAsNonRoot"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.RunAsNonRoot == nil {
						r.EncodeNil()
					} else {
						yy4390 := *x.RunAsNonRoot
						yym4391 := z.EncBinary()
						_ = yym4391
						if false {
						} else {
							r.EncodeBool(bool(yy4390))
						}
					}
				}
			}
			if yyr4374 || yy2arr4374 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4374[5] {
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4393 := *x.ReadOnlyRootFilesystem
						yym4394 := z.EncBinary()
						_ = yym4394
						if false {
						} else {
							r.EncodeBool(bool(yy4393))
						}
					}
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4374[5] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("readOnlyRootFilesystem"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					if x.ReadOnlyRootFilesystem == nil {
						r.EncodeNil()
					} else {
						yy4395 := *x.ReadOnlyRootFilesystem
						yym4396 := z.EncBinary()
						_ = yym4396
						if false {
						} else {
							r.EncodeBool(bool(yy4395))
						}
					}
				}
			}
			if yyr4374 || yy2arr4374 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SecurityContext) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4397 := z.DecBinary()
	_ = yym4397
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4398 := r.ContainerType()
		if yyct4398 == codecSelferValueTypeMap1234 {
			yyl4398 := r.ReadMapStart()
			if yyl4398 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4398, d)
			}
		} else if yyct4398 == codecSelferValueTypeArray1234 {
			yyl4398 := r.ReadArrayStart()
			if yyl4398 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4398, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SecurityContext) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4399Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4399Slc
	var yyhl4399 bool = l >= 0
	for yyj4399 := 0; ; yyj4399++ {
		if yyhl4399 {
			if yyj4399 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4399Slc = r.DecodeBytes(yys4399Slc, true, true)
		yys4399 := string(yys4399Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4399 {
		case "capabilities":
			if r.TryDecodeAsNil() {
				if x.Capabilities != nil {
					x.Capabilities = nil
				}
			} else {
				if x.Capabilities == nil {
					x.Capabilities = new(Capabilities)
				}
				x.Capabilities.CodecDecodeSelf(d)
			}
		case "privileged":
			if r.TryDecodeAsNil() {
				if x.Privileged != nil {
					x.Privileged = nil
				}
			} else {
				if x.Privileged == nil {
					x.Privileged = new(bool)
				}
				yym4402 := z.DecBinary()
				_ = yym4402
				if false {
				} else {
					*((*bool)(x.Privileged)) = r.DecodeBool()
				}
			}
		case "seLinuxOptions":
			if r.TryDecodeAsNil() {
				if x.SELinuxOptions != nil {
					x.SELinuxOptions = nil
				}
			} else {
				if x.SELinuxOptions == nil {
					x.SELinuxOptions = new(SELinuxOptions)
				}
				x.SELinuxOptions.CodecDecodeSelf(d)
			}
		case "runAsUser":
			if r.TryDecodeAsNil() {
				if x.RunAsUser != nil {
					x.RunAsUser = nil
				}
			} else {
				if x.RunAsUser == nil {
					x.RunAsUser = new(int64)
				}
				yym4405 := z.DecBinary()
				_ = yym4405
				if false {
				} else {
					*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
				}
			}
		case "runAsNonRoot":
			if r.TryDecodeAsNil() {
				if x.RunAsNonRoot != nil {
					x.RunAsNonRoot = nil
				}
			} else {
				if x.RunAsNonRoot == nil {
					x.RunAsNonRoot = new(bool)
				}
				yym4407 := z.DecBinary()
				_ = yym4407
				if false {
				} else {
					*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
				}
			}
		case "readOnlyRootFilesystem":
			if r.TryDecodeAsNil() {
				if x.ReadOnlyRootFilesystem != nil {
					x.ReadOnlyRootFilesystem = nil
				}
			} else {
				if x.ReadOnlyRootFilesystem == nil {
					x.ReadOnlyRootFilesystem = new(bool)
				}
				yym4409 := z.DecBinary()
				_ = yym4409
				if false {
				} else {
					*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4399)
		} // end switch yys4399
	} // end for yyj4399
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SecurityContext) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4410 int
	var yyb4410 bool
	var yyhl4410 bool = l >= 0
	yyj4410++
	if yyhl4410 {
		yyb4410 = yyj4410 > l
	} else {
		yyb4410 = r.CheckBreak()
	}
	if yyb4410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Capabilities != nil {
			x.Capabilities = nil
		}
	} else {
		if x.Capabilities == nil {
			x.Capabilities = new(Capabilities)
		}
		x.Capabilities.CodecDecodeSelf(d)
	}
	yyj4410++
	if yyhl4410 {
		yyb4410 = yyj4410 > l
	} else {
		yyb4410 = r.CheckBreak()
	}
	if yyb4410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.Privileged != nil {
			x.Privileged = nil
		}
	} else {
		if x.Privileged == nil {
			x.Privileged = new(bool)
		}
		yym4413 := z.DecBinary()
		_ = yym4413
		if false {
		} else {
			*((*bool)(x.Privileged)) = r.DecodeBool()
		}
	}
	yyj4410++
	if yyhl4410 {
		yyb4410 = yyj4410 > l
	} else {
		yyb4410 = r.CheckBreak()
	}
	if yyb4410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.SELinuxOptions != nil {
			x.SELinuxOptions = nil
		}
	} else {
		if x.SELinuxOptions == nil {
			x.SELinuxOptions = new(SELinuxOptions)
		}
		x.SELinuxOptions.CodecDecodeSelf(d)
	}
	yyj4410++
	if yyhl4410 {
		yyb4410 = yyj4410 > l
	} else {
		yyb4410 = r.CheckBreak()
	}
	if yyb4410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsUser != nil {
			x.RunAsUser = nil
		}
	} else {
		if x.RunAsUser == nil {
			x.RunAsUser = new(int64)
		}
		yym4416 := z.DecBinary()
		_ = yym4416
		if false {
		} else {
			*((*int64)(x.RunAsUser)) = int64(r.DecodeInt(64))
		}
	}
	yyj4410++
	if yyhl4410 {
		yyb4410 = yyj4410 > l
	} else {
		yyb4410 = r.CheckBreak()
	}
	if yyb4410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.RunAsNonRoot != nil {
			x.RunAsNonRoot = nil
		}
	} else {
		if x.RunAsNonRoot == nil {
			x.RunAsNonRoot = new(bool)
		}
		yym4418 := z.DecBinary()
		_ = yym4418
		if false {
		} else {
			*((*bool)(x.RunAsNonRoot)) = r.DecodeBool()
		}
	}
	yyj4410++
	if yyhl4410 {
		yyb4410 = yyj4410 > l
	} else {
		yyb4410 = r.CheckBreak()
	}
	if yyb4410 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		if x.ReadOnlyRootFilesystem != nil {
			x.ReadOnlyRootFilesystem = nil
		}
	} else {
		if x.ReadOnlyRootFilesystem == nil {
			x.ReadOnlyRootFilesystem = new(bool)
		}
		yym4420 := z.DecBinary()
		_ = yym4420
		if false {
		} else {
			*((*bool)(x.ReadOnlyRootFilesystem)) = r.DecodeBool()
		}
	}
	for {
		yyj4410++
		if yyhl4410 {
			yyb4410 = yyj4410 > l
		} else {
			yyb4410 = r.CheckBreak()
		}
		if yyb4410 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4410-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *SELinuxOptions) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4421 := z.EncBinary()
		_ = yym4421
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4422 := !z.EncBinary()
			yy2arr4422 := z.EncBasicHandle().StructToArray
			var yyq4422 [4]bool
			_, _, _ = yysep4422, yyq4422, yy2arr4422
			const yyr4422 bool = false
			yyq4422[0] = x.User != ""
			yyq4422[1] = x.Role != ""
			yyq4422[2] = x.Type != ""
			yyq4422[3] = x.Level != ""
			var yynn4422 int
			if yyr4422 || yy2arr4422 {
				r.EncodeArrayStart(4)
			} else {
				yynn4422 = 0
				for _, b := range yyq4422 {
					if b {
						yynn4422++
					}
				}
				r.EncodeMapStart(yynn4422)
				yynn4422 = 0
			}
			if yyr4422 || yy2arr4422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4422[0] {
					yym4424 := z.EncBinary()
					_ = yym4424
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4422[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("user"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4425 := z.EncBinary()
					_ = yym4425
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.User))
					}
				}
			}
			if yyr4422 || yy2arr4422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4422[1] {
					yym4427 := z.EncBinary()
					_ = yym4427
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4422[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("role"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4428 := z.EncBinary()
					_ = yym4428
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Role))
					}
				}
			}
			if yyr4422 || yy2arr4422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4422[2] {
					yym4430 := z.EncBinary()
					_ = yym4430
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4422[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("type"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4431 := z.EncBinary()
					_ = yym4431
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Type))
					}
				}
			}
			if yyr4422 || yy2arr4422 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4422[3] {
					yym4433 := z.EncBinary()
					_ = yym4433
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4422[3] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("level"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4434 := z.EncBinary()
					_ = yym4434
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Level))
					}
				}
			}
			if yyr4422 || yy2arr4422 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *SELinuxOptions) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4435 := z.DecBinary()
	_ = yym4435
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4436 := r.ContainerType()
		if yyct4436 == codecSelferValueTypeMap1234 {
			yyl4436 := r.ReadMapStart()
			if yyl4436 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4436, d)
			}
		} else if yyct4436 == codecSelferValueTypeArray1234 {
			yyl4436 := r.ReadArrayStart()
			if yyl4436 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4436, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *SELinuxOptions) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4437Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4437Slc
	var yyhl4437 bool = l >= 0
	for yyj4437 := 0; ; yyj4437++ {
		if yyhl4437 {
			if yyj4437 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4437Slc = r.DecodeBytes(yys4437Slc, true, true)
		yys4437 := string(yys4437Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4437 {
		case "user":
			if r.TryDecodeAsNil() {
				x.User = ""
			} else {
				x.User = string(r.DecodeString())
			}
		case "role":
			if r.TryDecodeAsNil() {
				x.Role = ""
			} else {
				x.Role = string(r.DecodeString())
			}
		case "type":
			if r.TryDecodeAsNil() {
				x.Type = ""
			} else {
				x.Type = string(r.DecodeString())
			}
		case "level":
			if r.TryDecodeAsNil() {
				x.Level = ""
			} else {
				x.Level = string(r.DecodeString())
			}
		default:
			z.DecStructFieldNotFound(-1, yys4437)
		} // end switch yys4437
	} // end for yyj4437
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *SELinuxOptions) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4442 int
	var yyb4442 bool
	var yyhl4442 bool = l >= 0
	yyj4442++
	if yyhl4442 {
		yyb4442 = yyj4442 > l
	} else {
		yyb4442 = r.CheckBreak()
	}
	if yyb4442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.User = ""
	} else {
		x.User = string(r.DecodeString())
	}
	yyj4442++
	if yyhl4442 {
		yyb4442 = yyj4442 > l
	} else {
		yyb4442 = r.CheckBreak()
	}
	if yyb4442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Role = ""
	} else {
		x.Role = string(r.DecodeString())
	}
	yyj4442++
	if yyhl4442 {
		yyb4442 = yyj4442 > l
	} else {
		yyb4442 = r.CheckBreak()
	}
	if yyb4442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Type = ""
	} else {
		x.Type = string(r.DecodeString())
	}
	yyj4442++
	if yyhl4442 {
		yyb4442 = yyj4442 > l
	} else {
		yyb4442 = r.CheckBreak()
	}
	if yyb4442 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Level = ""
	} else {
		x.Level = string(r.DecodeString())
	}
	for {
		yyj4442++
		if yyhl4442 {
			yyb4442 = yyj4442 > l
		} else {
			yyb4442 = r.CheckBreak()
		}
		if yyb4442 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4442-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x *RangeAllocation) CodecEncodeSelf(e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	if x == nil {
		r.EncodeNil()
	} else {
		yym4447 := z.EncBinary()
		_ = yym4447
		if false {
		} else if z.HasExtensions() && z.EncExt(x) {
		} else {
			yysep4448 := !z.EncBinary()
			yy2arr4448 := z.EncBasicHandle().StructToArray
			var yyq4448 [5]bool
			_, _, _ = yysep4448, yyq4448, yy2arr4448
			const yyr4448 bool = false
			yyq4448[0] = x.Kind != ""
			yyq4448[1] = x.APIVersion != ""
			yyq4448[2] = true
			var yynn4448 int
			if yyr4448 || yy2arr4448 {
				r.EncodeArrayStart(5)
			} else {
				yynn4448 = 2
				for _, b := range yyq4448 {
					if b {
						yynn4448++
					}
				}
				r.EncodeMapStart(yynn4448)
				yynn4448 = 0
			}
			if yyr4448 || yy2arr4448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4448[0] {
					yym4450 := z.EncBinary()
					_ = yym4450
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4448[0] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("kind"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4451 := z.EncBinary()
					_ = yym4451
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.Kind))
					}
				}
			}
			if yyr4448 || yy2arr4448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4448[1] {
					yym4453 := z.EncBinary()
					_ = yym4453
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				} else {
					r.EncodeString(codecSelferC_UTF81234, "")
				}
			} else {
				if yyq4448[1] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("apiVersion"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yym4454 := z.EncBinary()
					_ = yym4454
					if false {
					} else {
						r.EncodeString(codecSelferC_UTF81234, string(x.APIVersion))
					}
				}
			}
			if yyr4448 || yy2arr4448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if yyq4448[2] {
					yy4456 := &x.ObjectMeta
					yy4456.CodecEncodeSelf(e)
				} else {
					r.EncodeNil()
				}
			} else {
				if yyq4448[2] {
					z.EncSendContainerState(codecSelfer_containerMapKey1234)
					r.EncodeString(codecSelferC_UTF81234, string("metadata"))
					z.EncSendContainerState(codecSelfer_containerMapValue1234)
					yy4457 := &x.ObjectMeta
					yy4457.CodecEncodeSelf(e)
				}
			}
			if yyr4448 || yy2arr4448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				yym4459 := z.EncBinary()
				_ = yym4459
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("range"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				yym4460 := z.EncBinary()
				_ = yym4460
				if false {
				} else {
					r.EncodeString(codecSelferC_UTF81234, string(x.Range))
				}
			}
			if yyr4448 || yy2arr4448 {
				z.EncSendContainerState(codecSelfer_containerArrayElem1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4462 := z.EncBinary()
					_ = yym4462
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			} else {
				z.EncSendContainerState(codecSelfer_containerMapKey1234)
				r.EncodeString(codecSelferC_UTF81234, string("data"))
				z.EncSendContainerState(codecSelfer_containerMapValue1234)
				if x.Data == nil {
					r.EncodeNil()
				} else {
					yym4463 := z.EncBinary()
					_ = yym4463
					if false {
					} else {
						r.EncodeStringBytes(codecSelferC_RAW1234, []byte(x.Data))
					}
				}
			}
			if yyr4448 || yy2arr4448 {
				z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				z.EncSendContainerState(codecSelfer_containerMapEnd1234)
			}
		}
	}
}

func (x *RangeAllocation) CodecDecodeSelf(d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	yym4464 := z.DecBinary()
	_ = yym4464
	if false {
	} else if z.HasExtensions() && z.DecExt(x) {
	} else {
		yyct4465 := r.ContainerType()
		if yyct4465 == codecSelferValueTypeMap1234 {
			yyl4465 := r.ReadMapStart()
			if yyl4465 == 0 {
				z.DecSendContainerState(codecSelfer_containerMapEnd1234)
			} else {
				x.codecDecodeSelfFromMap(yyl4465, d)
			}
		} else if yyct4465 == codecSelferValueTypeArray1234 {
			yyl4465 := r.ReadArrayStart()
			if yyl4465 == 0 {
				z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
			} else {
				x.codecDecodeSelfFromArray(yyl4465, d)
			}
		} else {
			panic(codecSelferOnlyMapOrArrayEncodeToStructErr1234)
		}
	}
}

func (x *RangeAllocation) codecDecodeSelfFromMap(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yys4466Slc = z.DecScratchBuffer() // default slice to decode into
	_ = yys4466Slc
	var yyhl4466 bool = l >= 0
	for yyj4466 := 0; ; yyj4466++ {
		if yyhl4466 {
			if yyj4466 >= l {
				break
			}
		} else {
			if r.CheckBreak() {
				break
			}
		}
		z.DecSendContainerState(codecSelfer_containerMapKey1234)
		yys4466Slc = r.DecodeBytes(yys4466Slc, true, true)
		yys4466 := string(yys4466Slc)
		z.DecSendContainerState(codecSelfer_containerMapValue1234)
		switch yys4466 {
		case "kind":
			if r.TryDecodeAsNil() {
				x.Kind = ""
			} else {
				x.Kind = string(r.DecodeString())
			}
		case "apiVersion":
			if r.TryDecodeAsNil() {
				x.APIVersion = ""
			} else {
				x.APIVersion = string(r.DecodeString())
			}
		case "metadata":
			if r.TryDecodeAsNil() {
				x.ObjectMeta = ObjectMeta{}
			} else {
				yyv4469 := &x.ObjectMeta
				yyv4469.CodecDecodeSelf(d)
			}
		case "range":
			if r.TryDecodeAsNil() {
				x.Range = ""
			} else {
				x.Range = string(r.DecodeString())
			}
		case "data":
			if r.TryDecodeAsNil() {
				x.Data = nil
			} else {
				yyv4471 := &x.Data
				yym4472 := z.DecBinary()
				_ = yym4472
				if false {
				} else {
					*yyv4471 = r.DecodeBytes(*(*[]byte)(yyv4471), false, false)
				}
			}
		default:
			z.DecStructFieldNotFound(-1, yys4466)
		} // end switch yys4466
	} // end for yyj4466
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x *RangeAllocation) codecDecodeSelfFromArray(l int, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r
	var yyj4473 int
	var yyb4473 bool
	var yyhl4473 bool = l >= 0
	yyj4473++
	if yyhl4473 {
		yyb4473 = yyj4473 > l
	} else {
		yyb4473 = r.CheckBreak()
	}
	if yyb4473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Kind = ""
	} else {
		x.Kind = string(r.DecodeString())
	}
	yyj4473++
	if yyhl4473 {
		yyb4473 = yyj4473 > l
	} else {
		yyb4473 = r.CheckBreak()
	}
	if yyb4473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.APIVersion = ""
	} else {
		x.APIVersion = string(r.DecodeString())
	}
	yyj4473++
	if yyhl4473 {
		yyb4473 = yyj4473 > l
	} else {
		yyb4473 = r.CheckBreak()
	}
	if yyb4473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.ObjectMeta = ObjectMeta{}
	} else {
		yyv4476 := &x.ObjectMeta
		yyv4476.CodecDecodeSelf(d)
	}
	yyj4473++
	if yyhl4473 {
		yyb4473 = yyj4473 > l
	} else {
		yyb4473 = r.CheckBreak()
	}
	if yyb4473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Range = ""
	} else {
		x.Range = string(r.DecodeString())
	}
	yyj4473++
	if yyhl4473 {
		yyb4473 = yyj4473 > l
	} else {
		yyb4473 = r.CheckBreak()
	}
	if yyb4473 {
		z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
		return
	}
	z.DecSendContainerState(codecSelfer_containerArrayElem1234)
	if r.TryDecodeAsNil() {
		x.Data = nil
	} else {
		yyv4478 := &x.Data
		yym4479 := z.DecBinary()
		_ = yym4479
		if false {
		} else {
			*yyv4478 = r.DecodeBytes(*(*[]byte)(yyv4478), false, false)
		}
	}
	for {
		yyj4473++
		if yyhl4473 {
			yyb4473 = yyj4473 > l
		} else {
			yyb4473 = r.CheckBreak()
		}
		if yyb4473 {
			break
		}
		z.DecSendContainerState(codecSelfer_containerArrayElem1234)
		z.DecStructFieldNotFound(yyj4473-1, "")
	}
	z.DecSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) encSliceOwnerReference(v []OwnerReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4480 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4481 := &yyv4480
		yy4481.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceOwnerReference(v *[]OwnerReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4482 := *v
	yyh4482, yyl4482 := z.DecSliceHelperStart()
	var yyc4482 bool
	if yyl4482 == 0 {
		if yyv4482 == nil {
			yyv4482 = []OwnerReference{}
			yyc4482 = true
		} else if len(yyv4482) != 0 {
			yyv4482 = yyv4482[:0]
			yyc4482 = true
		}
	} else if yyl4482 > 0 {
		var yyrr4482, yyrl4482 int
		var yyrt4482 bool
		if yyl4482 > cap(yyv4482) {

			yyrg4482 := len(yyv4482) > 0
			yyv24482 := yyv4482
			yyrl4482, yyrt4482 = z.DecInferLen(yyl4482, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4482 {
				if yyrl4482 <= cap(yyv4482) {
					yyv4482 = yyv4482[:yyrl4482]
				} else {
					yyv4482 = make([]OwnerReference, yyrl4482)
				}
			} else {
				yyv4482 = make([]OwnerReference, yyrl4482)
			}
			yyc4482 = true
			yyrr4482 = len(yyv4482)
			if yyrg4482 {
				copy(yyv4482, yyv24482)
			}
		} else if yyl4482 != len(yyv4482) {
			yyv4482 = yyv4482[:yyl4482]
			yyc4482 = true
		}
		yyj4482 := 0
		for ; yyj4482 < yyrr4482; yyj4482++ {
			yyh4482.ElemContainerState(yyj4482)
			if r.TryDecodeAsNil() {
				yyv4482[yyj4482] = OwnerReference{}
			} else {
				yyv4483 := &yyv4482[yyj4482]
				yyv4483.CodecDecodeSelf(d)
			}

		}
		if yyrt4482 {
			for ; yyj4482 < yyl4482; yyj4482++ {
				yyv4482 = append(yyv4482, OwnerReference{})
				yyh4482.ElemContainerState(yyj4482)
				if r.TryDecodeAsNil() {
					yyv4482[yyj4482] = OwnerReference{}
				} else {
					yyv4484 := &yyv4482[yyj4482]
					yyv4484.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4482 := 0
		for ; !r.CheckBreak(); yyj4482++ {

			if yyj4482 >= len(yyv4482) {
				yyv4482 = append(yyv4482, OwnerReference{}) // var yyz4482 OwnerReference
				yyc4482 = true
			}
			yyh4482.ElemContainerState(yyj4482)
			if yyj4482 < len(yyv4482) {
				if r.TryDecodeAsNil() {
					yyv4482[yyj4482] = OwnerReference{}
				} else {
					yyv4485 := &yyv4482[yyj4482]
					yyv4485.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4482 < len(yyv4482) {
			yyv4482 = yyv4482[:yyj4482]
			yyc4482 = true
		} else if yyj4482 == 0 && yyv4482 == nil {
			yyv4482 = []OwnerReference{}
			yyc4482 = true
		}
	}
	yyh4482.End()
	if yyc4482 {
		*v = yyv4482
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeAccessMode(v []PersistentVolumeAccessMode, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4486 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4486.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeAccessMode(v *[]PersistentVolumeAccessMode, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4487 := *v
	yyh4487, yyl4487 := z.DecSliceHelperStart()
	var yyc4487 bool
	if yyl4487 == 0 {
		if yyv4487 == nil {
			yyv4487 = []PersistentVolumeAccessMode{}
			yyc4487 = true
		} else if len(yyv4487) != 0 {
			yyv4487 = yyv4487[:0]
			yyc4487 = true
		}
	} else if yyl4487 > 0 {
		var yyrr4487, yyrl4487 int
		var yyrt4487 bool
		if yyl4487 > cap(yyv4487) {

			yyrl4487, yyrt4487 = z.DecInferLen(yyl4487, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4487 {
				if yyrl4487 <= cap(yyv4487) {
					yyv4487 = yyv4487[:yyrl4487]
				} else {
					yyv4487 = make([]PersistentVolumeAccessMode, yyrl4487)
				}
			} else {
				yyv4487 = make([]PersistentVolumeAccessMode, yyrl4487)
			}
			yyc4487 = true
			yyrr4487 = len(yyv4487)
		} else if yyl4487 != len(yyv4487) {
			yyv4487 = yyv4487[:yyl4487]
			yyc4487 = true
		}
		yyj4487 := 0
		for ; yyj4487 < yyrr4487; yyj4487++ {
			yyh4487.ElemContainerState(yyj4487)
			if r.TryDecodeAsNil() {
				yyv4487[yyj4487] = ""
			} else {
				yyv4487[yyj4487] = PersistentVolumeAccessMode(r.DecodeString())
			}

		}
		if yyrt4487 {
			for ; yyj4487 < yyl4487; yyj4487++ {
				yyv4487 = append(yyv4487, "")
				yyh4487.ElemContainerState(yyj4487)
				if r.TryDecodeAsNil() {
					yyv4487[yyj4487] = ""
				} else {
					yyv4487[yyj4487] = PersistentVolumeAccessMode(r.DecodeString())
				}

			}
		}

	} else {
		yyj4487 := 0
		for ; !r.CheckBreak(); yyj4487++ {

			if yyj4487 >= len(yyv4487) {
				yyv4487 = append(yyv4487, "") // var yyz4487 PersistentVolumeAccessMode
				yyc4487 = true
			}
			yyh4487.ElemContainerState(yyj4487)
			if yyj4487 < len(yyv4487) {
				if r.TryDecodeAsNil() {
					yyv4487[yyj4487] = ""
				} else {
					yyv4487[yyj4487] = PersistentVolumeAccessMode(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4487 < len(yyv4487) {
			yyv4487 = yyv4487[:yyj4487]
			yyc4487 = true
		} else if yyj4487 == 0 && yyv4487 == nil {
			yyv4487 = []PersistentVolumeAccessMode{}
			yyc4487 = true
		}
	}
	yyh4487.End()
	if yyc4487 {
		*v = yyv4487
	}
}

func (x codecSelfer1234) encSlicePersistentVolume(v []PersistentVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4491 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4492 := &yyv4491
		yy4492.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolume(v *[]PersistentVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4493 := *v
	yyh4493, yyl4493 := z.DecSliceHelperStart()
	var yyc4493 bool
	if yyl4493 == 0 {
		if yyv4493 == nil {
			yyv4493 = []PersistentVolume{}
			yyc4493 = true
		} else if len(yyv4493) != 0 {
			yyv4493 = yyv4493[:0]
			yyc4493 = true
		}
	} else if yyl4493 > 0 {
		var yyrr4493, yyrl4493 int
		var yyrt4493 bool
		if yyl4493 > cap(yyv4493) {

			yyrg4493 := len(yyv4493) > 0
			yyv24493 := yyv4493
			yyrl4493, yyrt4493 = z.DecInferLen(yyl4493, z.DecBasicHandle().MaxInitLen, 464)
			if yyrt4493 {
				if yyrl4493 <= cap(yyv4493) {
					yyv4493 = yyv4493[:yyrl4493]
				} else {
					yyv4493 = make([]PersistentVolume, yyrl4493)
				}
			} else {
				yyv4493 = make([]PersistentVolume, yyrl4493)
			}
			yyc4493 = true
			yyrr4493 = len(yyv4493)
			if yyrg4493 {
				copy(yyv4493, yyv24493)
			}
		} else if yyl4493 != len(yyv4493) {
			yyv4493 = yyv4493[:yyl4493]
			yyc4493 = true
		}
		yyj4493 := 0
		for ; yyj4493 < yyrr4493; yyj4493++ {
			yyh4493.ElemContainerState(yyj4493)
			if r.TryDecodeAsNil() {
				yyv4493[yyj4493] = PersistentVolume{}
			} else {
				yyv4494 := &yyv4493[yyj4493]
				yyv4494.CodecDecodeSelf(d)
			}

		}
		if yyrt4493 {
			for ; yyj4493 < yyl4493; yyj4493++ {
				yyv4493 = append(yyv4493, PersistentVolume{})
				yyh4493.ElemContainerState(yyj4493)
				if r.TryDecodeAsNil() {
					yyv4493[yyj4493] = PersistentVolume{}
				} else {
					yyv4495 := &yyv4493[yyj4493]
					yyv4495.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4493 := 0
		for ; !r.CheckBreak(); yyj4493++ {

			if yyj4493 >= len(yyv4493) {
				yyv4493 = append(yyv4493, PersistentVolume{}) // var yyz4493 PersistentVolume
				yyc4493 = true
			}
			yyh4493.ElemContainerState(yyj4493)
			if yyj4493 < len(yyv4493) {
				if r.TryDecodeAsNil() {
					yyv4493[yyj4493] = PersistentVolume{}
				} else {
					yyv4496 := &yyv4493[yyj4493]
					yyv4496.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4493 < len(yyv4493) {
			yyv4493 = yyv4493[:yyj4493]
			yyc4493 = true
		} else if yyj4493 == 0 && yyv4493 == nil {
			yyv4493 = []PersistentVolume{}
			yyc4493 = true
		}
	}
	yyh4493.End()
	if yyc4493 {
		*v = yyv4493
	}
}

func (x codecSelfer1234) encSlicePersistentVolumeClaim(v []PersistentVolumeClaim, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4497 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4498 := &yyv4497
		yy4498.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePersistentVolumeClaim(v *[]PersistentVolumeClaim, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4499 := *v
	yyh4499, yyl4499 := z.DecSliceHelperStart()
	var yyc4499 bool
	if yyl4499 == 0 {
		if yyv4499 == nil {
			yyv4499 = []PersistentVolumeClaim{}
			yyc4499 = true
		} else if len(yyv4499) != 0 {
			yyv4499 = yyv4499[:0]
			yyc4499 = true
		}
	} else if yyl4499 > 0 {
		var yyrr4499, yyrl4499 int
		var yyrt4499 bool
		if yyl4499 > cap(yyv4499) {

			yyrg4499 := len(yyv4499) > 0
			yyv24499 := yyv4499
			yyrl4499, yyrt4499 = z.DecInferLen(yyl4499, z.DecBasicHandle().MaxInitLen, 352)
			if yyrt4499 {
				if yyrl4499 <= cap(yyv4499) {
					yyv4499 = yyv4499[:yyrl4499]
				} else {
					yyv4499 = make([]PersistentVolumeClaim, yyrl4499)
				}
			} else {
				yyv4499 = make([]PersistentVolumeClaim, yyrl4499)
			}
			yyc4499 = true
			yyrr4499 = len(yyv4499)
			if yyrg4499 {
				copy(yyv4499, yyv24499)
			}
		} else if yyl4499 != len(yyv4499) {
			yyv4499 = yyv4499[:yyl4499]
			yyc4499 = true
		}
		yyj4499 := 0
		for ; yyj4499 < yyrr4499; yyj4499++ {
			yyh4499.ElemContainerState(yyj4499)
			if r.TryDecodeAsNil() {
				yyv4499[yyj4499] = PersistentVolumeClaim{}
			} else {
				yyv4500 := &yyv4499[yyj4499]
				yyv4500.CodecDecodeSelf(d)
			}

		}
		if yyrt4499 {
			for ; yyj4499 < yyl4499; yyj4499++ {
				yyv4499 = append(yyv4499, PersistentVolumeClaim{})
				yyh4499.ElemContainerState(yyj4499)
				if r.TryDecodeAsNil() {
					yyv4499[yyj4499] = PersistentVolumeClaim{}
				} else {
					yyv4501 := &yyv4499[yyj4499]
					yyv4501.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4499 := 0
		for ; !r.CheckBreak(); yyj4499++ {

			if yyj4499 >= len(yyv4499) {
				yyv4499 = append(yyv4499, PersistentVolumeClaim{}) // var yyz4499 PersistentVolumeClaim
				yyc4499 = true
			}
			yyh4499.ElemContainerState(yyj4499)
			if yyj4499 < len(yyv4499) {
				if r.TryDecodeAsNil() {
					yyv4499[yyj4499] = PersistentVolumeClaim{}
				} else {
					yyv4502 := &yyv4499[yyj4499]
					yyv4502.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4499 < len(yyv4499) {
			yyv4499 = yyv4499[:yyj4499]
			yyc4499 = true
		} else if yyj4499 == 0 && yyv4499 == nil {
			yyv4499 = []PersistentVolumeClaim{}
			yyc4499 = true
		}
	}
	yyh4499.End()
	if yyc4499 {
		*v = yyv4499
	}
}

func (x codecSelfer1234) encSliceKeyToPath(v []KeyToPath, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4503 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4504 := &yyv4503
		yy4504.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceKeyToPath(v *[]KeyToPath, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4505 := *v
	yyh4505, yyl4505 := z.DecSliceHelperStart()
	var yyc4505 bool
	if yyl4505 == 0 {
		if yyv4505 == nil {
			yyv4505 = []KeyToPath{}
			yyc4505 = true
		} else if len(yyv4505) != 0 {
			yyv4505 = yyv4505[:0]
			yyc4505 = true
		}
	} else if yyl4505 > 0 {
		var yyrr4505, yyrl4505 int
		var yyrt4505 bool
		if yyl4505 > cap(yyv4505) {

			yyrg4505 := len(yyv4505) > 0
			yyv24505 := yyv4505
			yyrl4505, yyrt4505 = z.DecInferLen(yyl4505, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4505 {
				if yyrl4505 <= cap(yyv4505) {
					yyv4505 = yyv4505[:yyrl4505]
				} else {
					yyv4505 = make([]KeyToPath, yyrl4505)
				}
			} else {
				yyv4505 = make([]KeyToPath, yyrl4505)
			}
			yyc4505 = true
			yyrr4505 = len(yyv4505)
			if yyrg4505 {
				copy(yyv4505, yyv24505)
			}
		} else if yyl4505 != len(yyv4505) {
			yyv4505 = yyv4505[:yyl4505]
			yyc4505 = true
		}
		yyj4505 := 0
		for ; yyj4505 < yyrr4505; yyj4505++ {
			yyh4505.ElemContainerState(yyj4505)
			if r.TryDecodeAsNil() {
				yyv4505[yyj4505] = KeyToPath{}
			} else {
				yyv4506 := &yyv4505[yyj4505]
				yyv4506.CodecDecodeSelf(d)
			}

		}
		if yyrt4505 {
			for ; yyj4505 < yyl4505; yyj4505++ {
				yyv4505 = append(yyv4505, KeyToPath{})
				yyh4505.ElemContainerState(yyj4505)
				if r.TryDecodeAsNil() {
					yyv4505[yyj4505] = KeyToPath{}
				} else {
					yyv4507 := &yyv4505[yyj4505]
					yyv4507.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4505 := 0
		for ; !r.CheckBreak(); yyj4505++ {

			if yyj4505 >= len(yyv4505) {
				yyv4505 = append(yyv4505, KeyToPath{}) // var yyz4505 KeyToPath
				yyc4505 = true
			}
			yyh4505.ElemContainerState(yyj4505)
			if yyj4505 < len(yyv4505) {
				if r.TryDecodeAsNil() {
					yyv4505[yyj4505] = KeyToPath{}
				} else {
					yyv4508 := &yyv4505[yyj4505]
					yyv4508.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4505 < len(yyv4505) {
			yyv4505 = yyv4505[:yyj4505]
			yyc4505 = true
		} else if yyj4505 == 0 && yyv4505 == nil {
			yyv4505 = []KeyToPath{}
			yyc4505 = true
		}
	}
	yyh4505.End()
	if yyc4505 {
		*v = yyv4505
	}
}

func (x codecSelfer1234) encSliceDownwardAPIVolumeFile(v []DownwardAPIVolumeFile, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4509 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4510 := &yyv4509
		yy4510.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceDownwardAPIVolumeFile(v *[]DownwardAPIVolumeFile, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4511 := *v
	yyh4511, yyl4511 := z.DecSliceHelperStart()
	var yyc4511 bool
	if yyl4511 == 0 {
		if yyv4511 == nil {
			yyv4511 = []DownwardAPIVolumeFile{}
			yyc4511 = true
		} else if len(yyv4511) != 0 {
			yyv4511 = yyv4511[:0]
			yyc4511 = true
		}
	} else if yyl4511 > 0 {
		var yyrr4511, yyrl4511 int
		var yyrt4511 bool
		if yyl4511 > cap(yyv4511) {

			yyrg4511 := len(yyv4511) > 0
			yyv24511 := yyv4511
			yyrl4511, yyrt4511 = z.DecInferLen(yyl4511, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4511 {
				if yyrl4511 <= cap(yyv4511) {
					yyv4511 = yyv4511[:yyrl4511]
				} else {
					yyv4511 = make([]DownwardAPIVolumeFile, yyrl4511)
				}
			} else {
				yyv4511 = make([]DownwardAPIVolumeFile, yyrl4511)
			}
			yyc4511 = true
			yyrr4511 = len(yyv4511)
			if yyrg4511 {
				copy(yyv4511, yyv24511)
			}
		} else if yyl4511 != len(yyv4511) {
			yyv4511 = yyv4511[:yyl4511]
			yyc4511 = true
		}
		yyj4511 := 0
		for ; yyj4511 < yyrr4511; yyj4511++ {
			yyh4511.ElemContainerState(yyj4511)
			if r.TryDecodeAsNil() {
				yyv4511[yyj4511] = DownwardAPIVolumeFile{}
			} else {
				yyv4512 := &yyv4511[yyj4511]
				yyv4512.CodecDecodeSelf(d)
			}

		}
		if yyrt4511 {
			for ; yyj4511 < yyl4511; yyj4511++ {
				yyv4511 = append(yyv4511, DownwardAPIVolumeFile{})
				yyh4511.ElemContainerState(yyj4511)
				if r.TryDecodeAsNil() {
					yyv4511[yyj4511] = DownwardAPIVolumeFile{}
				} else {
					yyv4513 := &yyv4511[yyj4511]
					yyv4513.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4511 := 0
		for ; !r.CheckBreak(); yyj4511++ {

			if yyj4511 >= len(yyv4511) {
				yyv4511 = append(yyv4511, DownwardAPIVolumeFile{}) // var yyz4511 DownwardAPIVolumeFile
				yyc4511 = true
			}
			yyh4511.ElemContainerState(yyj4511)
			if yyj4511 < len(yyv4511) {
				if r.TryDecodeAsNil() {
					yyv4511[yyj4511] = DownwardAPIVolumeFile{}
				} else {
					yyv4514 := &yyv4511[yyj4511]
					yyv4514.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4511 < len(yyv4511) {
			yyv4511 = yyv4511[:yyj4511]
			yyc4511 = true
		} else if yyj4511 == 0 && yyv4511 == nil {
			yyv4511 = []DownwardAPIVolumeFile{}
			yyc4511 = true
		}
	}
	yyh4511.End()
	if yyc4511 {
		*v = yyv4511
	}
}

func (x codecSelfer1234) encSliceHTTPHeader(v []HTTPHeader, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4515 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4516 := &yyv4515
		yy4516.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceHTTPHeader(v *[]HTTPHeader, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4517 := *v
	yyh4517, yyl4517 := z.DecSliceHelperStart()
	var yyc4517 bool
	if yyl4517 == 0 {
		if yyv4517 == nil {
			yyv4517 = []HTTPHeader{}
			yyc4517 = true
		} else if len(yyv4517) != 0 {
			yyv4517 = yyv4517[:0]
			yyc4517 = true
		}
	} else if yyl4517 > 0 {
		var yyrr4517, yyrl4517 int
		var yyrt4517 bool
		if yyl4517 > cap(yyv4517) {

			yyrg4517 := len(yyv4517) > 0
			yyv24517 := yyv4517
			yyrl4517, yyrt4517 = z.DecInferLen(yyl4517, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4517 {
				if yyrl4517 <= cap(yyv4517) {
					yyv4517 = yyv4517[:yyrl4517]
				} else {
					yyv4517 = make([]HTTPHeader, yyrl4517)
				}
			} else {
				yyv4517 = make([]HTTPHeader, yyrl4517)
			}
			yyc4517 = true
			yyrr4517 = len(yyv4517)
			if yyrg4517 {
				copy(yyv4517, yyv24517)
			}
		} else if yyl4517 != len(yyv4517) {
			yyv4517 = yyv4517[:yyl4517]
			yyc4517 = true
		}
		yyj4517 := 0
		for ; yyj4517 < yyrr4517; yyj4517++ {
			yyh4517.ElemContainerState(yyj4517)
			if r.TryDecodeAsNil() {
				yyv4517[yyj4517] = HTTPHeader{}
			} else {
				yyv4518 := &yyv4517[yyj4517]
				yyv4518.CodecDecodeSelf(d)
			}

		}
		if yyrt4517 {
			for ; yyj4517 < yyl4517; yyj4517++ {
				yyv4517 = append(yyv4517, HTTPHeader{})
				yyh4517.ElemContainerState(yyj4517)
				if r.TryDecodeAsNil() {
					yyv4517[yyj4517] = HTTPHeader{}
				} else {
					yyv4519 := &yyv4517[yyj4517]
					yyv4519.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4517 := 0
		for ; !r.CheckBreak(); yyj4517++ {

			if yyj4517 >= len(yyv4517) {
				yyv4517 = append(yyv4517, HTTPHeader{}) // var yyz4517 HTTPHeader
				yyc4517 = true
			}
			yyh4517.ElemContainerState(yyj4517)
			if yyj4517 < len(yyv4517) {
				if r.TryDecodeAsNil() {
					yyv4517[yyj4517] = HTTPHeader{}
				} else {
					yyv4520 := &yyv4517[yyj4517]
					yyv4520.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4517 < len(yyv4517) {
			yyv4517 = yyv4517[:yyj4517]
			yyc4517 = true
		} else if yyj4517 == 0 && yyv4517 == nil {
			yyv4517 = []HTTPHeader{}
			yyc4517 = true
		}
	}
	yyh4517.End()
	if yyc4517 {
		*v = yyv4517
	}
}

func (x codecSelfer1234) encSliceCapability(v []Capability, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4521 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4521.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceCapability(v *[]Capability, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4522 := *v
	yyh4522, yyl4522 := z.DecSliceHelperStart()
	var yyc4522 bool
	if yyl4522 == 0 {
		if yyv4522 == nil {
			yyv4522 = []Capability{}
			yyc4522 = true
		} else if len(yyv4522) != 0 {
			yyv4522 = yyv4522[:0]
			yyc4522 = true
		}
	} else if yyl4522 > 0 {
		var yyrr4522, yyrl4522 int
		var yyrt4522 bool
		if yyl4522 > cap(yyv4522) {

			yyrl4522, yyrt4522 = z.DecInferLen(yyl4522, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4522 {
				if yyrl4522 <= cap(yyv4522) {
					yyv4522 = yyv4522[:yyrl4522]
				} else {
					yyv4522 = make([]Capability, yyrl4522)
				}
			} else {
				yyv4522 = make([]Capability, yyrl4522)
			}
			yyc4522 = true
			yyrr4522 = len(yyv4522)
		} else if yyl4522 != len(yyv4522) {
			yyv4522 = yyv4522[:yyl4522]
			yyc4522 = true
		}
		yyj4522 := 0
		for ; yyj4522 < yyrr4522; yyj4522++ {
			yyh4522.ElemContainerState(yyj4522)
			if r.TryDecodeAsNil() {
				yyv4522[yyj4522] = ""
			} else {
				yyv4522[yyj4522] = Capability(r.DecodeString())
			}

		}
		if yyrt4522 {
			for ; yyj4522 < yyl4522; yyj4522++ {
				yyv4522 = append(yyv4522, "")
				yyh4522.ElemContainerState(yyj4522)
				if r.TryDecodeAsNil() {
					yyv4522[yyj4522] = ""
				} else {
					yyv4522[yyj4522] = Capability(r.DecodeString())
				}

			}
		}

	} else {
		yyj4522 := 0
		for ; !r.CheckBreak(); yyj4522++ {

			if yyj4522 >= len(yyv4522) {
				yyv4522 = append(yyv4522, "") // var yyz4522 Capability
				yyc4522 = true
			}
			yyh4522.ElemContainerState(yyj4522)
			if yyj4522 < len(yyv4522) {
				if r.TryDecodeAsNil() {
					yyv4522[yyj4522] = ""
				} else {
					yyv4522[yyj4522] = Capability(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4522 < len(yyv4522) {
			yyv4522 = yyv4522[:yyj4522]
			yyc4522 = true
		} else if yyj4522 == 0 && yyv4522 == nil {
			yyv4522 = []Capability{}
			yyc4522 = true
		}
	}
	yyh4522.End()
	if yyc4522 {
		*v = yyv4522
	}
}

func (x codecSelfer1234) encSliceContainerPort(v []ContainerPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4526 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4527 := &yyv4526
		yy4527.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerPort(v *[]ContainerPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4528 := *v
	yyh4528, yyl4528 := z.DecSliceHelperStart()
	var yyc4528 bool
	if yyl4528 == 0 {
		if yyv4528 == nil {
			yyv4528 = []ContainerPort{}
			yyc4528 = true
		} else if len(yyv4528) != 0 {
			yyv4528 = yyv4528[:0]
			yyc4528 = true
		}
	} else if yyl4528 > 0 {
		var yyrr4528, yyrl4528 int
		var yyrt4528 bool
		if yyl4528 > cap(yyv4528) {

			yyrg4528 := len(yyv4528) > 0
			yyv24528 := yyv4528
			yyrl4528, yyrt4528 = z.DecInferLen(yyl4528, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4528 {
				if yyrl4528 <= cap(yyv4528) {
					yyv4528 = yyv4528[:yyrl4528]
				} else {
					yyv4528 = make([]ContainerPort, yyrl4528)
				}
			} else {
				yyv4528 = make([]ContainerPort, yyrl4528)
			}
			yyc4528 = true
			yyrr4528 = len(yyv4528)
			if yyrg4528 {
				copy(yyv4528, yyv24528)
			}
		} else if yyl4528 != len(yyv4528) {
			yyv4528 = yyv4528[:yyl4528]
			yyc4528 = true
		}
		yyj4528 := 0
		for ; yyj4528 < yyrr4528; yyj4528++ {
			yyh4528.ElemContainerState(yyj4528)
			if r.TryDecodeAsNil() {
				yyv4528[yyj4528] = ContainerPort{}
			} else {
				yyv4529 := &yyv4528[yyj4528]
				yyv4529.CodecDecodeSelf(d)
			}

		}
		if yyrt4528 {
			for ; yyj4528 < yyl4528; yyj4528++ {
				yyv4528 = append(yyv4528, ContainerPort{})
				yyh4528.ElemContainerState(yyj4528)
				if r.TryDecodeAsNil() {
					yyv4528[yyj4528] = ContainerPort{}
				} else {
					yyv4530 := &yyv4528[yyj4528]
					yyv4530.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4528 := 0
		for ; !r.CheckBreak(); yyj4528++ {

			if yyj4528 >= len(yyv4528) {
				yyv4528 = append(yyv4528, ContainerPort{}) // var yyz4528 ContainerPort
				yyc4528 = true
			}
			yyh4528.ElemContainerState(yyj4528)
			if yyj4528 < len(yyv4528) {
				if r.TryDecodeAsNil() {
					yyv4528[yyj4528] = ContainerPort{}
				} else {
					yyv4531 := &yyv4528[yyj4528]
					yyv4531.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4528 < len(yyv4528) {
			yyv4528 = yyv4528[:yyj4528]
			yyc4528 = true
		} else if yyj4528 == 0 && yyv4528 == nil {
			yyv4528 = []ContainerPort{}
			yyc4528 = true
		}
	}
	yyh4528.End()
	if yyc4528 {
		*v = yyv4528
	}
}

func (x codecSelfer1234) encSliceEnvVar(v []EnvVar, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4532 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4533 := &yyv4532
		yy4533.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEnvVar(v *[]EnvVar, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4534 := *v
	yyh4534, yyl4534 := z.DecSliceHelperStart()
	var yyc4534 bool
	if yyl4534 == 0 {
		if yyv4534 == nil {
			yyv4534 = []EnvVar{}
			yyc4534 = true
		} else if len(yyv4534) != 0 {
			yyv4534 = yyv4534[:0]
			yyc4534 = true
		}
	} else if yyl4534 > 0 {
		var yyrr4534, yyrl4534 int
		var yyrt4534 bool
		if yyl4534 > cap(yyv4534) {

			yyrg4534 := len(yyv4534) > 0
			yyv24534 := yyv4534
			yyrl4534, yyrt4534 = z.DecInferLen(yyl4534, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4534 {
				if yyrl4534 <= cap(yyv4534) {
					yyv4534 = yyv4534[:yyrl4534]
				} else {
					yyv4534 = make([]EnvVar, yyrl4534)
				}
			} else {
				yyv4534 = make([]EnvVar, yyrl4534)
			}
			yyc4534 = true
			yyrr4534 = len(yyv4534)
			if yyrg4534 {
				copy(yyv4534, yyv24534)
			}
		} else if yyl4534 != len(yyv4534) {
			yyv4534 = yyv4534[:yyl4534]
			yyc4534 = true
		}
		yyj4534 := 0
		for ; yyj4534 < yyrr4534; yyj4534++ {
			yyh4534.ElemContainerState(yyj4534)
			if r.TryDecodeAsNil() {
				yyv4534[yyj4534] = EnvVar{}
			} else {
				yyv4535 := &yyv4534[yyj4534]
				yyv4535.CodecDecodeSelf(d)
			}

		}
		if yyrt4534 {
			for ; yyj4534 < yyl4534; yyj4534++ {
				yyv4534 = append(yyv4534, EnvVar{})
				yyh4534.ElemContainerState(yyj4534)
				if r.TryDecodeAsNil() {
					yyv4534[yyj4534] = EnvVar{}
				} else {
					yyv4536 := &yyv4534[yyj4534]
					yyv4536.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4534 := 0
		for ; !r.CheckBreak(); yyj4534++ {

			if yyj4534 >= len(yyv4534) {
				yyv4534 = append(yyv4534, EnvVar{}) // var yyz4534 EnvVar
				yyc4534 = true
			}
			yyh4534.ElemContainerState(yyj4534)
			if yyj4534 < len(yyv4534) {
				if r.TryDecodeAsNil() {
					yyv4534[yyj4534] = EnvVar{}
				} else {
					yyv4537 := &yyv4534[yyj4534]
					yyv4537.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4534 < len(yyv4534) {
			yyv4534 = yyv4534[:yyj4534]
			yyc4534 = true
		} else if yyj4534 == 0 && yyv4534 == nil {
			yyv4534 = []EnvVar{}
			yyc4534 = true
		}
	}
	yyh4534.End()
	if yyc4534 {
		*v = yyv4534
	}
}

func (x codecSelfer1234) encSliceVolumeMount(v []VolumeMount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4538 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4539 := &yyv4538
		yy4539.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolumeMount(v *[]VolumeMount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4540 := *v
	yyh4540, yyl4540 := z.DecSliceHelperStart()
	var yyc4540 bool
	if yyl4540 == 0 {
		if yyv4540 == nil {
			yyv4540 = []VolumeMount{}
			yyc4540 = true
		} else if len(yyv4540) != 0 {
			yyv4540 = yyv4540[:0]
			yyc4540 = true
		}
	} else if yyl4540 > 0 {
		var yyrr4540, yyrl4540 int
		var yyrt4540 bool
		if yyl4540 > cap(yyv4540) {

			yyrg4540 := len(yyv4540) > 0
			yyv24540 := yyv4540
			yyrl4540, yyrt4540 = z.DecInferLen(yyl4540, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4540 {
				if yyrl4540 <= cap(yyv4540) {
					yyv4540 = yyv4540[:yyrl4540]
				} else {
					yyv4540 = make([]VolumeMount, yyrl4540)
				}
			} else {
				yyv4540 = make([]VolumeMount, yyrl4540)
			}
			yyc4540 = true
			yyrr4540 = len(yyv4540)
			if yyrg4540 {
				copy(yyv4540, yyv24540)
			}
		} else if yyl4540 != len(yyv4540) {
			yyv4540 = yyv4540[:yyl4540]
			yyc4540 = true
		}
		yyj4540 := 0
		for ; yyj4540 < yyrr4540; yyj4540++ {
			yyh4540.ElemContainerState(yyj4540)
			if r.TryDecodeAsNil() {
				yyv4540[yyj4540] = VolumeMount{}
			} else {
				yyv4541 := &yyv4540[yyj4540]
				yyv4541.CodecDecodeSelf(d)
			}

		}
		if yyrt4540 {
			for ; yyj4540 < yyl4540; yyj4540++ {
				yyv4540 = append(yyv4540, VolumeMount{})
				yyh4540.ElemContainerState(yyj4540)
				if r.TryDecodeAsNil() {
					yyv4540[yyj4540] = VolumeMount{}
				} else {
					yyv4542 := &yyv4540[yyj4540]
					yyv4542.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4540 := 0
		for ; !r.CheckBreak(); yyj4540++ {

			if yyj4540 >= len(yyv4540) {
				yyv4540 = append(yyv4540, VolumeMount{}) // var yyz4540 VolumeMount
				yyc4540 = true
			}
			yyh4540.ElemContainerState(yyj4540)
			if yyj4540 < len(yyv4540) {
				if r.TryDecodeAsNil() {
					yyv4540[yyj4540] = VolumeMount{}
				} else {
					yyv4543 := &yyv4540[yyj4540]
					yyv4543.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4540 < len(yyv4540) {
			yyv4540 = yyv4540[:yyj4540]
			yyc4540 = true
		} else if yyj4540 == 0 && yyv4540 == nil {
			yyv4540 = []VolumeMount{}
			yyc4540 = true
		}
	}
	yyh4540.End()
	if yyc4540 {
		*v = yyv4540
	}
}

func (x codecSelfer1234) encSlicePod(v []Pod, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4544 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4545 := &yyv4544
		yy4545.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePod(v *[]Pod, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4546 := *v
	yyh4546, yyl4546 := z.DecSliceHelperStart()
	var yyc4546 bool
	if yyl4546 == 0 {
		if yyv4546 == nil {
			yyv4546 = []Pod{}
			yyc4546 = true
		} else if len(yyv4546) != 0 {
			yyv4546 = yyv4546[:0]
			yyc4546 = true
		}
	} else if yyl4546 > 0 {
		var yyrr4546, yyrl4546 int
		var yyrt4546 bool
		if yyl4546 > cap(yyv4546) {

			yyrg4546 := len(yyv4546) > 0
			yyv24546 := yyv4546
			yyrl4546, yyrt4546 = z.DecInferLen(yyl4546, z.DecBasicHandle().MaxInitLen, 624)
			if yyrt4546 {
				if yyrl4546 <= cap(yyv4546) {
					yyv4546 = yyv4546[:yyrl4546]
				} else {
					yyv4546 = make([]Pod, yyrl4546)
				}
			} else {
				yyv4546 = make([]Pod, yyrl4546)
			}
			yyc4546 = true
			yyrr4546 = len(yyv4546)
			if yyrg4546 {
				copy(yyv4546, yyv24546)
			}
		} else if yyl4546 != len(yyv4546) {
			yyv4546 = yyv4546[:yyl4546]
			yyc4546 = true
		}
		yyj4546 := 0
		for ; yyj4546 < yyrr4546; yyj4546++ {
			yyh4546.ElemContainerState(yyj4546)
			if r.TryDecodeAsNil() {
				yyv4546[yyj4546] = Pod{}
			} else {
				yyv4547 := &yyv4546[yyj4546]
				yyv4547.CodecDecodeSelf(d)
			}

		}
		if yyrt4546 {
			for ; yyj4546 < yyl4546; yyj4546++ {
				yyv4546 = append(yyv4546, Pod{})
				yyh4546.ElemContainerState(yyj4546)
				if r.TryDecodeAsNil() {
					yyv4546[yyj4546] = Pod{}
				} else {
					yyv4548 := &yyv4546[yyj4546]
					yyv4548.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4546 := 0
		for ; !r.CheckBreak(); yyj4546++ {

			if yyj4546 >= len(yyv4546) {
				yyv4546 = append(yyv4546, Pod{}) // var yyz4546 Pod
				yyc4546 = true
			}
			yyh4546.ElemContainerState(yyj4546)
			if yyj4546 < len(yyv4546) {
				if r.TryDecodeAsNil() {
					yyv4546[yyj4546] = Pod{}
				} else {
					yyv4549 := &yyv4546[yyj4546]
					yyv4549.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4546 < len(yyv4546) {
			yyv4546 = yyv4546[:yyj4546]
			yyc4546 = true
		} else if yyj4546 == 0 && yyv4546 == nil {
			yyv4546 = []Pod{}
			yyc4546 = true
		}
	}
	yyh4546.End()
	if yyc4546 {
		*v = yyv4546
	}
}

func (x codecSelfer1234) encSliceNodeSelectorTerm(v []NodeSelectorTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4550 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4551 := &yyv4550
		yy4551.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorTerm(v *[]NodeSelectorTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4552 := *v
	yyh4552, yyl4552 := z.DecSliceHelperStart()
	var yyc4552 bool
	if yyl4552 == 0 {
		if yyv4552 == nil {
			yyv4552 = []NodeSelectorTerm{}
			yyc4552 = true
		} else if len(yyv4552) != 0 {
			yyv4552 = yyv4552[:0]
			yyc4552 = true
		}
	} else if yyl4552 > 0 {
		var yyrr4552, yyrl4552 int
		var yyrt4552 bool
		if yyl4552 > cap(yyv4552) {

			yyrg4552 := len(yyv4552) > 0
			yyv24552 := yyv4552
			yyrl4552, yyrt4552 = z.DecInferLen(yyl4552, z.DecBasicHandle().MaxInitLen, 24)
			if yyrt4552 {
				if yyrl4552 <= cap(yyv4552) {
					yyv4552 = yyv4552[:yyrl4552]
				} else {
					yyv4552 = make([]NodeSelectorTerm, yyrl4552)
				}
			} else {
				yyv4552 = make([]NodeSelectorTerm, yyrl4552)
			}
			yyc4552 = true
			yyrr4552 = len(yyv4552)
			if yyrg4552 {
				copy(yyv4552, yyv24552)
			}
		} else if yyl4552 != len(yyv4552) {
			yyv4552 = yyv4552[:yyl4552]
			yyc4552 = true
		}
		yyj4552 := 0
		for ; yyj4552 < yyrr4552; yyj4552++ {
			yyh4552.ElemContainerState(yyj4552)
			if r.TryDecodeAsNil() {
				yyv4552[yyj4552] = NodeSelectorTerm{}
			} else {
				yyv4553 := &yyv4552[yyj4552]
				yyv4553.CodecDecodeSelf(d)
			}

		}
		if yyrt4552 {
			for ; yyj4552 < yyl4552; yyj4552++ {
				yyv4552 = append(yyv4552, NodeSelectorTerm{})
				yyh4552.ElemContainerState(yyj4552)
				if r.TryDecodeAsNil() {
					yyv4552[yyj4552] = NodeSelectorTerm{}
				} else {
					yyv4554 := &yyv4552[yyj4552]
					yyv4554.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4552 := 0
		for ; !r.CheckBreak(); yyj4552++ {

			if yyj4552 >= len(yyv4552) {
				yyv4552 = append(yyv4552, NodeSelectorTerm{}) // var yyz4552 NodeSelectorTerm
				yyc4552 = true
			}
			yyh4552.ElemContainerState(yyj4552)
			if yyj4552 < len(yyv4552) {
				if r.TryDecodeAsNil() {
					yyv4552[yyj4552] = NodeSelectorTerm{}
				} else {
					yyv4555 := &yyv4552[yyj4552]
					yyv4555.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4552 < len(yyv4552) {
			yyv4552 = yyv4552[:yyj4552]
			yyc4552 = true
		} else if yyj4552 == 0 && yyv4552 == nil {
			yyv4552 = []NodeSelectorTerm{}
			yyc4552 = true
		}
	}
	yyh4552.End()
	if yyc4552 {
		*v = yyv4552
	}
}

func (x codecSelfer1234) encSliceNodeSelectorRequirement(v []NodeSelectorRequirement, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4556 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4557 := &yyv4556
		yy4557.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeSelectorRequirement(v *[]NodeSelectorRequirement, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4558 := *v
	yyh4558, yyl4558 := z.DecSliceHelperStart()
	var yyc4558 bool
	if yyl4558 == 0 {
		if yyv4558 == nil {
			yyv4558 = []NodeSelectorRequirement{}
			yyc4558 = true
		} else if len(yyv4558) != 0 {
			yyv4558 = yyv4558[:0]
			yyc4558 = true
		}
	} else if yyl4558 > 0 {
		var yyrr4558, yyrl4558 int
		var yyrt4558 bool
		if yyl4558 > cap(yyv4558) {

			yyrg4558 := len(yyv4558) > 0
			yyv24558 := yyv4558
			yyrl4558, yyrt4558 = z.DecInferLen(yyl4558, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4558 {
				if yyrl4558 <= cap(yyv4558) {
					yyv4558 = yyv4558[:yyrl4558]
				} else {
					yyv4558 = make([]NodeSelectorRequirement, yyrl4558)
				}
			} else {
				yyv4558 = make([]NodeSelectorRequirement, yyrl4558)
			}
			yyc4558 = true
			yyrr4558 = len(yyv4558)
			if yyrg4558 {
				copy(yyv4558, yyv24558)
			}
		} else if yyl4558 != len(yyv4558) {
			yyv4558 = yyv4558[:yyl4558]
			yyc4558 = true
		}
		yyj4558 := 0
		for ; yyj4558 < yyrr4558; yyj4558++ {
			yyh4558.ElemContainerState(yyj4558)
			if r.TryDecodeAsNil() {
				yyv4558[yyj4558] = NodeSelectorRequirement{}
			} else {
				yyv4559 := &yyv4558[yyj4558]
				yyv4559.CodecDecodeSelf(d)
			}

		}
		if yyrt4558 {
			for ; yyj4558 < yyl4558; yyj4558++ {
				yyv4558 = append(yyv4558, NodeSelectorRequirement{})
				yyh4558.ElemContainerState(yyj4558)
				if r.TryDecodeAsNil() {
					yyv4558[yyj4558] = NodeSelectorRequirement{}
				} else {
					yyv4560 := &yyv4558[yyj4558]
					yyv4560.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4558 := 0
		for ; !r.CheckBreak(); yyj4558++ {

			if yyj4558 >= len(yyv4558) {
				yyv4558 = append(yyv4558, NodeSelectorRequirement{}) // var yyz4558 NodeSelectorRequirement
				yyc4558 = true
			}
			yyh4558.ElemContainerState(yyj4558)
			if yyj4558 < len(yyv4558) {
				if r.TryDecodeAsNil() {
					yyv4558[yyj4558] = NodeSelectorRequirement{}
				} else {
					yyv4561 := &yyv4558[yyj4558]
					yyv4561.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4558 < len(yyv4558) {
			yyv4558 = yyv4558[:yyj4558]
			yyc4558 = true
		} else if yyj4558 == 0 && yyv4558 == nil {
			yyv4558 = []NodeSelectorRequirement{}
			yyc4558 = true
		}
	}
	yyh4558.End()
	if yyc4558 {
		*v = yyv4558
	}
}

func (x codecSelfer1234) encSlicePodAffinityTerm(v []PodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4562 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4563 := &yyv4562
		yy4563.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodAffinityTerm(v *[]PodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4564 := *v
	yyh4564, yyl4564 := z.DecSliceHelperStart()
	var yyc4564 bool
	if yyl4564 == 0 {
		if yyv4564 == nil {
			yyv4564 = []PodAffinityTerm{}
			yyc4564 = true
		} else if len(yyv4564) != 0 {
			yyv4564 = yyv4564[:0]
			yyc4564 = true
		}
	} else if yyl4564 > 0 {
		var yyrr4564, yyrl4564 int
		var yyrt4564 bool
		if yyl4564 > cap(yyv4564) {

			yyrg4564 := len(yyv4564) > 0
			yyv24564 := yyv4564
			yyrl4564, yyrt4564 = z.DecInferLen(yyl4564, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4564 {
				if yyrl4564 <= cap(yyv4564) {
					yyv4564 = yyv4564[:yyrl4564]
				} else {
					yyv4564 = make([]PodAffinityTerm, yyrl4564)
				}
			} else {
				yyv4564 = make([]PodAffinityTerm, yyrl4564)
			}
			yyc4564 = true
			yyrr4564 = len(yyv4564)
			if yyrg4564 {
				copy(yyv4564, yyv24564)
			}
		} else if yyl4564 != len(yyv4564) {
			yyv4564 = yyv4564[:yyl4564]
			yyc4564 = true
		}
		yyj4564 := 0
		for ; yyj4564 < yyrr4564; yyj4564++ {
			yyh4564.ElemContainerState(yyj4564)
			if r.TryDecodeAsNil() {
				yyv4564[yyj4564] = PodAffinityTerm{}
			} else {
				yyv4565 := &yyv4564[yyj4564]
				yyv4565.CodecDecodeSelf(d)
			}

		}
		if yyrt4564 {
			for ; yyj4564 < yyl4564; yyj4564++ {
				yyv4564 = append(yyv4564, PodAffinityTerm{})
				yyh4564.ElemContainerState(yyj4564)
				if r.TryDecodeAsNil() {
					yyv4564[yyj4564] = PodAffinityTerm{}
				} else {
					yyv4566 := &yyv4564[yyj4564]
					yyv4566.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4564 := 0
		for ; !r.CheckBreak(); yyj4564++ {

			if yyj4564 >= len(yyv4564) {
				yyv4564 = append(yyv4564, PodAffinityTerm{}) // var yyz4564 PodAffinityTerm
				yyc4564 = true
			}
			yyh4564.ElemContainerState(yyj4564)
			if yyj4564 < len(yyv4564) {
				if r.TryDecodeAsNil() {
					yyv4564[yyj4564] = PodAffinityTerm{}
				} else {
					yyv4567 := &yyv4564[yyj4564]
					yyv4567.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4564 < len(yyv4564) {
			yyv4564 = yyv4564[:yyj4564]
			yyc4564 = true
		} else if yyj4564 == 0 && yyv4564 == nil {
			yyv4564 = []PodAffinityTerm{}
			yyc4564 = true
		}
	}
	yyh4564.End()
	if yyc4564 {
		*v = yyv4564
	}
}

func (x codecSelfer1234) encSliceWeightedPodAffinityTerm(v []WeightedPodAffinityTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4568 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4569 := &yyv4568
		yy4569.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceWeightedPodAffinityTerm(v *[]WeightedPodAffinityTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4570 := *v
	yyh4570, yyl4570 := z.DecSliceHelperStart()
	var yyc4570 bool
	if yyl4570 == 0 {
		if yyv4570 == nil {
			yyv4570 = []WeightedPodAffinityTerm{}
			yyc4570 = true
		} else if len(yyv4570) != 0 {
			yyv4570 = yyv4570[:0]
			yyc4570 = true
		}
	} else if yyl4570 > 0 {
		var yyrr4570, yyrl4570 int
		var yyrt4570 bool
		if yyl4570 > cap(yyv4570) {

			yyrg4570 := len(yyv4570) > 0
			yyv24570 := yyv4570
			yyrl4570, yyrt4570 = z.DecInferLen(yyl4570, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4570 {
				if yyrl4570 <= cap(yyv4570) {
					yyv4570 = yyv4570[:yyrl4570]
				} else {
					yyv4570 = make([]WeightedPodAffinityTerm, yyrl4570)
				}
			} else {
				yyv4570 = make([]WeightedPodAffinityTerm, yyrl4570)
			}
			yyc4570 = true
			yyrr4570 = len(yyv4570)
			if yyrg4570 {
				copy(yyv4570, yyv24570)
			}
		} else if yyl4570 != len(yyv4570) {
			yyv4570 = yyv4570[:yyl4570]
			yyc4570 = true
		}
		yyj4570 := 0
		for ; yyj4570 < yyrr4570; yyj4570++ {
			yyh4570.ElemContainerState(yyj4570)
			if r.TryDecodeAsNil() {
				yyv4570[yyj4570] = WeightedPodAffinityTerm{}
			} else {
				yyv4571 := &yyv4570[yyj4570]
				yyv4571.CodecDecodeSelf(d)
			}

		}
		if yyrt4570 {
			for ; yyj4570 < yyl4570; yyj4570++ {
				yyv4570 = append(yyv4570, WeightedPodAffinityTerm{})
				yyh4570.ElemContainerState(yyj4570)
				if r.TryDecodeAsNil() {
					yyv4570[yyj4570] = WeightedPodAffinityTerm{}
				} else {
					yyv4572 := &yyv4570[yyj4570]
					yyv4572.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4570 := 0
		for ; !r.CheckBreak(); yyj4570++ {

			if yyj4570 >= len(yyv4570) {
				yyv4570 = append(yyv4570, WeightedPodAffinityTerm{}) // var yyz4570 WeightedPodAffinityTerm
				yyc4570 = true
			}
			yyh4570.ElemContainerState(yyj4570)
			if yyj4570 < len(yyv4570) {
				if r.TryDecodeAsNil() {
					yyv4570[yyj4570] = WeightedPodAffinityTerm{}
				} else {
					yyv4573 := &yyv4570[yyj4570]
					yyv4573.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4570 < len(yyv4570) {
			yyv4570 = yyv4570[:yyj4570]
			yyc4570 = true
		} else if yyj4570 == 0 && yyv4570 == nil {
			yyv4570 = []WeightedPodAffinityTerm{}
			yyc4570 = true
		}
	}
	yyh4570.End()
	if yyc4570 {
		*v = yyv4570
	}
}

func (x codecSelfer1234) encSlicePreferredSchedulingTerm(v []PreferredSchedulingTerm, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4574 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4575 := &yyv4574
		yy4575.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferredSchedulingTerm(v *[]PreferredSchedulingTerm, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4576 := *v
	yyh4576, yyl4576 := z.DecSliceHelperStart()
	var yyc4576 bool
	if yyl4576 == 0 {
		if yyv4576 == nil {
			yyv4576 = []PreferredSchedulingTerm{}
			yyc4576 = true
		} else if len(yyv4576) != 0 {
			yyv4576 = yyv4576[:0]
			yyc4576 = true
		}
	} else if yyl4576 > 0 {
		var yyrr4576, yyrl4576 int
		var yyrt4576 bool
		if yyl4576 > cap(yyv4576) {

			yyrg4576 := len(yyv4576) > 0
			yyv24576 := yyv4576
			yyrl4576, yyrt4576 = z.DecInferLen(yyl4576, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4576 {
				if yyrl4576 <= cap(yyv4576) {
					yyv4576 = yyv4576[:yyrl4576]
				} else {
					yyv4576 = make([]PreferredSchedulingTerm, yyrl4576)
				}
			} else {
				yyv4576 = make([]PreferredSchedulingTerm, yyrl4576)
			}
			yyc4576 = true
			yyrr4576 = len(yyv4576)
			if yyrg4576 {
				copy(yyv4576, yyv24576)
			}
		} else if yyl4576 != len(yyv4576) {
			yyv4576 = yyv4576[:yyl4576]
			yyc4576 = true
		}
		yyj4576 := 0
		for ; yyj4576 < yyrr4576; yyj4576++ {
			yyh4576.ElemContainerState(yyj4576)
			if r.TryDecodeAsNil() {
				yyv4576[yyj4576] = PreferredSchedulingTerm{}
			} else {
				yyv4577 := &yyv4576[yyj4576]
				yyv4577.CodecDecodeSelf(d)
			}

		}
		if yyrt4576 {
			for ; yyj4576 < yyl4576; yyj4576++ {
				yyv4576 = append(yyv4576, PreferredSchedulingTerm{})
				yyh4576.ElemContainerState(yyj4576)
				if r.TryDecodeAsNil() {
					yyv4576[yyj4576] = PreferredSchedulingTerm{}
				} else {
					yyv4578 := &yyv4576[yyj4576]
					yyv4578.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4576 := 0
		for ; !r.CheckBreak(); yyj4576++ {

			if yyj4576 >= len(yyv4576) {
				yyv4576 = append(yyv4576, PreferredSchedulingTerm{}) // var yyz4576 PreferredSchedulingTerm
				yyc4576 = true
			}
			yyh4576.ElemContainerState(yyj4576)
			if yyj4576 < len(yyv4576) {
				if r.TryDecodeAsNil() {
					yyv4576[yyj4576] = PreferredSchedulingTerm{}
				} else {
					yyv4579 := &yyv4576[yyj4576]
					yyv4579.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4576 < len(yyv4576) {
			yyv4576 = yyv4576[:yyj4576]
			yyc4576 = true
		} else if yyj4576 == 0 && yyv4576 == nil {
			yyv4576 = []PreferredSchedulingTerm{}
			yyc4576 = true
		}
	}
	yyh4576.End()
	if yyc4576 {
		*v = yyv4576
	}
}

func (x codecSelfer1234) encSliceVolume(v []Volume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4580 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4581 := &yyv4580
		yy4581.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceVolume(v *[]Volume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4582 := *v
	yyh4582, yyl4582 := z.DecSliceHelperStart()
	var yyc4582 bool
	if yyl4582 == 0 {
		if yyv4582 == nil {
			yyv4582 = []Volume{}
			yyc4582 = true
		} else if len(yyv4582) != 0 {
			yyv4582 = yyv4582[:0]
			yyc4582 = true
		}
	} else if yyl4582 > 0 {
		var yyrr4582, yyrl4582 int
		var yyrt4582 bool
		if yyl4582 > cap(yyv4582) {

			yyrg4582 := len(yyv4582) > 0
			yyv24582 := yyv4582
			yyrl4582, yyrt4582 = z.DecInferLen(yyl4582, z.DecBasicHandle().MaxInitLen, 184)
			if yyrt4582 {
				if yyrl4582 <= cap(yyv4582) {
					yyv4582 = yyv4582[:yyrl4582]
				} else {
					yyv4582 = make([]Volume, yyrl4582)
				}
			} else {
				yyv4582 = make([]Volume, yyrl4582)
			}
			yyc4582 = true
			yyrr4582 = len(yyv4582)
			if yyrg4582 {
				copy(yyv4582, yyv24582)
			}
		} else if yyl4582 != len(yyv4582) {
			yyv4582 = yyv4582[:yyl4582]
			yyc4582 = true
		}
		yyj4582 := 0
		for ; yyj4582 < yyrr4582; yyj4582++ {
			yyh4582.ElemContainerState(yyj4582)
			if r.TryDecodeAsNil() {
				yyv4582[yyj4582] = Volume{}
			} else {
				yyv4583 := &yyv4582[yyj4582]
				yyv4583.CodecDecodeSelf(d)
			}

		}
		if yyrt4582 {
			for ; yyj4582 < yyl4582; yyj4582++ {
				yyv4582 = append(yyv4582, Volume{})
				yyh4582.ElemContainerState(yyj4582)
				if r.TryDecodeAsNil() {
					yyv4582[yyj4582] = Volume{}
				} else {
					yyv4584 := &yyv4582[yyj4582]
					yyv4584.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4582 := 0
		for ; !r.CheckBreak(); yyj4582++ {

			if yyj4582 >= len(yyv4582) {
				yyv4582 = append(yyv4582, Volume{}) // var yyz4582 Volume
				yyc4582 = true
			}
			yyh4582.ElemContainerState(yyj4582)
			if yyj4582 < len(yyv4582) {
				if r.TryDecodeAsNil() {
					yyv4582[yyj4582] = Volume{}
				} else {
					yyv4585 := &yyv4582[yyj4582]
					yyv4585.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4582 < len(yyv4582) {
			yyv4582 = yyv4582[:yyj4582]
			yyc4582 = true
		} else if yyj4582 == 0 && yyv4582 == nil {
			yyv4582 = []Volume{}
			yyc4582 = true
		}
	}
	yyh4582.End()
	if yyc4582 {
		*v = yyv4582
	}
}

func (x codecSelfer1234) encSliceContainer(v []Container, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4586 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4587 := &yyv4586
		yy4587.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainer(v *[]Container, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4588 := *v
	yyh4588, yyl4588 := z.DecSliceHelperStart()
	var yyc4588 bool
	if yyl4588 == 0 {
		if yyv4588 == nil {
			yyv4588 = []Container{}
			yyc4588 = true
		} else if len(yyv4588) != 0 {
			yyv4588 = yyv4588[:0]
			yyc4588 = true
		}
	} else if yyl4588 > 0 {
		var yyrr4588, yyrl4588 int
		var yyrt4588 bool
		if yyl4588 > cap(yyv4588) {

			yyrg4588 := len(yyv4588) > 0
			yyv24588 := yyv4588
			yyrl4588, yyrt4588 = z.DecInferLen(yyl4588, z.DecBasicHandle().MaxInitLen, 256)
			if yyrt4588 {
				if yyrl4588 <= cap(yyv4588) {
					yyv4588 = yyv4588[:yyrl4588]
				} else {
					yyv4588 = make([]Container, yyrl4588)
				}
			} else {
				yyv4588 = make([]Container, yyrl4588)
			}
			yyc4588 = true
			yyrr4588 = len(yyv4588)
			if yyrg4588 {
				copy(yyv4588, yyv24588)
			}
		} else if yyl4588 != len(yyv4588) {
			yyv4588 = yyv4588[:yyl4588]
			yyc4588 = true
		}
		yyj4588 := 0
		for ; yyj4588 < yyrr4588; yyj4588++ {
			yyh4588.ElemContainerState(yyj4588)
			if r.TryDecodeAsNil() {
				yyv4588[yyj4588] = Container{}
			} else {
				yyv4589 := &yyv4588[yyj4588]
				yyv4589.CodecDecodeSelf(d)
			}

		}
		if yyrt4588 {
			for ; yyj4588 < yyl4588; yyj4588++ {
				yyv4588 = append(yyv4588, Container{})
				yyh4588.ElemContainerState(yyj4588)
				if r.TryDecodeAsNil() {
					yyv4588[yyj4588] = Container{}
				} else {
					yyv4590 := &yyv4588[yyj4588]
					yyv4590.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4588 := 0
		for ; !r.CheckBreak(); yyj4588++ {

			if yyj4588 >= len(yyv4588) {
				yyv4588 = append(yyv4588, Container{}) // var yyz4588 Container
				yyc4588 = true
			}
			yyh4588.ElemContainerState(yyj4588)
			if yyj4588 < len(yyv4588) {
				if r.TryDecodeAsNil() {
					yyv4588[yyj4588] = Container{}
				} else {
					yyv4591 := &yyv4588[yyj4588]
					yyv4591.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4588 < len(yyv4588) {
			yyv4588 = yyv4588[:yyj4588]
			yyc4588 = true
		} else if yyj4588 == 0 && yyv4588 == nil {
			yyv4588 = []Container{}
			yyc4588 = true
		}
	}
	yyh4588.End()
	if yyc4588 {
		*v = yyv4588
	}
}

func (x codecSelfer1234) encSliceLocalObjectReference(v []LocalObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4592 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4593 := &yyv4592
		yy4593.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLocalObjectReference(v *[]LocalObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4594 := *v
	yyh4594, yyl4594 := z.DecSliceHelperStart()
	var yyc4594 bool
	if yyl4594 == 0 {
		if yyv4594 == nil {
			yyv4594 = []LocalObjectReference{}
			yyc4594 = true
		} else if len(yyv4594) != 0 {
			yyv4594 = yyv4594[:0]
			yyc4594 = true
		}
	} else if yyl4594 > 0 {
		var yyrr4594, yyrl4594 int
		var yyrt4594 bool
		if yyl4594 > cap(yyv4594) {

			yyrg4594 := len(yyv4594) > 0
			yyv24594 := yyv4594
			yyrl4594, yyrt4594 = z.DecInferLen(yyl4594, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4594 {
				if yyrl4594 <= cap(yyv4594) {
					yyv4594 = yyv4594[:yyrl4594]
				} else {
					yyv4594 = make([]LocalObjectReference, yyrl4594)
				}
			} else {
				yyv4594 = make([]LocalObjectReference, yyrl4594)
			}
			yyc4594 = true
			yyrr4594 = len(yyv4594)
			if yyrg4594 {
				copy(yyv4594, yyv24594)
			}
		} else if yyl4594 != len(yyv4594) {
			yyv4594 = yyv4594[:yyl4594]
			yyc4594 = true
		}
		yyj4594 := 0
		for ; yyj4594 < yyrr4594; yyj4594++ {
			yyh4594.ElemContainerState(yyj4594)
			if r.TryDecodeAsNil() {
				yyv4594[yyj4594] = LocalObjectReference{}
			} else {
				yyv4595 := &yyv4594[yyj4594]
				yyv4595.CodecDecodeSelf(d)
			}

		}
		if yyrt4594 {
			for ; yyj4594 < yyl4594; yyj4594++ {
				yyv4594 = append(yyv4594, LocalObjectReference{})
				yyh4594.ElemContainerState(yyj4594)
				if r.TryDecodeAsNil() {
					yyv4594[yyj4594] = LocalObjectReference{}
				} else {
					yyv4596 := &yyv4594[yyj4594]
					yyv4596.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4594 := 0
		for ; !r.CheckBreak(); yyj4594++ {

			if yyj4594 >= len(yyv4594) {
				yyv4594 = append(yyv4594, LocalObjectReference{}) // var yyz4594 LocalObjectReference
				yyc4594 = true
			}
			yyh4594.ElemContainerState(yyj4594)
			if yyj4594 < len(yyv4594) {
				if r.TryDecodeAsNil() {
					yyv4594[yyj4594] = LocalObjectReference{}
				} else {
					yyv4597 := &yyv4594[yyj4594]
					yyv4597.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4594 < len(yyv4594) {
			yyv4594 = yyv4594[:yyj4594]
			yyc4594 = true
		} else if yyj4594 == 0 && yyv4594 == nil {
			yyv4594 = []LocalObjectReference{}
			yyc4594 = true
		}
	}
	yyh4594.End()
	if yyc4594 {
		*v = yyv4594
	}
}

func (x codecSelfer1234) encSlicePodCondition(v []PodCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4598 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4599 := &yyv4598
		yy4599.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodCondition(v *[]PodCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4600 := *v
	yyh4600, yyl4600 := z.DecSliceHelperStart()
	var yyc4600 bool
	if yyl4600 == 0 {
		if yyv4600 == nil {
			yyv4600 = []PodCondition{}
			yyc4600 = true
		} else if len(yyv4600) != 0 {
			yyv4600 = yyv4600[:0]
			yyc4600 = true
		}
	} else if yyl4600 > 0 {
		var yyrr4600, yyrl4600 int
		var yyrt4600 bool
		if yyl4600 > cap(yyv4600) {

			yyrg4600 := len(yyv4600) > 0
			yyv24600 := yyv4600
			yyrl4600, yyrt4600 = z.DecInferLen(yyl4600, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4600 {
				if yyrl4600 <= cap(yyv4600) {
					yyv4600 = yyv4600[:yyrl4600]
				} else {
					yyv4600 = make([]PodCondition, yyrl4600)
				}
			} else {
				yyv4600 = make([]PodCondition, yyrl4600)
			}
			yyc4600 = true
			yyrr4600 = len(yyv4600)
			if yyrg4600 {
				copy(yyv4600, yyv24600)
			}
		} else if yyl4600 != len(yyv4600) {
			yyv4600 = yyv4600[:yyl4600]
			yyc4600 = true
		}
		yyj4600 := 0
		for ; yyj4600 < yyrr4600; yyj4600++ {
			yyh4600.ElemContainerState(yyj4600)
			if r.TryDecodeAsNil() {
				yyv4600[yyj4600] = PodCondition{}
			} else {
				yyv4601 := &yyv4600[yyj4600]
				yyv4601.CodecDecodeSelf(d)
			}

		}
		if yyrt4600 {
			for ; yyj4600 < yyl4600; yyj4600++ {
				yyv4600 = append(yyv4600, PodCondition{})
				yyh4600.ElemContainerState(yyj4600)
				if r.TryDecodeAsNil() {
					yyv4600[yyj4600] = PodCondition{}
				} else {
					yyv4602 := &yyv4600[yyj4600]
					yyv4602.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4600 := 0
		for ; !r.CheckBreak(); yyj4600++ {

			if yyj4600 >= len(yyv4600) {
				yyv4600 = append(yyv4600, PodCondition{}) // var yyz4600 PodCondition
				yyc4600 = true
			}
			yyh4600.ElemContainerState(yyj4600)
			if yyj4600 < len(yyv4600) {
				if r.TryDecodeAsNil() {
					yyv4600[yyj4600] = PodCondition{}
				} else {
					yyv4603 := &yyv4600[yyj4600]
					yyv4603.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4600 < len(yyv4600) {
			yyv4600 = yyv4600[:yyj4600]
			yyc4600 = true
		} else if yyj4600 == 0 && yyv4600 == nil {
			yyv4600 = []PodCondition{}
			yyc4600 = true
		}
	}
	yyh4600.End()
	if yyc4600 {
		*v = yyv4600
	}
}

func (x codecSelfer1234) encSliceContainerStatus(v []ContainerStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4604 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4605 := &yyv4604
		yy4605.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerStatus(v *[]ContainerStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4606 := *v
	yyh4606, yyl4606 := z.DecSliceHelperStart()
	var yyc4606 bool
	if yyl4606 == 0 {
		if yyv4606 == nil {
			yyv4606 = []ContainerStatus{}
			yyc4606 = true
		} else if len(yyv4606) != 0 {
			yyv4606 = yyv4606[:0]
			yyc4606 = true
		}
	} else if yyl4606 > 0 {
		var yyrr4606, yyrl4606 int
		var yyrt4606 bool
		if yyl4606 > cap(yyv4606) {

			yyrg4606 := len(yyv4606) > 0
			yyv24606 := yyv4606
			yyrl4606, yyrt4606 = z.DecInferLen(yyl4606, z.DecBasicHandle().MaxInitLen, 120)
			if yyrt4606 {
				if yyrl4606 <= cap(yyv4606) {
					yyv4606 = yyv4606[:yyrl4606]
				} else {
					yyv4606 = make([]ContainerStatus, yyrl4606)
				}
			} else {
				yyv4606 = make([]ContainerStatus, yyrl4606)
			}
			yyc4606 = true
			yyrr4606 = len(yyv4606)
			if yyrg4606 {
				copy(yyv4606, yyv24606)
			}
		} else if yyl4606 != len(yyv4606) {
			yyv4606 = yyv4606[:yyl4606]
			yyc4606 = true
		}
		yyj4606 := 0
		for ; yyj4606 < yyrr4606; yyj4606++ {
			yyh4606.ElemContainerState(yyj4606)
			if r.TryDecodeAsNil() {
				yyv4606[yyj4606] = ContainerStatus{}
			} else {
				yyv4607 := &yyv4606[yyj4606]
				yyv4607.CodecDecodeSelf(d)
			}

		}
		if yyrt4606 {
			for ; yyj4606 < yyl4606; yyj4606++ {
				yyv4606 = append(yyv4606, ContainerStatus{})
				yyh4606.ElemContainerState(yyj4606)
				if r.TryDecodeAsNil() {
					yyv4606[yyj4606] = ContainerStatus{}
				} else {
					yyv4608 := &yyv4606[yyj4606]
					yyv4608.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4606 := 0
		for ; !r.CheckBreak(); yyj4606++ {

			if yyj4606 >= len(yyv4606) {
				yyv4606 = append(yyv4606, ContainerStatus{}) // var yyz4606 ContainerStatus
				yyc4606 = true
			}
			yyh4606.ElemContainerState(yyj4606)
			if yyj4606 < len(yyv4606) {
				if r.TryDecodeAsNil() {
					yyv4606[yyj4606] = ContainerStatus{}
				} else {
					yyv4609 := &yyv4606[yyj4606]
					yyv4609.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4606 < len(yyv4606) {
			yyv4606 = yyv4606[:yyj4606]
			yyc4606 = true
		} else if yyj4606 == 0 && yyv4606 == nil {
			yyv4606 = []ContainerStatus{}
			yyc4606 = true
		}
	}
	yyh4606.End()
	if yyc4606 {
		*v = yyv4606
	}
}

func (x codecSelfer1234) encSlicePodTemplate(v []PodTemplate, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4610 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4611 := &yyv4610
		yy4611.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePodTemplate(v *[]PodTemplate, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4612 := *v
	yyh4612, yyl4612 := z.DecSliceHelperStart()
	var yyc4612 bool
	if yyl4612 == 0 {
		if yyv4612 == nil {
			yyv4612 = []PodTemplate{}
			yyc4612 = true
		} else if len(yyv4612) != 0 {
			yyv4612 = yyv4612[:0]
			yyc4612 = true
		}
	} else if yyl4612 > 0 {
		var yyrr4612, yyrl4612 int
		var yyrt4612 bool
		if yyl4612 > cap(yyv4612) {

			yyrg4612 := len(yyv4612) > 0
			yyv24612 := yyv4612
			yyrl4612, yyrt4612 = z.DecInferLen(yyl4612, z.DecBasicHandle().MaxInitLen, 672)
			if yyrt4612 {
				if yyrl4612 <= cap(yyv4612) {
					yyv4612 = yyv4612[:yyrl4612]
				} else {
					yyv4612 = make([]PodTemplate, yyrl4612)
				}
			} else {
				yyv4612 = make([]PodTemplate, yyrl4612)
			}
			yyc4612 = true
			yyrr4612 = len(yyv4612)
			if yyrg4612 {
				copy(yyv4612, yyv24612)
			}
		} else if yyl4612 != len(yyv4612) {
			yyv4612 = yyv4612[:yyl4612]
			yyc4612 = true
		}
		yyj4612 := 0
		for ; yyj4612 < yyrr4612; yyj4612++ {
			yyh4612.ElemContainerState(yyj4612)
			if r.TryDecodeAsNil() {
				yyv4612[yyj4612] = PodTemplate{}
			} else {
				yyv4613 := &yyv4612[yyj4612]
				yyv4613.CodecDecodeSelf(d)
			}

		}
		if yyrt4612 {
			for ; yyj4612 < yyl4612; yyj4612++ {
				yyv4612 = append(yyv4612, PodTemplate{})
				yyh4612.ElemContainerState(yyj4612)
				if r.TryDecodeAsNil() {
					yyv4612[yyj4612] = PodTemplate{}
				} else {
					yyv4614 := &yyv4612[yyj4612]
					yyv4614.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4612 := 0
		for ; !r.CheckBreak(); yyj4612++ {

			if yyj4612 >= len(yyv4612) {
				yyv4612 = append(yyv4612, PodTemplate{}) // var yyz4612 PodTemplate
				yyc4612 = true
			}
			yyh4612.ElemContainerState(yyj4612)
			if yyj4612 < len(yyv4612) {
				if r.TryDecodeAsNil() {
					yyv4612[yyj4612] = PodTemplate{}
				} else {
					yyv4615 := &yyv4612[yyj4612]
					yyv4615.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4612 < len(yyv4612) {
			yyv4612 = yyv4612[:yyj4612]
			yyc4612 = true
		} else if yyj4612 == 0 && yyv4612 == nil {
			yyv4612 = []PodTemplate{}
			yyc4612 = true
		}
	}
	yyh4612.End()
	if yyc4612 {
		*v = yyv4612
	}
}

func (x codecSelfer1234) encSliceReplicationController(v []ReplicationController, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4616 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4617 := &yyv4616
		yy4617.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceReplicationController(v *[]ReplicationController, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4618 := *v
	yyh4618, yyl4618 := z.DecSliceHelperStart()
	var yyc4618 bool
	if yyl4618 == 0 {
		if yyv4618 == nil {
			yyv4618 = []ReplicationController{}
			yyc4618 = true
		} else if len(yyv4618) != 0 {
			yyv4618 = yyv4618[:0]
			yyc4618 = true
		}
	} else if yyl4618 > 0 {
		var yyrr4618, yyrl4618 int
		var yyrt4618 bool
		if yyl4618 > cap(yyv4618) {

			yyrg4618 := len(yyv4618) > 0
			yyv24618 := yyv4618
			yyrl4618, yyrt4618 = z.DecInferLen(yyl4618, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4618 {
				if yyrl4618 <= cap(yyv4618) {
					yyv4618 = yyv4618[:yyrl4618]
				} else {
					yyv4618 = make([]ReplicationController, yyrl4618)
				}
			} else {
				yyv4618 = make([]ReplicationController, yyrl4618)
			}
			yyc4618 = true
			yyrr4618 = len(yyv4618)
			if yyrg4618 {
				copy(yyv4618, yyv24618)
			}
		} else if yyl4618 != len(yyv4618) {
			yyv4618 = yyv4618[:yyl4618]
			yyc4618 = true
		}
		yyj4618 := 0
		for ; yyj4618 < yyrr4618; yyj4618++ {
			yyh4618.ElemContainerState(yyj4618)
			if r.TryDecodeAsNil() {
				yyv4618[yyj4618] = ReplicationController{}
			} else {
				yyv4619 := &yyv4618[yyj4618]
				yyv4619.CodecDecodeSelf(d)
			}

		}
		if yyrt4618 {
			for ; yyj4618 < yyl4618; yyj4618++ {
				yyv4618 = append(yyv4618, ReplicationController{})
				yyh4618.ElemContainerState(yyj4618)
				if r.TryDecodeAsNil() {
					yyv4618[yyj4618] = ReplicationController{}
				} else {
					yyv4620 := &yyv4618[yyj4618]
					yyv4620.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4618 := 0
		for ; !r.CheckBreak(); yyj4618++ {

			if yyj4618 >= len(yyv4618) {
				yyv4618 = append(yyv4618, ReplicationController{}) // var yyz4618 ReplicationController
				yyc4618 = true
			}
			yyh4618.ElemContainerState(yyj4618)
			if yyj4618 < len(yyv4618) {
				if r.TryDecodeAsNil() {
					yyv4618[yyj4618] = ReplicationController{}
				} else {
					yyv4621 := &yyv4618[yyj4618]
					yyv4621.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4618 < len(yyv4618) {
			yyv4618 = yyv4618[:yyj4618]
			yyc4618 = true
		} else if yyj4618 == 0 && yyv4618 == nil {
			yyv4618 = []ReplicationController{}
			yyc4618 = true
		}
	}
	yyh4618.End()
	if yyc4618 {
		*v = yyv4618
	}
}

func (x codecSelfer1234) encSliceService(v []Service, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4622 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4623 := &yyv4622
		yy4623.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceService(v *[]Service, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4624 := *v
	yyh4624, yyl4624 := z.DecSliceHelperStart()
	var yyc4624 bool
	if yyl4624 == 0 {
		if yyv4624 == nil {
			yyv4624 = []Service{}
			yyc4624 = true
		} else if len(yyv4624) != 0 {
			yyv4624 = yyv4624[:0]
			yyc4624 = true
		}
	} else if yyl4624 > 0 {
		var yyrr4624, yyrl4624 int
		var yyrt4624 bool
		if yyl4624 > cap(yyv4624) {

			yyrg4624 := len(yyv4624) > 0
			yyv24624 := yyv4624
			yyrl4624, yyrt4624 = z.DecInferLen(yyl4624, z.DecBasicHandle().MaxInitLen, 408)
			if yyrt4624 {
				if yyrl4624 <= cap(yyv4624) {
					yyv4624 = yyv4624[:yyrl4624]
				} else {
					yyv4624 = make([]Service, yyrl4624)
				}
			} else {
				yyv4624 = make([]Service, yyrl4624)
			}
			yyc4624 = true
			yyrr4624 = len(yyv4624)
			if yyrg4624 {
				copy(yyv4624, yyv24624)
			}
		} else if yyl4624 != len(yyv4624) {
			yyv4624 = yyv4624[:yyl4624]
			yyc4624 = true
		}
		yyj4624 := 0
		for ; yyj4624 < yyrr4624; yyj4624++ {
			yyh4624.ElemContainerState(yyj4624)
			if r.TryDecodeAsNil() {
				yyv4624[yyj4624] = Service{}
			} else {
				yyv4625 := &yyv4624[yyj4624]
				yyv4625.CodecDecodeSelf(d)
			}

		}
		if yyrt4624 {
			for ; yyj4624 < yyl4624; yyj4624++ {
				yyv4624 = append(yyv4624, Service{})
				yyh4624.ElemContainerState(yyj4624)
				if r.TryDecodeAsNil() {
					yyv4624[yyj4624] = Service{}
				} else {
					yyv4626 := &yyv4624[yyj4624]
					yyv4626.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4624 := 0
		for ; !r.CheckBreak(); yyj4624++ {

			if yyj4624 >= len(yyv4624) {
				yyv4624 = append(yyv4624, Service{}) // var yyz4624 Service
				yyc4624 = true
			}
			yyh4624.ElemContainerState(yyj4624)
			if yyj4624 < len(yyv4624) {
				if r.TryDecodeAsNil() {
					yyv4624[yyj4624] = Service{}
				} else {
					yyv4627 := &yyv4624[yyj4624]
					yyv4627.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4624 < len(yyv4624) {
			yyv4624 = yyv4624[:yyj4624]
			yyc4624 = true
		} else if yyj4624 == 0 && yyv4624 == nil {
			yyv4624 = []Service{}
			yyc4624 = true
		}
	}
	yyh4624.End()
	if yyc4624 {
		*v = yyv4624
	}
}

func (x codecSelfer1234) encSliceLoadBalancerIngress(v []LoadBalancerIngress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4628 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4629 := &yyv4628
		yy4629.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLoadBalancerIngress(v *[]LoadBalancerIngress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4630 := *v
	yyh4630, yyl4630 := z.DecSliceHelperStart()
	var yyc4630 bool
	if yyl4630 == 0 {
		if yyv4630 == nil {
			yyv4630 = []LoadBalancerIngress{}
			yyc4630 = true
		} else if len(yyv4630) != 0 {
			yyv4630 = yyv4630[:0]
			yyc4630 = true
		}
	} else if yyl4630 > 0 {
		var yyrr4630, yyrl4630 int
		var yyrt4630 bool
		if yyl4630 > cap(yyv4630) {

			yyrg4630 := len(yyv4630) > 0
			yyv24630 := yyv4630
			yyrl4630, yyrt4630 = z.DecInferLen(yyl4630, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4630 {
				if yyrl4630 <= cap(yyv4630) {
					yyv4630 = yyv4630[:yyrl4630]
				} else {
					yyv4630 = make([]LoadBalancerIngress, yyrl4630)
				}
			} else {
				yyv4630 = make([]LoadBalancerIngress, yyrl4630)
			}
			yyc4630 = true
			yyrr4630 = len(yyv4630)
			if yyrg4630 {
				copy(yyv4630, yyv24630)
			}
		} else if yyl4630 != len(yyv4630) {
			yyv4630 = yyv4630[:yyl4630]
			yyc4630 = true
		}
		yyj4630 := 0
		for ; yyj4630 < yyrr4630; yyj4630++ {
			yyh4630.ElemContainerState(yyj4630)
			if r.TryDecodeAsNil() {
				yyv4630[yyj4630] = LoadBalancerIngress{}
			} else {
				yyv4631 := &yyv4630[yyj4630]
				yyv4631.CodecDecodeSelf(d)
			}

		}
		if yyrt4630 {
			for ; yyj4630 < yyl4630; yyj4630++ {
				yyv4630 = append(yyv4630, LoadBalancerIngress{})
				yyh4630.ElemContainerState(yyj4630)
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = LoadBalancerIngress{}
				} else {
					yyv4632 := &yyv4630[yyj4630]
					yyv4632.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4630 := 0
		for ; !r.CheckBreak(); yyj4630++ {

			if yyj4630 >= len(yyv4630) {
				yyv4630 = append(yyv4630, LoadBalancerIngress{}) // var yyz4630 LoadBalancerIngress
				yyc4630 = true
			}
			yyh4630.ElemContainerState(yyj4630)
			if yyj4630 < len(yyv4630) {
				if r.TryDecodeAsNil() {
					yyv4630[yyj4630] = LoadBalancerIngress{}
				} else {
					yyv4633 := &yyv4630[yyj4630]
					yyv4633.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4630 < len(yyv4630) {
			yyv4630 = yyv4630[:yyj4630]
			yyc4630 = true
		} else if yyj4630 == 0 && yyv4630 == nil {
			yyv4630 = []LoadBalancerIngress{}
			yyc4630 = true
		}
	}
	yyh4630.End()
	if yyc4630 {
		*v = yyv4630
	}
}

func (x codecSelfer1234) encSliceServicePort(v []ServicePort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4634 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4635 := &yyv4634
		yy4635.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServicePort(v *[]ServicePort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4636 := *v
	yyh4636, yyl4636 := z.DecSliceHelperStart()
	var yyc4636 bool
	if yyl4636 == 0 {
		if yyv4636 == nil {
			yyv4636 = []ServicePort{}
			yyc4636 = true
		} else if len(yyv4636) != 0 {
			yyv4636 = yyv4636[:0]
			yyc4636 = true
		}
	} else if yyl4636 > 0 {
		var yyrr4636, yyrl4636 int
		var yyrt4636 bool
		if yyl4636 > cap(yyv4636) {

			yyrg4636 := len(yyv4636) > 0
			yyv24636 := yyv4636
			yyrl4636, yyrt4636 = z.DecInferLen(yyl4636, z.DecBasicHandle().MaxInitLen, 80)
			if yyrt4636 {
				if yyrl4636 <= cap(yyv4636) {
					yyv4636 = yyv4636[:yyrl4636]
				} else {
					yyv4636 = make([]ServicePort, yyrl4636)
				}
			} else {
				yyv4636 = make([]ServicePort, yyrl4636)
			}
			yyc4636 = true
			yyrr4636 = len(yyv4636)
			if yyrg4636 {
				copy(yyv4636, yyv24636)
			}
		} else if yyl4636 != len(yyv4636) {
			yyv4636 = yyv4636[:yyl4636]
			yyc4636 = true
		}
		yyj4636 := 0
		for ; yyj4636 < yyrr4636; yyj4636++ {
			yyh4636.ElemContainerState(yyj4636)
			if r.TryDecodeAsNil() {
				yyv4636[yyj4636] = ServicePort{}
			} else {
				yyv4637 := &yyv4636[yyj4636]
				yyv4637.CodecDecodeSelf(d)
			}

		}
		if yyrt4636 {
			for ; yyj4636 < yyl4636; yyj4636++ {
				yyv4636 = append(yyv4636, ServicePort{})
				yyh4636.ElemContainerState(yyj4636)
				if r.TryDecodeAsNil() {
					yyv4636[yyj4636] = ServicePort{}
				} else {
					yyv4638 := &yyv4636[yyj4636]
					yyv4638.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4636 := 0
		for ; !r.CheckBreak(); yyj4636++ {

			if yyj4636 >= len(yyv4636) {
				yyv4636 = append(yyv4636, ServicePort{}) // var yyz4636 ServicePort
				yyc4636 = true
			}
			yyh4636.ElemContainerState(yyj4636)
			if yyj4636 < len(yyv4636) {
				if r.TryDecodeAsNil() {
					yyv4636[yyj4636] = ServicePort{}
				} else {
					yyv4639 := &yyv4636[yyj4636]
					yyv4639.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4636 < len(yyv4636) {
			yyv4636 = yyv4636[:yyj4636]
			yyc4636 = true
		} else if yyj4636 == 0 && yyv4636 == nil {
			yyv4636 = []ServicePort{}
			yyc4636 = true
		}
	}
	yyh4636.End()
	if yyc4636 {
		*v = yyv4636
	}
}

func (x codecSelfer1234) encSliceObjectReference(v []ObjectReference, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4640 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4641 := &yyv4640
		yy4641.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceObjectReference(v *[]ObjectReference, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4642 := *v
	yyh4642, yyl4642 := z.DecSliceHelperStart()
	var yyc4642 bool
	if yyl4642 == 0 {
		if yyv4642 == nil {
			yyv4642 = []ObjectReference{}
			yyc4642 = true
		} else if len(yyv4642) != 0 {
			yyv4642 = yyv4642[:0]
			yyc4642 = true
		}
	} else if yyl4642 > 0 {
		var yyrr4642, yyrl4642 int
		var yyrt4642 bool
		if yyl4642 > cap(yyv4642) {

			yyrg4642 := len(yyv4642) > 0
			yyv24642 := yyv4642
			yyrl4642, yyrt4642 = z.DecInferLen(yyl4642, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4642 {
				if yyrl4642 <= cap(yyv4642) {
					yyv4642 = yyv4642[:yyrl4642]
				} else {
					yyv4642 = make([]ObjectReference, yyrl4642)
				}
			} else {
				yyv4642 = make([]ObjectReference, yyrl4642)
			}
			yyc4642 = true
			yyrr4642 = len(yyv4642)
			if yyrg4642 {
				copy(yyv4642, yyv24642)
			}
		} else if yyl4642 != len(yyv4642) {
			yyv4642 = yyv4642[:yyl4642]
			yyc4642 = true
		}
		yyj4642 := 0
		for ; yyj4642 < yyrr4642; yyj4642++ {
			yyh4642.ElemContainerState(yyj4642)
			if r.TryDecodeAsNil() {
				yyv4642[yyj4642] = ObjectReference{}
			} else {
				yyv4643 := &yyv4642[yyj4642]
				yyv4643.CodecDecodeSelf(d)
			}

		}
		if yyrt4642 {
			for ; yyj4642 < yyl4642; yyj4642++ {
				yyv4642 = append(yyv4642, ObjectReference{})
				yyh4642.ElemContainerState(yyj4642)
				if r.TryDecodeAsNil() {
					yyv4642[yyj4642] = ObjectReference{}
				} else {
					yyv4644 := &yyv4642[yyj4642]
					yyv4644.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4642 := 0
		for ; !r.CheckBreak(); yyj4642++ {

			if yyj4642 >= len(yyv4642) {
				yyv4642 = append(yyv4642, ObjectReference{}) // var yyz4642 ObjectReference
				yyc4642 = true
			}
			yyh4642.ElemContainerState(yyj4642)
			if yyj4642 < len(yyv4642) {
				if r.TryDecodeAsNil() {
					yyv4642[yyj4642] = ObjectReference{}
				} else {
					yyv4645 := &yyv4642[yyj4642]
					yyv4645.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4642 < len(yyv4642) {
			yyv4642 = yyv4642[:yyj4642]
			yyc4642 = true
		} else if yyj4642 == 0 && yyv4642 == nil {
			yyv4642 = []ObjectReference{}
			yyc4642 = true
		}
	}
	yyh4642.End()
	if yyc4642 {
		*v = yyv4642
	}
}

func (x codecSelfer1234) encSliceServiceAccount(v []ServiceAccount, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4646 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4647 := &yyv4646
		yy4647.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceServiceAccount(v *[]ServiceAccount, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4648 := *v
	yyh4648, yyl4648 := z.DecSliceHelperStart()
	var yyc4648 bool
	if yyl4648 == 0 {
		if yyv4648 == nil {
			yyv4648 = []ServiceAccount{}
			yyc4648 = true
		} else if len(yyv4648) != 0 {
			yyv4648 = yyv4648[:0]
			yyc4648 = true
		}
	} else if yyl4648 > 0 {
		var yyrr4648, yyrl4648 int
		var yyrt4648 bool
		if yyl4648 > cap(yyv4648) {

			yyrg4648 := len(yyv4648) > 0
			yyv24648 := yyv4648
			yyrl4648, yyrt4648 = z.DecInferLen(yyl4648, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4648 {
				if yyrl4648 <= cap(yyv4648) {
					yyv4648 = yyv4648[:yyrl4648]
				} else {
					yyv4648 = make([]ServiceAccount, yyrl4648)
				}
			} else {
				yyv4648 = make([]ServiceAccount, yyrl4648)
			}
			yyc4648 = true
			yyrr4648 = len(yyv4648)
			if yyrg4648 {
				copy(yyv4648, yyv24648)
			}
		} else if yyl4648 != len(yyv4648) {
			yyv4648 = yyv4648[:yyl4648]
			yyc4648 = true
		}
		yyj4648 := 0
		for ; yyj4648 < yyrr4648; yyj4648++ {
			yyh4648.ElemContainerState(yyj4648)
			if r.TryDecodeAsNil() {
				yyv4648[yyj4648] = ServiceAccount{}
			} else {
				yyv4649 := &yyv4648[yyj4648]
				yyv4649.CodecDecodeSelf(d)
			}

		}
		if yyrt4648 {
			for ; yyj4648 < yyl4648; yyj4648++ {
				yyv4648 = append(yyv4648, ServiceAccount{})
				yyh4648.ElemContainerState(yyj4648)
				if r.TryDecodeAsNil() {
					yyv4648[yyj4648] = ServiceAccount{}
				} else {
					yyv4650 := &yyv4648[yyj4648]
					yyv4650.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4648 := 0
		for ; !r.CheckBreak(); yyj4648++ {

			if yyj4648 >= len(yyv4648) {
				yyv4648 = append(yyv4648, ServiceAccount{}) // var yyz4648 ServiceAccount
				yyc4648 = true
			}
			yyh4648.ElemContainerState(yyj4648)
			if yyj4648 < len(yyv4648) {
				if r.TryDecodeAsNil() {
					yyv4648[yyj4648] = ServiceAccount{}
				} else {
					yyv4651 := &yyv4648[yyj4648]
					yyv4651.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4648 < len(yyv4648) {
			yyv4648 = yyv4648[:yyj4648]
			yyc4648 = true
		} else if yyj4648 == 0 && yyv4648 == nil {
			yyv4648 = []ServiceAccount{}
			yyc4648 = true
		}
	}
	yyh4648.End()
	if yyc4648 {
		*v = yyv4648
	}
}

func (x codecSelfer1234) encSliceEndpointSubset(v []EndpointSubset, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4652 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4653 := &yyv4652
		yy4653.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointSubset(v *[]EndpointSubset, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4654 := *v
	yyh4654, yyl4654 := z.DecSliceHelperStart()
	var yyc4654 bool
	if yyl4654 == 0 {
		if yyv4654 == nil {
			yyv4654 = []EndpointSubset{}
			yyc4654 = true
		} else if len(yyv4654) != 0 {
			yyv4654 = yyv4654[:0]
			yyc4654 = true
		}
	} else if yyl4654 > 0 {
		var yyrr4654, yyrl4654 int
		var yyrt4654 bool
		if yyl4654 > cap(yyv4654) {

			yyrg4654 := len(yyv4654) > 0
			yyv24654 := yyv4654
			yyrl4654, yyrt4654 = z.DecInferLen(yyl4654, z.DecBasicHandle().MaxInitLen, 72)
			if yyrt4654 {
				if yyrl4654 <= cap(yyv4654) {
					yyv4654 = yyv4654[:yyrl4654]
				} else {
					yyv4654 = make([]EndpointSubset, yyrl4654)
				}
			} else {
				yyv4654 = make([]EndpointSubset, yyrl4654)
			}
			yyc4654 = true
			yyrr4654 = len(yyv4654)
			if yyrg4654 {
				copy(yyv4654, yyv24654)
			}
		} else if yyl4654 != len(yyv4654) {
			yyv4654 = yyv4654[:yyl4654]
			yyc4654 = true
		}
		yyj4654 := 0
		for ; yyj4654 < yyrr4654; yyj4654++ {
			yyh4654.ElemContainerState(yyj4654)
			if r.TryDecodeAsNil() {
				yyv4654[yyj4654] = EndpointSubset{}
			} else {
				yyv4655 := &yyv4654[yyj4654]
				yyv4655.CodecDecodeSelf(d)
			}

		}
		if yyrt4654 {
			for ; yyj4654 < yyl4654; yyj4654++ {
				yyv4654 = append(yyv4654, EndpointSubset{})
				yyh4654.ElemContainerState(yyj4654)
				if r.TryDecodeAsNil() {
					yyv4654[yyj4654] = EndpointSubset{}
				} else {
					yyv4656 := &yyv4654[yyj4654]
					yyv4656.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4654 := 0
		for ; !r.CheckBreak(); yyj4654++ {

			if yyj4654 >= len(yyv4654) {
				yyv4654 = append(yyv4654, EndpointSubset{}) // var yyz4654 EndpointSubset
				yyc4654 = true
			}
			yyh4654.ElemContainerState(yyj4654)
			if yyj4654 < len(yyv4654) {
				if r.TryDecodeAsNil() {
					yyv4654[yyj4654] = EndpointSubset{}
				} else {
					yyv4657 := &yyv4654[yyj4654]
					yyv4657.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4654 < len(yyv4654) {
			yyv4654 = yyv4654[:yyj4654]
			yyc4654 = true
		} else if yyj4654 == 0 && yyv4654 == nil {
			yyv4654 = []EndpointSubset{}
			yyc4654 = true
		}
	}
	yyh4654.End()
	if yyc4654 {
		*v = yyv4654
	}
}

func (x codecSelfer1234) encSliceEndpointAddress(v []EndpointAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4658 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4659 := &yyv4658
		yy4659.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointAddress(v *[]EndpointAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4660 := *v
	yyh4660, yyl4660 := z.DecSliceHelperStart()
	var yyc4660 bool
	if yyl4660 == 0 {
		if yyv4660 == nil {
			yyv4660 = []EndpointAddress{}
			yyc4660 = true
		} else if len(yyv4660) != 0 {
			yyv4660 = yyv4660[:0]
			yyc4660 = true
		}
	} else if yyl4660 > 0 {
		var yyrr4660, yyrl4660 int
		var yyrt4660 bool
		if yyl4660 > cap(yyv4660) {

			yyrg4660 := len(yyv4660) > 0
			yyv24660 := yyv4660
			yyrl4660, yyrt4660 = z.DecInferLen(yyl4660, z.DecBasicHandle().MaxInitLen, 48)
			if yyrt4660 {
				if yyrl4660 <= cap(yyv4660) {
					yyv4660 = yyv4660[:yyrl4660]
				} else {
					yyv4660 = make([]EndpointAddress, yyrl4660)
				}
			} else {
				yyv4660 = make([]EndpointAddress, yyrl4660)
			}
			yyc4660 = true
			yyrr4660 = len(yyv4660)
			if yyrg4660 {
				copy(yyv4660, yyv24660)
			}
		} else if yyl4660 != len(yyv4660) {
			yyv4660 = yyv4660[:yyl4660]
			yyc4660 = true
		}
		yyj4660 := 0
		for ; yyj4660 < yyrr4660; yyj4660++ {
			yyh4660.ElemContainerState(yyj4660)
			if r.TryDecodeAsNil() {
				yyv4660[yyj4660] = EndpointAddress{}
			} else {
				yyv4661 := &yyv4660[yyj4660]
				yyv4661.CodecDecodeSelf(d)
			}

		}
		if yyrt4660 {
			for ; yyj4660 < yyl4660; yyj4660++ {
				yyv4660 = append(yyv4660, EndpointAddress{})
				yyh4660.ElemContainerState(yyj4660)
				if r.TryDecodeAsNil() {
					yyv4660[yyj4660] = EndpointAddress{}
				} else {
					yyv4662 := &yyv4660[yyj4660]
					yyv4662.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4660 := 0
		for ; !r.CheckBreak(); yyj4660++ {

			if yyj4660 >= len(yyv4660) {
				yyv4660 = append(yyv4660, EndpointAddress{}) // var yyz4660 EndpointAddress
				yyc4660 = true
			}
			yyh4660.ElemContainerState(yyj4660)
			if yyj4660 < len(yyv4660) {
				if r.TryDecodeAsNil() {
					yyv4660[yyj4660] = EndpointAddress{}
				} else {
					yyv4663 := &yyv4660[yyj4660]
					yyv4663.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4660 < len(yyv4660) {
			yyv4660 = yyv4660[:yyj4660]
			yyc4660 = true
		} else if yyj4660 == 0 && yyv4660 == nil {
			yyv4660 = []EndpointAddress{}
			yyc4660 = true
		}
	}
	yyh4660.End()
	if yyc4660 {
		*v = yyv4660
	}
}

func (x codecSelfer1234) encSliceEndpointPort(v []EndpointPort, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4664 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4665 := &yyv4664
		yy4665.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpointPort(v *[]EndpointPort, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4666 := *v
	yyh4666, yyl4666 := z.DecSliceHelperStart()
	var yyc4666 bool
	if yyl4666 == 0 {
		if yyv4666 == nil {
			yyv4666 = []EndpointPort{}
			yyc4666 = true
		} else if len(yyv4666) != 0 {
			yyv4666 = yyv4666[:0]
			yyc4666 = true
		}
	} else if yyl4666 > 0 {
		var yyrr4666, yyrl4666 int
		var yyrt4666 bool
		if yyl4666 > cap(yyv4666) {

			yyrg4666 := len(yyv4666) > 0
			yyv24666 := yyv4666
			yyrl4666, yyrt4666 = z.DecInferLen(yyl4666, z.DecBasicHandle().MaxInitLen, 40)
			if yyrt4666 {
				if yyrl4666 <= cap(yyv4666) {
					yyv4666 = yyv4666[:yyrl4666]
				} else {
					yyv4666 = make([]EndpointPort, yyrl4666)
				}
			} else {
				yyv4666 = make([]EndpointPort, yyrl4666)
			}
			yyc4666 = true
			yyrr4666 = len(yyv4666)
			if yyrg4666 {
				copy(yyv4666, yyv24666)
			}
		} else if yyl4666 != len(yyv4666) {
			yyv4666 = yyv4666[:yyl4666]
			yyc4666 = true
		}
		yyj4666 := 0
		for ; yyj4666 < yyrr4666; yyj4666++ {
			yyh4666.ElemContainerState(yyj4666)
			if r.TryDecodeAsNil() {
				yyv4666[yyj4666] = EndpointPort{}
			} else {
				yyv4667 := &yyv4666[yyj4666]
				yyv4667.CodecDecodeSelf(d)
			}

		}
		if yyrt4666 {
			for ; yyj4666 < yyl4666; yyj4666++ {
				yyv4666 = append(yyv4666, EndpointPort{})
				yyh4666.ElemContainerState(yyj4666)
				if r.TryDecodeAsNil() {
					yyv4666[yyj4666] = EndpointPort{}
				} else {
					yyv4668 := &yyv4666[yyj4666]
					yyv4668.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4666 := 0
		for ; !r.CheckBreak(); yyj4666++ {

			if yyj4666 >= len(yyv4666) {
				yyv4666 = append(yyv4666, EndpointPort{}) // var yyz4666 EndpointPort
				yyc4666 = true
			}
			yyh4666.ElemContainerState(yyj4666)
			if yyj4666 < len(yyv4666) {
				if r.TryDecodeAsNil() {
					yyv4666[yyj4666] = EndpointPort{}
				} else {
					yyv4669 := &yyv4666[yyj4666]
					yyv4669.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4666 < len(yyv4666) {
			yyv4666 = yyv4666[:yyj4666]
			yyc4666 = true
		} else if yyj4666 == 0 && yyv4666 == nil {
			yyv4666 = []EndpointPort{}
			yyc4666 = true
		}
	}
	yyh4666.End()
	if yyc4666 {
		*v = yyv4666
	}
}

func (x codecSelfer1234) encSliceEndpoints(v []Endpoints, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4670 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4671 := &yyv4670
		yy4671.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEndpoints(v *[]Endpoints, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4672 := *v
	yyh4672, yyl4672 := z.DecSliceHelperStart()
	var yyc4672 bool
	if yyl4672 == 0 {
		if yyv4672 == nil {
			yyv4672 = []Endpoints{}
			yyc4672 = true
		} else if len(yyv4672) != 0 {
			yyv4672 = yyv4672[:0]
			yyc4672 = true
		}
	} else if yyl4672 > 0 {
		var yyrr4672, yyrl4672 int
		var yyrt4672 bool
		if yyl4672 > cap(yyv4672) {

			yyrg4672 := len(yyv4672) > 0
			yyv24672 := yyv4672
			yyrl4672, yyrt4672 = z.DecInferLen(yyl4672, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4672 {
				if yyrl4672 <= cap(yyv4672) {
					yyv4672 = yyv4672[:yyrl4672]
				} else {
					yyv4672 = make([]Endpoints, yyrl4672)
				}
			} else {
				yyv4672 = make([]Endpoints, yyrl4672)
			}
			yyc4672 = true
			yyrr4672 = len(yyv4672)
			if yyrg4672 {
				copy(yyv4672, yyv24672)
			}
		} else if yyl4672 != len(yyv4672) {
			yyv4672 = yyv4672[:yyl4672]
			yyc4672 = true
		}
		yyj4672 := 0
		for ; yyj4672 < yyrr4672; yyj4672++ {
			yyh4672.ElemContainerState(yyj4672)
			if r.TryDecodeAsNil() {
				yyv4672[yyj4672] = Endpoints{}
			} else {
				yyv4673 := &yyv4672[yyj4672]
				yyv4673.CodecDecodeSelf(d)
			}

		}
		if yyrt4672 {
			for ; yyj4672 < yyl4672; yyj4672++ {
				yyv4672 = append(yyv4672, Endpoints{})
				yyh4672.ElemContainerState(yyj4672)
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = Endpoints{}
				} else {
					yyv4674 := &yyv4672[yyj4672]
					yyv4674.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4672 := 0
		for ; !r.CheckBreak(); yyj4672++ {

			if yyj4672 >= len(yyv4672) {
				yyv4672 = append(yyv4672, Endpoints{}) // var yyz4672 Endpoints
				yyc4672 = true
			}
			yyh4672.ElemContainerState(yyj4672)
			if yyj4672 < len(yyv4672) {
				if r.TryDecodeAsNil() {
					yyv4672[yyj4672] = Endpoints{}
				} else {
					yyv4675 := &yyv4672[yyj4672]
					yyv4675.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4672 < len(yyv4672) {
			yyv4672 = yyv4672[:yyj4672]
			yyc4672 = true
		} else if yyj4672 == 0 && yyv4672 == nil {
			yyv4672 = []Endpoints{}
			yyc4672 = true
		}
	}
	yyh4672.End()
	if yyc4672 {
		*v = yyv4672
	}
}

func (x codecSelfer1234) encSliceNodeCondition(v []NodeCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4676 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4677 := &yyv4676
		yy4677.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeCondition(v *[]NodeCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4678 := *v
	yyh4678, yyl4678 := z.DecSliceHelperStart()
	var yyc4678 bool
	if yyl4678 == 0 {
		if yyv4678 == nil {
			yyv4678 = []NodeCondition{}
			yyc4678 = true
		} else if len(yyv4678) != 0 {
			yyv4678 = yyv4678[:0]
			yyc4678 = true
		}
	} else if yyl4678 > 0 {
		var yyrr4678, yyrl4678 int
		var yyrt4678 bool
		if yyl4678 > cap(yyv4678) {

			yyrg4678 := len(yyv4678) > 0
			yyv24678 := yyv4678
			yyrl4678, yyrt4678 = z.DecInferLen(yyl4678, z.DecBasicHandle().MaxInitLen, 112)
			if yyrt4678 {
				if yyrl4678 <= cap(yyv4678) {
					yyv4678 = yyv4678[:yyrl4678]
				} else {
					yyv4678 = make([]NodeCondition, yyrl4678)
				}
			} else {
				yyv4678 = make([]NodeCondition, yyrl4678)
			}
			yyc4678 = true
			yyrr4678 = len(yyv4678)
			if yyrg4678 {
				copy(yyv4678, yyv24678)
			}
		} else if yyl4678 != len(yyv4678) {
			yyv4678 = yyv4678[:yyl4678]
			yyc4678 = true
		}
		yyj4678 := 0
		for ; yyj4678 < yyrr4678; yyj4678++ {
			yyh4678.ElemContainerState(yyj4678)
			if r.TryDecodeAsNil() {
				yyv4678[yyj4678] = NodeCondition{}
			} else {
				yyv4679 := &yyv4678[yyj4678]
				yyv4679.CodecDecodeSelf(d)
			}

		}
		if yyrt4678 {
			for ; yyj4678 < yyl4678; yyj4678++ {
				yyv4678 = append(yyv4678, NodeCondition{})
				yyh4678.ElemContainerState(yyj4678)
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = NodeCondition{}
				} else {
					yyv4680 := &yyv4678[yyj4678]
					yyv4680.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4678 := 0
		for ; !r.CheckBreak(); yyj4678++ {

			if yyj4678 >= len(yyv4678) {
				yyv4678 = append(yyv4678, NodeCondition{}) // var yyz4678 NodeCondition
				yyc4678 = true
			}
			yyh4678.ElemContainerState(yyj4678)
			if yyj4678 < len(yyv4678) {
				if r.TryDecodeAsNil() {
					yyv4678[yyj4678] = NodeCondition{}
				} else {
					yyv4681 := &yyv4678[yyj4678]
					yyv4681.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4678 < len(yyv4678) {
			yyv4678 = yyv4678[:yyj4678]
			yyc4678 = true
		} else if yyj4678 == 0 && yyv4678 == nil {
			yyv4678 = []NodeCondition{}
			yyc4678 = true
		}
	}
	yyh4678.End()
	if yyc4678 {
		*v = yyv4678
	}
}

func (x codecSelfer1234) encSliceNodeAddress(v []NodeAddress, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4682 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4683 := &yyv4682
		yy4683.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNodeAddress(v *[]NodeAddress, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4684 := *v
	yyh4684, yyl4684 := z.DecSliceHelperStart()
	var yyc4684 bool
	if yyl4684 == 0 {
		if yyv4684 == nil {
			yyv4684 = []NodeAddress{}
			yyc4684 = true
		} else if len(yyv4684) != 0 {
			yyv4684 = yyv4684[:0]
			yyc4684 = true
		}
	} else if yyl4684 > 0 {
		var yyrr4684, yyrl4684 int
		var yyrt4684 bool
		if yyl4684 > cap(yyv4684) {

			yyrg4684 := len(yyv4684) > 0
			yyv24684 := yyv4684
			yyrl4684, yyrt4684 = z.DecInferLen(yyl4684, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4684 {
				if yyrl4684 <= cap(yyv4684) {
					yyv4684 = yyv4684[:yyrl4684]
				} else {
					yyv4684 = make([]NodeAddress, yyrl4684)
				}
			} else {
				yyv4684 = make([]NodeAddress, yyrl4684)
			}
			yyc4684 = true
			yyrr4684 = len(yyv4684)
			if yyrg4684 {
				copy(yyv4684, yyv24684)
			}
		} else if yyl4684 != len(yyv4684) {
			yyv4684 = yyv4684[:yyl4684]
			yyc4684 = true
		}
		yyj4684 := 0
		for ; yyj4684 < yyrr4684; yyj4684++ {
			yyh4684.ElemContainerState(yyj4684)
			if r.TryDecodeAsNil() {
				yyv4684[yyj4684] = NodeAddress{}
			} else {
				yyv4685 := &yyv4684[yyj4684]
				yyv4685.CodecDecodeSelf(d)
			}

		}
		if yyrt4684 {
			for ; yyj4684 < yyl4684; yyj4684++ {
				yyv4684 = append(yyv4684, NodeAddress{})
				yyh4684.ElemContainerState(yyj4684)
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = NodeAddress{}
				} else {
					yyv4686 := &yyv4684[yyj4684]
					yyv4686.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4684 := 0
		for ; !r.CheckBreak(); yyj4684++ {

			if yyj4684 >= len(yyv4684) {
				yyv4684 = append(yyv4684, NodeAddress{}) // var yyz4684 NodeAddress
				yyc4684 = true
			}
			yyh4684.ElemContainerState(yyj4684)
			if yyj4684 < len(yyv4684) {
				if r.TryDecodeAsNil() {
					yyv4684[yyj4684] = NodeAddress{}
				} else {
					yyv4687 := &yyv4684[yyj4684]
					yyv4687.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4684 < len(yyv4684) {
			yyv4684 = yyv4684[:yyj4684]
			yyc4684 = true
		} else if yyj4684 == 0 && yyv4684 == nil {
			yyv4684 = []NodeAddress{}
			yyc4684 = true
		}
	}
	yyh4684.End()
	if yyc4684 {
		*v = yyv4684
	}
}

func (x codecSelfer1234) encSliceContainerImage(v []ContainerImage, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4688 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4689 := &yyv4688
		yy4689.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceContainerImage(v *[]ContainerImage, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4690 := *v
	yyh4690, yyl4690 := z.DecSliceHelperStart()
	var yyc4690 bool
	if yyl4690 == 0 {
		if yyv4690 == nil {
			yyv4690 = []ContainerImage{}
			yyc4690 = true
		} else if len(yyv4690) != 0 {
			yyv4690 = yyv4690[:0]
			yyc4690 = true
		}
	} else if yyl4690 > 0 {
		var yyrr4690, yyrl4690 int
		var yyrt4690 bool
		if yyl4690 > cap(yyv4690) {

			yyrg4690 := len(yyv4690) > 0
			yyv24690 := yyv4690
			yyrl4690, yyrt4690 = z.DecInferLen(yyl4690, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4690 {
				if yyrl4690 <= cap(yyv4690) {
					yyv4690 = yyv4690[:yyrl4690]
				} else {
					yyv4690 = make([]ContainerImage, yyrl4690)
				}
			} else {
				yyv4690 = make([]ContainerImage, yyrl4690)
			}
			yyc4690 = true
			yyrr4690 = len(yyv4690)
			if yyrg4690 {
				copy(yyv4690, yyv24690)
			}
		} else if yyl4690 != len(yyv4690) {
			yyv4690 = yyv4690[:yyl4690]
			yyc4690 = true
		}
		yyj4690 := 0
		for ; yyj4690 < yyrr4690; yyj4690++ {
			yyh4690.ElemContainerState(yyj4690)
			if r.TryDecodeAsNil() {
				yyv4690[yyj4690] = ContainerImage{}
			} else {
				yyv4691 := &yyv4690[yyj4690]
				yyv4691.CodecDecodeSelf(d)
			}

		}
		if yyrt4690 {
			for ; yyj4690 < yyl4690; yyj4690++ {
				yyv4690 = append(yyv4690, ContainerImage{})
				yyh4690.ElemContainerState(yyj4690)
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = ContainerImage{}
				} else {
					yyv4692 := &yyv4690[yyj4690]
					yyv4692.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4690 := 0
		for ; !r.CheckBreak(); yyj4690++ {

			if yyj4690 >= len(yyv4690) {
				yyv4690 = append(yyv4690, ContainerImage{}) // var yyz4690 ContainerImage
				yyc4690 = true
			}
			yyh4690.ElemContainerState(yyj4690)
			if yyj4690 < len(yyv4690) {
				if r.TryDecodeAsNil() {
					yyv4690[yyj4690] = ContainerImage{}
				} else {
					yyv4693 := &yyv4690[yyj4690]
					yyv4693.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4690 < len(yyv4690) {
			yyv4690 = yyv4690[:yyj4690]
			yyc4690 = true
		} else if yyj4690 == 0 && yyv4690 == nil {
			yyv4690 = []ContainerImage{}
			yyc4690 = true
		}
	}
	yyh4690.End()
	if yyc4690 {
		*v = yyv4690
	}
}

func (x codecSelfer1234) encSliceUniqueVolumeName(v []UniqueVolumeName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4694 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4694.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceUniqueVolumeName(v *[]UniqueVolumeName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4695 := *v
	yyh4695, yyl4695 := z.DecSliceHelperStart()
	var yyc4695 bool
	if yyl4695 == 0 {
		if yyv4695 == nil {
			yyv4695 = []UniqueVolumeName{}
			yyc4695 = true
		} else if len(yyv4695) != 0 {
			yyv4695 = yyv4695[:0]
			yyc4695 = true
		}
	} else if yyl4695 > 0 {
		var yyrr4695, yyrl4695 int
		var yyrt4695 bool
		if yyl4695 > cap(yyv4695) {

			yyrl4695, yyrt4695 = z.DecInferLen(yyl4695, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4695 {
				if yyrl4695 <= cap(yyv4695) {
					yyv4695 = yyv4695[:yyrl4695]
				} else {
					yyv4695 = make([]UniqueVolumeName, yyrl4695)
				}
			} else {
				yyv4695 = make([]UniqueVolumeName, yyrl4695)
			}
			yyc4695 = true
			yyrr4695 = len(yyv4695)
		} else if yyl4695 != len(yyv4695) {
			yyv4695 = yyv4695[:yyl4695]
			yyc4695 = true
		}
		yyj4695 := 0
		for ; yyj4695 < yyrr4695; yyj4695++ {
			yyh4695.ElemContainerState(yyj4695)
			if r.TryDecodeAsNil() {
				yyv4695[yyj4695] = ""
			} else {
				yyv4695[yyj4695] = UniqueVolumeName(r.DecodeString())
			}

		}
		if yyrt4695 {
			for ; yyj4695 < yyl4695; yyj4695++ {
				yyv4695 = append(yyv4695, "")
				yyh4695.ElemContainerState(yyj4695)
				if r.TryDecodeAsNil() {
					yyv4695[yyj4695] = ""
				} else {
					yyv4695[yyj4695] = UniqueVolumeName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4695 := 0
		for ; !r.CheckBreak(); yyj4695++ {

			if yyj4695 >= len(yyv4695) {
				yyv4695 = append(yyv4695, "") // var yyz4695 UniqueVolumeName
				yyc4695 = true
			}
			yyh4695.ElemContainerState(yyj4695)
			if yyj4695 < len(yyv4695) {
				if r.TryDecodeAsNil() {
					yyv4695[yyj4695] = ""
				} else {
					yyv4695[yyj4695] = UniqueVolumeName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4695 < len(yyv4695) {
			yyv4695 = yyv4695[:yyj4695]
			yyc4695 = true
		} else if yyj4695 == 0 && yyv4695 == nil {
			yyv4695 = []UniqueVolumeName{}
			yyc4695 = true
		}
	}
	yyh4695.End()
	if yyc4695 {
		*v = yyv4695
	}
}

func (x codecSelfer1234) encSliceAttachedVolume(v []AttachedVolume, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4699 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4700 := &yyv4699
		yy4700.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceAttachedVolume(v *[]AttachedVolume, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4701 := *v
	yyh4701, yyl4701 := z.DecSliceHelperStart()
	var yyc4701 bool
	if yyl4701 == 0 {
		if yyv4701 == nil {
			yyv4701 = []AttachedVolume{}
			yyc4701 = true
		} else if len(yyv4701) != 0 {
			yyv4701 = yyv4701[:0]
			yyc4701 = true
		}
	} else if yyl4701 > 0 {
		var yyrr4701, yyrl4701 int
		var yyrt4701 bool
		if yyl4701 > cap(yyv4701) {

			yyrg4701 := len(yyv4701) > 0
			yyv24701 := yyv4701
			yyrl4701, yyrt4701 = z.DecInferLen(yyl4701, z.DecBasicHandle().MaxInitLen, 32)
			if yyrt4701 {
				if yyrl4701 <= cap(yyv4701) {
					yyv4701 = yyv4701[:yyrl4701]
				} else {
					yyv4701 = make([]AttachedVolume, yyrl4701)
				}
			} else {
				yyv4701 = make([]AttachedVolume, yyrl4701)
			}
			yyc4701 = true
			yyrr4701 = len(yyv4701)
			if yyrg4701 {
				copy(yyv4701, yyv24701)
			}
		} else if yyl4701 != len(yyv4701) {
			yyv4701 = yyv4701[:yyl4701]
			yyc4701 = true
		}
		yyj4701 := 0
		for ; yyj4701 < yyrr4701; yyj4701++ {
			yyh4701.ElemContainerState(yyj4701)
			if r.TryDecodeAsNil() {
				yyv4701[yyj4701] = AttachedVolume{}
			} else {
				yyv4702 := &yyv4701[yyj4701]
				yyv4702.CodecDecodeSelf(d)
			}

		}
		if yyrt4701 {
			for ; yyj4701 < yyl4701; yyj4701++ {
				yyv4701 = append(yyv4701, AttachedVolume{})
				yyh4701.ElemContainerState(yyj4701)
				if r.TryDecodeAsNil() {
					yyv4701[yyj4701] = AttachedVolume{}
				} else {
					yyv4703 := &yyv4701[yyj4701]
					yyv4703.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4701 := 0
		for ; !r.CheckBreak(); yyj4701++ {

			if yyj4701 >= len(yyv4701) {
				yyv4701 = append(yyv4701, AttachedVolume{}) // var yyz4701 AttachedVolume
				yyc4701 = true
			}
			yyh4701.ElemContainerState(yyj4701)
			if yyj4701 < len(yyv4701) {
				if r.TryDecodeAsNil() {
					yyv4701[yyj4701] = AttachedVolume{}
				} else {
					yyv4704 := &yyv4701[yyj4701]
					yyv4704.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4701 < len(yyv4701) {
			yyv4701 = yyv4701[:yyj4701]
			yyc4701 = true
		} else if yyj4701 == 0 && yyv4701 == nil {
			yyv4701 = []AttachedVolume{}
			yyc4701 = true
		}
	}
	yyh4701.End()
	if yyc4701 {
		*v = yyv4701
	}
}

func (x codecSelfer1234) encSlicePreferAvoidPodsEntry(v []PreferAvoidPodsEntry, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4705 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4706 := &yyv4705
		yy4706.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSlicePreferAvoidPodsEntry(v *[]PreferAvoidPodsEntry, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4707 := *v
	yyh4707, yyl4707 := z.DecSliceHelperStart()
	var yyc4707 bool
	if yyl4707 == 0 {
		if yyv4707 == nil {
			yyv4707 = []PreferAvoidPodsEntry{}
			yyc4707 = true
		} else if len(yyv4707) != 0 {
			yyv4707 = yyv4707[:0]
			yyc4707 = true
		}
	} else if yyl4707 > 0 {
		var yyrr4707, yyrl4707 int
		var yyrt4707 bool
		if yyl4707 > cap(yyv4707) {

			yyrg4707 := len(yyv4707) > 0
			yyv24707 := yyv4707
			yyrl4707, yyrt4707 = z.DecInferLen(yyl4707, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4707 {
				if yyrl4707 <= cap(yyv4707) {
					yyv4707 = yyv4707[:yyrl4707]
				} else {
					yyv4707 = make([]PreferAvoidPodsEntry, yyrl4707)
				}
			} else {
				yyv4707 = make([]PreferAvoidPodsEntry, yyrl4707)
			}
			yyc4707 = true
			yyrr4707 = len(yyv4707)
			if yyrg4707 {
				copy(yyv4707, yyv24707)
			}
		} else if yyl4707 != len(yyv4707) {
			yyv4707 = yyv4707[:yyl4707]
			yyc4707 = true
		}
		yyj4707 := 0
		for ; yyj4707 < yyrr4707; yyj4707++ {
			yyh4707.ElemContainerState(yyj4707)
			if r.TryDecodeAsNil() {
				yyv4707[yyj4707] = PreferAvoidPodsEntry{}
			} else {
				yyv4708 := &yyv4707[yyj4707]
				yyv4708.CodecDecodeSelf(d)
			}

		}
		if yyrt4707 {
			for ; yyj4707 < yyl4707; yyj4707++ {
				yyv4707 = append(yyv4707, PreferAvoidPodsEntry{})
				yyh4707.ElemContainerState(yyj4707)
				if r.TryDecodeAsNil() {
					yyv4707[yyj4707] = PreferAvoidPodsEntry{}
				} else {
					yyv4709 := &yyv4707[yyj4707]
					yyv4709.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4707 := 0
		for ; !r.CheckBreak(); yyj4707++ {

			if yyj4707 >= len(yyv4707) {
				yyv4707 = append(yyv4707, PreferAvoidPodsEntry{}) // var yyz4707 PreferAvoidPodsEntry
				yyc4707 = true
			}
			yyh4707.ElemContainerState(yyj4707)
			if yyj4707 < len(yyv4707) {
				if r.TryDecodeAsNil() {
					yyv4707[yyj4707] = PreferAvoidPodsEntry{}
				} else {
					yyv4710 := &yyv4707[yyj4707]
					yyv4710.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4707 < len(yyv4707) {
			yyv4707 = yyv4707[:yyj4707]
			yyc4707 = true
		} else if yyj4707 == 0 && yyv4707 == nil {
			yyv4707 = []PreferAvoidPodsEntry{}
			yyc4707 = true
		}
	}
	yyh4707.End()
	if yyc4707 {
		*v = yyv4707
	}
}

func (x codecSelfer1234) encResourceList(v ResourceList, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4711, yyv4711 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yyk4711.CodecEncodeSelf(e)
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		yy4712 := &yyv4711
		yym4713 := z.EncBinary()
		_ = yym4713
		if false {
		} else if z.HasExtensions() && z.EncExt(yy4712) {
		} else if !yym4713 && z.IsJSONHandle() {
			z.EncJSONMarshal(yy4712)
		} else {
			z.EncFallback(yy4712)
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decResourceList(v *ResourceList, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4714 := *v
	yyl4714 := r.ReadMapStart()
	yybh4714 := z.DecBasicHandle()
	if yyv4714 == nil {
		yyrl4714, _ := z.DecInferLen(yyl4714, yybh4714.MaxInitLen, 72)
		yyv4714 = make(map[ResourceName]pkg3_resource.Quantity, yyrl4714)
		*v = yyv4714
	}
	var yymk4714 ResourceName
	var yymv4714 pkg3_resource.Quantity
	var yymg4714 bool
	if yybh4714.MapValueReset {
		yymg4714 = true
	}
	if yyl4714 > 0 {
		for yyj4714 := 0; yyj4714 < yyl4714; yyj4714++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4714 = ""
			} else {
				yymk4714 = ResourceName(r.DecodeString())
			}

			if yymg4714 {
				yymv4714 = yyv4714[yymk4714]
			} else {
				yymv4714 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4714 = pkg3_resource.Quantity{}
			} else {
				yyv4716 := &yymv4714
				yym4717 := z.DecBinary()
				_ = yym4717
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4716) {
				} else if !yym4717 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4716)
				} else {
					z.DecFallback(yyv4716, false)
				}
			}

			if yyv4714 != nil {
				yyv4714[yymk4714] = yymv4714
			}
		}
	} else if yyl4714 < 0 {
		for yyj4714 := 0; !r.CheckBreak(); yyj4714++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4714 = ""
			} else {
				yymk4714 = ResourceName(r.DecodeString())
			}

			if yymg4714 {
				yymv4714 = yyv4714[yymk4714]
			} else {
				yymv4714 = pkg3_resource.Quantity{}
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4714 = pkg3_resource.Quantity{}
			} else {
				yyv4719 := &yymv4714
				yym4720 := z.DecBinary()
				_ = yym4720
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4719) {
				} else if !yym4720 && z.IsJSONHandle() {
					z.DecJSONUnmarshal(yyv4719)
				} else {
					z.DecFallback(yyv4719, false)
				}
			}

			if yyv4714 != nil {
				yyv4714[yymk4714] = yymv4714
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceNode(v []Node, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4721 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4722 := &yyv4721
		yy4722.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNode(v *[]Node, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4723 := *v
	yyh4723, yyl4723 := z.DecSliceHelperStart()
	var yyc4723 bool
	if yyl4723 == 0 {
		if yyv4723 == nil {
			yyv4723 = []Node{}
			yyc4723 = true
		} else if len(yyv4723) != 0 {
			yyv4723 = yyv4723[:0]
			yyc4723 = true
		}
	} else if yyl4723 > 0 {
		var yyrr4723, yyrl4723 int
		var yyrt4723 bool
		if yyl4723 > cap(yyv4723) {

			yyrg4723 := len(yyv4723) > 0
			yyv24723 := yyv4723
			yyrl4723, yyrt4723 = z.DecInferLen(yyl4723, z.DecBasicHandle().MaxInitLen, 616)
			if yyrt4723 {
				if yyrl4723 <= cap(yyv4723) {
					yyv4723 = yyv4723[:yyrl4723]
				} else {
					yyv4723 = make([]Node, yyrl4723)
				}
			} else {
				yyv4723 = make([]Node, yyrl4723)
			}
			yyc4723 = true
			yyrr4723 = len(yyv4723)
			if yyrg4723 {
				copy(yyv4723, yyv24723)
			}
		} else if yyl4723 != len(yyv4723) {
			yyv4723 = yyv4723[:yyl4723]
			yyc4723 = true
		}
		yyj4723 := 0
		for ; yyj4723 < yyrr4723; yyj4723++ {
			yyh4723.ElemContainerState(yyj4723)
			if r.TryDecodeAsNil() {
				yyv4723[yyj4723] = Node{}
			} else {
				yyv4724 := &yyv4723[yyj4723]
				yyv4724.CodecDecodeSelf(d)
			}

		}
		if yyrt4723 {
			for ; yyj4723 < yyl4723; yyj4723++ {
				yyv4723 = append(yyv4723, Node{})
				yyh4723.ElemContainerState(yyj4723)
				if r.TryDecodeAsNil() {
					yyv4723[yyj4723] = Node{}
				} else {
					yyv4725 := &yyv4723[yyj4723]
					yyv4725.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4723 := 0
		for ; !r.CheckBreak(); yyj4723++ {

			if yyj4723 >= len(yyv4723) {
				yyv4723 = append(yyv4723, Node{}) // var yyz4723 Node
				yyc4723 = true
			}
			yyh4723.ElemContainerState(yyj4723)
			if yyj4723 < len(yyv4723) {
				if r.TryDecodeAsNil() {
					yyv4723[yyj4723] = Node{}
				} else {
					yyv4726 := &yyv4723[yyj4723]
					yyv4726.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4723 < len(yyv4723) {
			yyv4723 = yyv4723[:yyj4723]
			yyc4723 = true
		} else if yyj4723 == 0 && yyv4723 == nil {
			yyv4723 = []Node{}
			yyc4723 = true
		}
	}
	yyh4723.End()
	if yyc4723 {
		*v = yyv4723
	}
}

func (x codecSelfer1234) encSliceFinalizerName(v []FinalizerName, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4727 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4727.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceFinalizerName(v *[]FinalizerName, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4728 := *v
	yyh4728, yyl4728 := z.DecSliceHelperStart()
	var yyc4728 bool
	if yyl4728 == 0 {
		if yyv4728 == nil {
			yyv4728 = []FinalizerName{}
			yyc4728 = true
		} else if len(yyv4728) != 0 {
			yyv4728 = yyv4728[:0]
			yyc4728 = true
		}
	} else if yyl4728 > 0 {
		var yyrr4728, yyrl4728 int
		var yyrt4728 bool
		if yyl4728 > cap(yyv4728) {

			yyrl4728, yyrt4728 = z.DecInferLen(yyl4728, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4728 {
				if yyrl4728 <= cap(yyv4728) {
					yyv4728 = yyv4728[:yyrl4728]
				} else {
					yyv4728 = make([]FinalizerName, yyrl4728)
				}
			} else {
				yyv4728 = make([]FinalizerName, yyrl4728)
			}
			yyc4728 = true
			yyrr4728 = len(yyv4728)
		} else if yyl4728 != len(yyv4728) {
			yyv4728 = yyv4728[:yyl4728]
			yyc4728 = true
		}
		yyj4728 := 0
		for ; yyj4728 < yyrr4728; yyj4728++ {
			yyh4728.ElemContainerState(yyj4728)
			if r.TryDecodeAsNil() {
				yyv4728[yyj4728] = ""
			} else {
				yyv4728[yyj4728] = FinalizerName(r.DecodeString())
			}

		}
		if yyrt4728 {
			for ; yyj4728 < yyl4728; yyj4728++ {
				yyv4728 = append(yyv4728, "")
				yyh4728.ElemContainerState(yyj4728)
				if r.TryDecodeAsNil() {
					yyv4728[yyj4728] = ""
				} else {
					yyv4728[yyj4728] = FinalizerName(r.DecodeString())
				}

			}
		}

	} else {
		yyj4728 := 0
		for ; !r.CheckBreak(); yyj4728++ {

			if yyj4728 >= len(yyv4728) {
				yyv4728 = append(yyv4728, "") // var yyz4728 FinalizerName
				yyc4728 = true
			}
			yyh4728.ElemContainerState(yyj4728)
			if yyj4728 < len(yyv4728) {
				if r.TryDecodeAsNil() {
					yyv4728[yyj4728] = ""
				} else {
					yyv4728[yyj4728] = FinalizerName(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4728 < len(yyv4728) {
			yyv4728 = yyv4728[:yyj4728]
			yyc4728 = true
		} else if yyj4728 == 0 && yyv4728 == nil {
			yyv4728 = []FinalizerName{}
			yyc4728 = true
		}
	}
	yyh4728.End()
	if yyc4728 {
		*v = yyv4728
	}
}

func (x codecSelfer1234) encSliceNamespace(v []Namespace, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4732 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4733 := &yyv4732
		yy4733.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceNamespace(v *[]Namespace, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4734 := *v
	yyh4734, yyl4734 := z.DecSliceHelperStart()
	var yyc4734 bool
	if yyl4734 == 0 {
		if yyv4734 == nil {
			yyv4734 = []Namespace{}
			yyc4734 = true
		} else if len(yyv4734) != 0 {
			yyv4734 = yyv4734[:0]
			yyc4734 = true
		}
	} else if yyl4734 > 0 {
		var yyrr4734, yyrl4734 int
		var yyrt4734 bool
		if yyl4734 > cap(yyv4734) {

			yyrg4734 := len(yyv4734) > 0
			yyv24734 := yyv4734
			yyrl4734, yyrt4734 = z.DecInferLen(yyl4734, z.DecBasicHandle().MaxInitLen, 280)
			if yyrt4734 {
				if yyrl4734 <= cap(yyv4734) {
					yyv4734 = yyv4734[:yyrl4734]
				} else {
					yyv4734 = make([]Namespace, yyrl4734)
				}
			} else {
				yyv4734 = make([]Namespace, yyrl4734)
			}
			yyc4734 = true
			yyrr4734 = len(yyv4734)
			if yyrg4734 {
				copy(yyv4734, yyv24734)
			}
		} else if yyl4734 != len(yyv4734) {
			yyv4734 = yyv4734[:yyl4734]
			yyc4734 = true
		}
		yyj4734 := 0
		for ; yyj4734 < yyrr4734; yyj4734++ {
			yyh4734.ElemContainerState(yyj4734)
			if r.TryDecodeAsNil() {
				yyv4734[yyj4734] = Namespace{}
			} else {
				yyv4735 := &yyv4734[yyj4734]
				yyv4735.CodecDecodeSelf(d)
			}

		}
		if yyrt4734 {
			for ; yyj4734 < yyl4734; yyj4734++ {
				yyv4734 = append(yyv4734, Namespace{})
				yyh4734.ElemContainerState(yyj4734)
				if r.TryDecodeAsNil() {
					yyv4734[yyj4734] = Namespace{}
				} else {
					yyv4736 := &yyv4734[yyj4734]
					yyv4736.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4734 := 0
		for ; !r.CheckBreak(); yyj4734++ {

			if yyj4734 >= len(yyv4734) {
				yyv4734 = append(yyv4734, Namespace{}) // var yyz4734 Namespace
				yyc4734 = true
			}
			yyh4734.ElemContainerState(yyj4734)
			if yyj4734 < len(yyv4734) {
				if r.TryDecodeAsNil() {
					yyv4734[yyj4734] = Namespace{}
				} else {
					yyv4737 := &yyv4734[yyj4734]
					yyv4737.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4734 < len(yyv4734) {
			yyv4734 = yyv4734[:yyj4734]
			yyc4734 = true
		} else if yyj4734 == 0 && yyv4734 == nil {
			yyv4734 = []Namespace{}
			yyc4734 = true
		}
	}
	yyh4734.End()
	if yyc4734 {
		*v = yyv4734
	}
}

func (x codecSelfer1234) encSliceEvent(v []Event, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4738 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4739 := &yyv4738
		yy4739.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceEvent(v *[]Event, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4740 := *v
	yyh4740, yyl4740 := z.DecSliceHelperStart()
	var yyc4740 bool
	if yyl4740 == 0 {
		if yyv4740 == nil {
			yyv4740 = []Event{}
			yyc4740 = true
		} else if len(yyv4740) != 0 {
			yyv4740 = yyv4740[:0]
			yyc4740 = true
		}
	} else if yyl4740 > 0 {
		var yyrr4740, yyrl4740 int
		var yyrt4740 bool
		if yyl4740 > cap(yyv4740) {

			yyrg4740 := len(yyv4740) > 0
			yyv24740 := yyv4740
			yyrl4740, yyrt4740 = z.DecInferLen(yyl4740, z.DecBasicHandle().MaxInitLen, 488)
			if yyrt4740 {
				if yyrl4740 <= cap(yyv4740) {
					yyv4740 = yyv4740[:yyrl4740]
				} else {
					yyv4740 = make([]Event, yyrl4740)
				}
			} else {
				yyv4740 = make([]Event, yyrl4740)
			}
			yyc4740 = true
			yyrr4740 = len(yyv4740)
			if yyrg4740 {
				copy(yyv4740, yyv24740)
			}
		} else if yyl4740 != len(yyv4740) {
			yyv4740 = yyv4740[:yyl4740]
			yyc4740 = true
		}
		yyj4740 := 0
		for ; yyj4740 < yyrr4740; yyj4740++ {
			yyh4740.ElemContainerState(yyj4740)
			if r.TryDecodeAsNil() {
				yyv4740[yyj4740] = Event{}
			} else {
				yyv4741 := &yyv4740[yyj4740]
				yyv4741.CodecDecodeSelf(d)
			}

		}
		if yyrt4740 {
			for ; yyj4740 < yyl4740; yyj4740++ {
				yyv4740 = append(yyv4740, Event{})
				yyh4740.ElemContainerState(yyj4740)
				if r.TryDecodeAsNil() {
					yyv4740[yyj4740] = Event{}
				} else {
					yyv4742 := &yyv4740[yyj4740]
					yyv4742.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4740 := 0
		for ; !r.CheckBreak(); yyj4740++ {

			if yyj4740 >= len(yyv4740) {
				yyv4740 = append(yyv4740, Event{}) // var yyz4740 Event
				yyc4740 = true
			}
			yyh4740.ElemContainerState(yyj4740)
			if yyj4740 < len(yyv4740) {
				if r.TryDecodeAsNil() {
					yyv4740[yyj4740] = Event{}
				} else {
					yyv4743 := &yyv4740[yyj4740]
					yyv4743.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4740 < len(yyv4740) {
			yyv4740 = yyv4740[:yyj4740]
			yyc4740 = true
		} else if yyj4740 == 0 && yyv4740 == nil {
			yyv4740 = []Event{}
			yyc4740 = true
		}
	}
	yyh4740.End()
	if yyc4740 {
		*v = yyv4740
	}
}

func (x codecSelfer1234) encSliceruntime_Object(v []pkg7_runtime.Object, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4744 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		if yyv4744 == nil {
			r.EncodeNil()
		} else {
			yym4745 := z.EncBinary()
			_ = yym4745
			if false {
			} else if z.HasExtensions() && z.EncExt(yyv4744) {
			} else {
				z.EncFallback(yyv4744)
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceruntime_Object(v *[]pkg7_runtime.Object, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4746 := *v
	yyh4746, yyl4746 := z.DecSliceHelperStart()
	var yyc4746 bool
	if yyl4746 == 0 {
		if yyv4746 == nil {
			yyv4746 = []pkg7_runtime.Object{}
			yyc4746 = true
		} else if len(yyv4746) != 0 {
			yyv4746 = yyv4746[:0]
			yyc4746 = true
		}
	} else if yyl4746 > 0 {
		var yyrr4746, yyrl4746 int
		var yyrt4746 bool
		if yyl4746 > cap(yyv4746) {

			yyrg4746 := len(yyv4746) > 0
			yyv24746 := yyv4746
			yyrl4746, yyrt4746 = z.DecInferLen(yyl4746, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4746 {
				if yyrl4746 <= cap(yyv4746) {
					yyv4746 = yyv4746[:yyrl4746]
				} else {
					yyv4746 = make([]pkg7_runtime.Object, yyrl4746)
				}
			} else {
				yyv4746 = make([]pkg7_runtime.Object, yyrl4746)
			}
			yyc4746 = true
			yyrr4746 = len(yyv4746)
			if yyrg4746 {
				copy(yyv4746, yyv24746)
			}
		} else if yyl4746 != len(yyv4746) {
			yyv4746 = yyv4746[:yyl4746]
			yyc4746 = true
		}
		yyj4746 := 0
		for ; yyj4746 < yyrr4746; yyj4746++ {
			yyh4746.ElemContainerState(yyj4746)
			if r.TryDecodeAsNil() {
				yyv4746[yyj4746] = nil
			} else {
				yyv4747 := &yyv4746[yyj4746]
				yym4748 := z.DecBinary()
				_ = yym4748
				if false {
				} else if z.HasExtensions() && z.DecExt(yyv4747) {
				} else {
					z.DecFallback(yyv4747, true)
				}
			}

		}
		if yyrt4746 {
			for ; yyj4746 < yyl4746; yyj4746++ {
				yyv4746 = append(yyv4746, nil)
				yyh4746.ElemContainerState(yyj4746)
				if r.TryDecodeAsNil() {
					yyv4746[yyj4746] = nil
				} else {
					yyv4749 := &yyv4746[yyj4746]
					yym4750 := z.DecBinary()
					_ = yym4750
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4749) {
					} else {
						z.DecFallback(yyv4749, true)
					}
				}

			}
		}

	} else {
		yyj4746 := 0
		for ; !r.CheckBreak(); yyj4746++ {

			if yyj4746 >= len(yyv4746) {
				yyv4746 = append(yyv4746, nil) // var yyz4746 pkg7_runtime.Object
				yyc4746 = true
			}
			yyh4746.ElemContainerState(yyj4746)
			if yyj4746 < len(yyv4746) {
				if r.TryDecodeAsNil() {
					yyv4746[yyj4746] = nil
				} else {
					yyv4751 := &yyv4746[yyj4746]
					yym4752 := z.DecBinary()
					_ = yym4752
					if false {
					} else if z.HasExtensions() && z.DecExt(yyv4751) {
					} else {
						z.DecFallback(yyv4751, true)
					}
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4746 < len(yyv4746) {
			yyv4746 = yyv4746[:yyj4746]
			yyc4746 = true
		} else if yyj4746 == 0 && yyv4746 == nil {
			yyv4746 = []pkg7_runtime.Object{}
			yyc4746 = true
		}
	}
	yyh4746.End()
	if yyc4746 {
		*v = yyv4746
	}
}

func (x codecSelfer1234) encSliceLimitRangeItem(v []LimitRangeItem, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4753 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4754 := &yyv4753
		yy4754.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRangeItem(v *[]LimitRangeItem, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4755 := *v
	yyh4755, yyl4755 := z.DecSliceHelperStart()
	var yyc4755 bool
	if yyl4755 == 0 {
		if yyv4755 == nil {
			yyv4755 = []LimitRangeItem{}
			yyc4755 = true
		} else if len(yyv4755) != 0 {
			yyv4755 = yyv4755[:0]
			yyc4755 = true
		}
	} else if yyl4755 > 0 {
		var yyrr4755, yyrl4755 int
		var yyrt4755 bool
		if yyl4755 > cap(yyv4755) {

			yyrg4755 := len(yyv4755) > 0
			yyv24755 := yyv4755
			yyrl4755, yyrt4755 = z.DecInferLen(yyl4755, z.DecBasicHandle().MaxInitLen, 56)
			if yyrt4755 {
				if yyrl4755 <= cap(yyv4755) {
					yyv4755 = yyv4755[:yyrl4755]
				} else {
					yyv4755 = make([]LimitRangeItem, yyrl4755)
				}
			} else {
				yyv4755 = make([]LimitRangeItem, yyrl4755)
			}
			yyc4755 = true
			yyrr4755 = len(yyv4755)
			if yyrg4755 {
				copy(yyv4755, yyv24755)
			}
		} else if yyl4755 != len(yyv4755) {
			yyv4755 = yyv4755[:yyl4755]
			yyc4755 = true
		}
		yyj4755 := 0
		for ; yyj4755 < yyrr4755; yyj4755++ {
			yyh4755.ElemContainerState(yyj4755)
			if r.TryDecodeAsNil() {
				yyv4755[yyj4755] = LimitRangeItem{}
			} else {
				yyv4756 := &yyv4755[yyj4755]
				yyv4756.CodecDecodeSelf(d)
			}

		}
		if yyrt4755 {
			for ; yyj4755 < yyl4755; yyj4755++ {
				yyv4755 = append(yyv4755, LimitRangeItem{})
				yyh4755.ElemContainerState(yyj4755)
				if r.TryDecodeAsNil() {
					yyv4755[yyj4755] = LimitRangeItem{}
				} else {
					yyv4757 := &yyv4755[yyj4755]
					yyv4757.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4755 := 0
		for ; !r.CheckBreak(); yyj4755++ {

			if yyj4755 >= len(yyv4755) {
				yyv4755 = append(yyv4755, LimitRangeItem{}) // var yyz4755 LimitRangeItem
				yyc4755 = true
			}
			yyh4755.ElemContainerState(yyj4755)
			if yyj4755 < len(yyv4755) {
				if r.TryDecodeAsNil() {
					yyv4755[yyj4755] = LimitRangeItem{}
				} else {
					yyv4758 := &yyv4755[yyj4755]
					yyv4758.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4755 < len(yyv4755) {
			yyv4755 = yyv4755[:yyj4755]
			yyc4755 = true
		} else if yyj4755 == 0 && yyv4755 == nil {
			yyv4755 = []LimitRangeItem{}
			yyc4755 = true
		}
	}
	yyh4755.End()
	if yyc4755 {
		*v = yyv4755
	}
}

func (x codecSelfer1234) encSliceLimitRange(v []LimitRange, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4759 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4760 := &yyv4759
		yy4760.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceLimitRange(v *[]LimitRange, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4761 := *v
	yyh4761, yyl4761 := z.DecSliceHelperStart()
	var yyc4761 bool
	if yyl4761 == 0 {
		if yyv4761 == nil {
			yyv4761 = []LimitRange{}
			yyc4761 = true
		} else if len(yyv4761) != 0 {
			yyv4761 = yyv4761[:0]
			yyc4761 = true
		}
	} else if yyl4761 > 0 {
		var yyrr4761, yyrl4761 int
		var yyrt4761 bool
		if yyl4761 > cap(yyv4761) {

			yyrg4761 := len(yyv4761) > 0
			yyv24761 := yyv4761
			yyrl4761, yyrt4761 = z.DecInferLen(yyl4761, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4761 {
				if yyrl4761 <= cap(yyv4761) {
					yyv4761 = yyv4761[:yyrl4761]
				} else {
					yyv4761 = make([]LimitRange, yyrl4761)
				}
			} else {
				yyv4761 = make([]LimitRange, yyrl4761)
			}
			yyc4761 = true
			yyrr4761 = len(yyv4761)
			if yyrg4761 {
				copy(yyv4761, yyv24761)
			}
		} else if yyl4761 != len(yyv4761) {
			yyv4761 = yyv4761[:yyl4761]
			yyc4761 = true
		}
		yyj4761 := 0
		for ; yyj4761 < yyrr4761; yyj4761++ {
			yyh4761.ElemContainerState(yyj4761)
			if r.TryDecodeAsNil() {
				yyv4761[yyj4761] = LimitRange{}
			} else {
				yyv4762 := &yyv4761[yyj4761]
				yyv4762.CodecDecodeSelf(d)
			}

		}
		if yyrt4761 {
			for ; yyj4761 < yyl4761; yyj4761++ {
				yyv4761 = append(yyv4761, LimitRange{})
				yyh4761.ElemContainerState(yyj4761)
				if r.TryDecodeAsNil() {
					yyv4761[yyj4761] = LimitRange{}
				} else {
					yyv4763 := &yyv4761[yyj4761]
					yyv4763.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4761 := 0
		for ; !r.CheckBreak(); yyj4761++ {

			if yyj4761 >= len(yyv4761) {
				yyv4761 = append(yyv4761, LimitRange{}) // var yyz4761 LimitRange
				yyc4761 = true
			}
			yyh4761.ElemContainerState(yyj4761)
			if yyj4761 < len(yyv4761) {
				if r.TryDecodeAsNil() {
					yyv4761[yyj4761] = LimitRange{}
				} else {
					yyv4764 := &yyv4761[yyj4761]
					yyv4764.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4761 < len(yyv4761) {
			yyv4761 = yyv4761[:yyj4761]
			yyc4761 = true
		} else if yyj4761 == 0 && yyv4761 == nil {
			yyv4761 = []LimitRange{}
			yyc4761 = true
		}
	}
	yyh4761.End()
	if yyc4761 {
		*v = yyv4761
	}
}

func (x codecSelfer1234) encSliceResourceQuotaScope(v []ResourceQuotaScope, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4765 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yyv4765.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuotaScope(v *[]ResourceQuotaScope, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4766 := *v
	yyh4766, yyl4766 := z.DecSliceHelperStart()
	var yyc4766 bool
	if yyl4766 == 0 {
		if yyv4766 == nil {
			yyv4766 = []ResourceQuotaScope{}
			yyc4766 = true
		} else if len(yyv4766) != 0 {
			yyv4766 = yyv4766[:0]
			yyc4766 = true
		}
	} else if yyl4766 > 0 {
		var yyrr4766, yyrl4766 int
		var yyrt4766 bool
		if yyl4766 > cap(yyv4766) {

			yyrl4766, yyrt4766 = z.DecInferLen(yyl4766, z.DecBasicHandle().MaxInitLen, 16)
			if yyrt4766 {
				if yyrl4766 <= cap(yyv4766) {
					yyv4766 = yyv4766[:yyrl4766]
				} else {
					yyv4766 = make([]ResourceQuotaScope, yyrl4766)
				}
			} else {
				yyv4766 = make([]ResourceQuotaScope, yyrl4766)
			}
			yyc4766 = true
			yyrr4766 = len(yyv4766)
		} else if yyl4766 != len(yyv4766) {
			yyv4766 = yyv4766[:yyl4766]
			yyc4766 = true
		}
		yyj4766 := 0
		for ; yyj4766 < yyrr4766; yyj4766++ {
			yyh4766.ElemContainerState(yyj4766)
			if r.TryDecodeAsNil() {
				yyv4766[yyj4766] = ""
			} else {
				yyv4766[yyj4766] = ResourceQuotaScope(r.DecodeString())
			}

		}
		if yyrt4766 {
			for ; yyj4766 < yyl4766; yyj4766++ {
				yyv4766 = append(yyv4766, "")
				yyh4766.ElemContainerState(yyj4766)
				if r.TryDecodeAsNil() {
					yyv4766[yyj4766] = ""
				} else {
					yyv4766[yyj4766] = ResourceQuotaScope(r.DecodeString())
				}

			}
		}

	} else {
		yyj4766 := 0
		for ; !r.CheckBreak(); yyj4766++ {

			if yyj4766 >= len(yyv4766) {
				yyv4766 = append(yyv4766, "") // var yyz4766 ResourceQuotaScope
				yyc4766 = true
			}
			yyh4766.ElemContainerState(yyj4766)
			if yyj4766 < len(yyv4766) {
				if r.TryDecodeAsNil() {
					yyv4766[yyj4766] = ""
				} else {
					yyv4766[yyj4766] = ResourceQuotaScope(r.DecodeString())
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4766 < len(yyv4766) {
			yyv4766 = yyv4766[:yyj4766]
			yyc4766 = true
		} else if yyj4766 == 0 && yyv4766 == nil {
			yyv4766 = []ResourceQuotaScope{}
			yyc4766 = true
		}
	}
	yyh4766.End()
	if yyc4766 {
		*v = yyv4766
	}
}

func (x codecSelfer1234) encSliceResourceQuota(v []ResourceQuota, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4770 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4771 := &yyv4770
		yy4771.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceResourceQuota(v *[]ResourceQuota, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4772 := *v
	yyh4772, yyl4772 := z.DecSliceHelperStart()
	var yyc4772 bool
	if yyl4772 == 0 {
		if yyv4772 == nil {
			yyv4772 = []ResourceQuota{}
			yyc4772 = true
		} else if len(yyv4772) != 0 {
			yyv4772 = yyv4772[:0]
			yyc4772 = true
		}
	} else if yyl4772 > 0 {
		var yyrr4772, yyrl4772 int
		var yyrt4772 bool
		if yyl4772 > cap(yyv4772) {

			yyrg4772 := len(yyv4772) > 0
			yyv24772 := yyv4772
			yyrl4772, yyrt4772 = z.DecInferLen(yyl4772, z.DecBasicHandle().MaxInitLen, 288)
			if yyrt4772 {
				if yyrl4772 <= cap(yyv4772) {
					yyv4772 = yyv4772[:yyrl4772]
				} else {
					yyv4772 = make([]ResourceQuota, yyrl4772)
				}
			} else {
				yyv4772 = make([]ResourceQuota, yyrl4772)
			}
			yyc4772 = true
			yyrr4772 = len(yyv4772)
			if yyrg4772 {
				copy(yyv4772, yyv24772)
			}
		} else if yyl4772 != len(yyv4772) {
			yyv4772 = yyv4772[:yyl4772]
			yyc4772 = true
		}
		yyj4772 := 0
		for ; yyj4772 < yyrr4772; yyj4772++ {
			yyh4772.ElemContainerState(yyj4772)
			if r.TryDecodeAsNil() {
				yyv4772[yyj4772] = ResourceQuota{}
			} else {
				yyv4773 := &yyv4772[yyj4772]
				yyv4773.CodecDecodeSelf(d)
			}

		}
		if yyrt4772 {
			for ; yyj4772 < yyl4772; yyj4772++ {
				yyv4772 = append(yyv4772, ResourceQuota{})
				yyh4772.ElemContainerState(yyj4772)
				if r.TryDecodeAsNil() {
					yyv4772[yyj4772] = ResourceQuota{}
				} else {
					yyv4774 := &yyv4772[yyj4772]
					yyv4774.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4772 := 0
		for ; !r.CheckBreak(); yyj4772++ {

			if yyj4772 >= len(yyv4772) {
				yyv4772 = append(yyv4772, ResourceQuota{}) // var yyz4772 ResourceQuota
				yyc4772 = true
			}
			yyh4772.ElemContainerState(yyj4772)
			if yyj4772 < len(yyv4772) {
				if r.TryDecodeAsNil() {
					yyv4772[yyj4772] = ResourceQuota{}
				} else {
					yyv4775 := &yyv4772[yyj4772]
					yyv4775.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4772 < len(yyv4772) {
			yyv4772 = yyv4772[:yyj4772]
			yyc4772 = true
		} else if yyj4772 == 0 && yyv4772 == nil {
			yyv4772 = []ResourceQuota{}
			yyc4772 = true
		}
	}
	yyh4772.End()
	if yyc4772 {
		*v = yyv4772
	}
}

func (x codecSelfer1234) encMapstringSliceuint8(v map[string][]uint8, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeMapStart(len(v))
	for yyk4776, yyv4776 := range v {
		z.EncSendContainerState(codecSelfer_containerMapKey1234)
		yym4777 := z.EncBinary()
		_ = yym4777
		if false {
		} else {
			r.EncodeString(codecSelferC_UTF81234, string(yyk4776))
		}
		z.EncSendContainerState(codecSelfer_containerMapValue1234)
		if yyv4776 == nil {
			r.EncodeNil()
		} else {
			yym4778 := z.EncBinary()
			_ = yym4778
			if false {
			} else {
				r.EncodeStringBytes(codecSelferC_RAW1234, []byte(yyv4776))
			}
		}
	}
	z.EncSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) decMapstringSliceuint8(v *map[string][]uint8, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4779 := *v
	yyl4779 := r.ReadMapStart()
	yybh4779 := z.DecBasicHandle()
	if yyv4779 == nil {
		yyrl4779, _ := z.DecInferLen(yyl4779, yybh4779.MaxInitLen, 40)
		yyv4779 = make(map[string][]uint8, yyrl4779)
		*v = yyv4779
	}
	var yymk4779 string
	var yymv4779 []uint8
	var yymg4779 bool
	if yybh4779.MapValueReset {
		yymg4779 = true
	}
	if yyl4779 > 0 {
		for yyj4779 := 0; yyj4779 < yyl4779; yyj4779++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4779 = ""
			} else {
				yymk4779 = string(r.DecodeString())
			}

			if yymg4779 {
				yymv4779 = yyv4779[yymk4779]
			} else {
				yymv4779 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4779 = nil
			} else {
				yyv4781 := &yymv4779
				yym4782 := z.DecBinary()
				_ = yym4782
				if false {
				} else {
					*yyv4781 = r.DecodeBytes(*(*[]byte)(yyv4781), false, false)
				}
			}

			if yyv4779 != nil {
				yyv4779[yymk4779] = yymv4779
			}
		}
	} else if yyl4779 < 0 {
		for yyj4779 := 0; !r.CheckBreak(); yyj4779++ {
			z.DecSendContainerState(codecSelfer_containerMapKey1234)
			if r.TryDecodeAsNil() {
				yymk4779 = ""
			} else {
				yymk4779 = string(r.DecodeString())
			}

			if yymg4779 {
				yymv4779 = yyv4779[yymk4779]
			} else {
				yymv4779 = nil
			}
			z.DecSendContainerState(codecSelfer_containerMapValue1234)
			if r.TryDecodeAsNil() {
				yymv4779 = nil
			} else {
				yyv4784 := &yymv4779
				yym4785 := z.DecBinary()
				_ = yym4785
				if false {
				} else {
					*yyv4784 = r.DecodeBytes(*(*[]byte)(yyv4784), false, false)
				}
			}

			if yyv4779 != nil {
				yyv4779[yymk4779] = yymv4779
			}
		}
	} // else len==0: TODO: Should we clear map entries?
	z.DecSendContainerState(codecSelfer_containerMapEnd1234)
}

func (x codecSelfer1234) encSliceSecret(v []Secret, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4786 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4787 := &yyv4786
		yy4787.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceSecret(v *[]Secret, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4788 := *v
	yyh4788, yyl4788 := z.DecSliceHelperStart()
	var yyc4788 bool
	if yyl4788 == 0 {
		if yyv4788 == nil {
			yyv4788 = []Secret{}
			yyc4788 = true
		} else if len(yyv4788) != 0 {
			yyv4788 = yyv4788[:0]
			yyc4788 = true
		}
	} else if yyl4788 > 0 {
		var yyrr4788, yyrl4788 int
		var yyrt4788 bool
		if yyl4788 > cap(yyv4788) {

			yyrg4788 := len(yyv4788) > 0
			yyv24788 := yyv4788
			yyrl4788, yyrt4788 = z.DecInferLen(yyl4788, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4788 {
				if yyrl4788 <= cap(yyv4788) {
					yyv4788 = yyv4788[:yyrl4788]
				} else {
					yyv4788 = make([]Secret, yyrl4788)
				}
			} else {
				yyv4788 = make([]Secret, yyrl4788)
			}
			yyc4788 = true
			yyrr4788 = len(yyv4788)
			if yyrg4788 {
				copy(yyv4788, yyv24788)
			}
		} else if yyl4788 != len(yyv4788) {
			yyv4788 = yyv4788[:yyl4788]
			yyc4788 = true
		}
		yyj4788 := 0
		for ; yyj4788 < yyrr4788; yyj4788++ {
			yyh4788.ElemContainerState(yyj4788)
			if r.TryDecodeAsNil() {
				yyv4788[yyj4788] = Secret{}
			} else {
				yyv4789 := &yyv4788[yyj4788]
				yyv4789.CodecDecodeSelf(d)
			}

		}
		if yyrt4788 {
			for ; yyj4788 < yyl4788; yyj4788++ {
				yyv4788 = append(yyv4788, Secret{})
				yyh4788.ElemContainerState(yyj4788)
				if r.TryDecodeAsNil() {
					yyv4788[yyj4788] = Secret{}
				} else {
					yyv4790 := &yyv4788[yyj4788]
					yyv4790.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4788 := 0
		for ; !r.CheckBreak(); yyj4788++ {

			if yyj4788 >= len(yyv4788) {
				yyv4788 = append(yyv4788, Secret{}) // var yyz4788 Secret
				yyc4788 = true
			}
			yyh4788.ElemContainerState(yyj4788)
			if yyj4788 < len(yyv4788) {
				if r.TryDecodeAsNil() {
					yyv4788[yyj4788] = Secret{}
				} else {
					yyv4791 := &yyv4788[yyj4788]
					yyv4791.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4788 < len(yyv4788) {
			yyv4788 = yyv4788[:yyj4788]
			yyc4788 = true
		} else if yyj4788 == 0 && yyv4788 == nil {
			yyv4788 = []Secret{}
			yyc4788 = true
		}
	}
	yyh4788.End()
	if yyc4788 {
		*v = yyv4788
	}
}

func (x codecSelfer1234) encSliceConfigMap(v []ConfigMap, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4792 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4793 := &yyv4792
		yy4793.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceConfigMap(v *[]ConfigMap, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4794 := *v
	yyh4794, yyl4794 := z.DecSliceHelperStart()
	var yyc4794 bool
	if yyl4794 == 0 {
		if yyv4794 == nil {
			yyv4794 = []ConfigMap{}
			yyc4794 = true
		} else if len(yyv4794) != 0 {
			yyv4794 = yyv4794[:0]
			yyc4794 = true
		}
	} else if yyl4794 > 0 {
		var yyrr4794, yyrl4794 int
		var yyrt4794 bool
		if yyl4794 > cap(yyv4794) {

			yyrg4794 := len(yyv4794) > 0
			yyv24794 := yyv4794
			yyrl4794, yyrt4794 = z.DecInferLen(yyl4794, z.DecBasicHandle().MaxInitLen, 248)
			if yyrt4794 {
				if yyrl4794 <= cap(yyv4794) {
					yyv4794 = yyv4794[:yyrl4794]
				} else {
					yyv4794 = make([]ConfigMap, yyrl4794)
				}
			} else {
				yyv4794 = make([]ConfigMap, yyrl4794)
			}
			yyc4794 = true
			yyrr4794 = len(yyv4794)
			if yyrg4794 {
				copy(yyv4794, yyv24794)
			}
		} else if yyl4794 != len(yyv4794) {
			yyv4794 = yyv4794[:yyl4794]
			yyc4794 = true
		}
		yyj4794 := 0
		for ; yyj4794 < yyrr4794; yyj4794++ {
			yyh4794.ElemContainerState(yyj4794)
			if r.TryDecodeAsNil() {
				yyv4794[yyj4794] = ConfigMap{}
			} else {
				yyv4795 := &yyv4794[yyj4794]
				yyv4795.CodecDecodeSelf(d)
			}

		}
		if yyrt4794 {
			for ; yyj4794 < yyl4794; yyj4794++ {
				yyv4794 = append(yyv4794, ConfigMap{})
				yyh4794.ElemContainerState(yyj4794)
				if r.TryDecodeAsNil() {
					yyv4794[yyj4794] = ConfigMap{}
				} else {
					yyv4796 := &yyv4794[yyj4794]
					yyv4796.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4794 := 0
		for ; !r.CheckBreak(); yyj4794++ {

			if yyj4794 >= len(yyv4794) {
				yyv4794 = append(yyv4794, ConfigMap{}) // var yyz4794 ConfigMap
				yyc4794 = true
			}
			yyh4794.ElemContainerState(yyj4794)
			if yyj4794 < len(yyv4794) {
				if r.TryDecodeAsNil() {
					yyv4794[yyj4794] = ConfigMap{}
				} else {
					yyv4797 := &yyv4794[yyj4794]
					yyv4797.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4794 < len(yyv4794) {
			yyv4794 = yyv4794[:yyj4794]
			yyc4794 = true
		} else if yyj4794 == 0 && yyv4794 == nil {
			yyv4794 = []ConfigMap{}
			yyc4794 = true
		}
	}
	yyh4794.End()
	if yyc4794 {
		*v = yyv4794
	}
}

func (x codecSelfer1234) encSliceComponentCondition(v []ComponentCondition, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4798 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4799 := &yyv4798
		yy4799.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentCondition(v *[]ComponentCondition, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4800 := *v
	yyh4800, yyl4800 := z.DecSliceHelperStart()
	var yyc4800 bool
	if yyl4800 == 0 {
		if yyv4800 == nil {
			yyv4800 = []ComponentCondition{}
			yyc4800 = true
		} else if len(yyv4800) != 0 {
			yyv4800 = yyv4800[:0]
			yyc4800 = true
		}
	} else if yyl4800 > 0 {
		var yyrr4800, yyrl4800 int
		var yyrt4800 bool
		if yyl4800 > cap(yyv4800) {

			yyrg4800 := len(yyv4800) > 0
			yyv24800 := yyv4800
			yyrl4800, yyrt4800 = z.DecInferLen(yyl4800, z.DecBasicHandle().MaxInitLen, 64)
			if yyrt4800 {
				if yyrl4800 <= cap(yyv4800) {
					yyv4800 = yyv4800[:yyrl4800]
				} else {
					yyv4800 = make([]ComponentCondition, yyrl4800)
				}
			} else {
				yyv4800 = make([]ComponentCondition, yyrl4800)
			}
			yyc4800 = true
			yyrr4800 = len(yyv4800)
			if yyrg4800 {
				copy(yyv4800, yyv24800)
			}
		} else if yyl4800 != len(yyv4800) {
			yyv4800 = yyv4800[:yyl4800]
			yyc4800 = true
		}
		yyj4800 := 0
		for ; yyj4800 < yyrr4800; yyj4800++ {
			yyh4800.ElemContainerState(yyj4800)
			if r.TryDecodeAsNil() {
				yyv4800[yyj4800] = ComponentCondition{}
			} else {
				yyv4801 := &yyv4800[yyj4800]
				yyv4801.CodecDecodeSelf(d)
			}

		}
		if yyrt4800 {
			for ; yyj4800 < yyl4800; yyj4800++ {
				yyv4800 = append(yyv4800, ComponentCondition{})
				yyh4800.ElemContainerState(yyj4800)
				if r.TryDecodeAsNil() {
					yyv4800[yyj4800] = ComponentCondition{}
				} else {
					yyv4802 := &yyv4800[yyj4800]
					yyv4802.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4800 := 0
		for ; !r.CheckBreak(); yyj4800++ {

			if yyj4800 >= len(yyv4800) {
				yyv4800 = append(yyv4800, ComponentCondition{}) // var yyz4800 ComponentCondition
				yyc4800 = true
			}
			yyh4800.ElemContainerState(yyj4800)
			if yyj4800 < len(yyv4800) {
				if r.TryDecodeAsNil() {
					yyv4800[yyj4800] = ComponentCondition{}
				} else {
					yyv4803 := &yyv4800[yyj4800]
					yyv4803.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4800 < len(yyv4800) {
			yyv4800 = yyv4800[:yyj4800]
			yyc4800 = true
		} else if yyj4800 == 0 && yyv4800 == nil {
			yyv4800 = []ComponentCondition{}
			yyc4800 = true
		}
	}
	yyh4800.End()
	if yyc4800 {
		*v = yyv4800
	}
}

func (x codecSelfer1234) encSliceComponentStatus(v []ComponentStatus, e *codec1978.Encoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperEncoder(e)
	_, _, _ = h, z, r
	r.EncodeArrayStart(len(v))
	for _, yyv4804 := range v {
		z.EncSendContainerState(codecSelfer_containerArrayElem1234)
		yy4805 := &yyv4804
		yy4805.CodecEncodeSelf(e)
	}
	z.EncSendContainerState(codecSelfer_containerArrayEnd1234)
}

func (x codecSelfer1234) decSliceComponentStatus(v *[]ComponentStatus, d *codec1978.Decoder) {
	var h codecSelfer1234
	z, r := codec1978.GenHelperDecoder(d)
	_, _, _ = h, z, r

	yyv4806 := *v
	yyh4806, yyl4806 := z.DecSliceHelperStart()
	var yyc4806 bool
	if yyl4806 == 0 {
		if yyv4806 == nil {
			yyv4806 = []ComponentStatus{}
			yyc4806 = true
		} else if len(yyv4806) != 0 {
			yyv4806 = yyv4806[:0]
			yyc4806 = true
		}
	} else if yyl4806 > 0 {
		var yyrr4806, yyrl4806 int
		var yyrt4806 bool
		if yyl4806 > cap(yyv4806) {

			yyrg4806 := len(yyv4806) > 0
			yyv24806 := yyv4806
			yyrl4806, yyrt4806 = z.DecInferLen(yyl4806, z.DecBasicHandle().MaxInitLen, 264)
			if yyrt4806 {
				if yyrl4806 <= cap(yyv4806) {
					yyv4806 = yyv4806[:yyrl4806]
				} else {
					yyv4806 = make([]ComponentStatus, yyrl4806)
				}
			} else {
				yyv4806 = make([]ComponentStatus, yyrl4806)
			}
			yyc4806 = true
			yyrr4806 = len(yyv4806)
			if yyrg4806 {
				copy(yyv4806, yyv24806)
			}
		} else if yyl4806 != len(yyv4806) {
			yyv4806 = yyv4806[:yyl4806]
			yyc4806 = true
		}
		yyj4806 := 0
		for ; yyj4806 < yyrr4806; yyj4806++ {
			yyh4806.ElemContainerState(yyj4806)
			if r.TryDecodeAsNil() {
				yyv4806[yyj4806] = ComponentStatus{}
			} else {
				yyv4807 := &yyv4806[yyj4806]
				yyv4807.CodecDecodeSelf(d)
			}

		}
		if yyrt4806 {
			for ; yyj4806 < yyl4806; yyj4806++ {
				yyv4806 = append(yyv4806, ComponentStatus{})
				yyh4806.ElemContainerState(yyj4806)
				if r.TryDecodeAsNil() {
					yyv4806[yyj4806] = ComponentStatus{}
				} else {
					yyv4808 := &yyv4806[yyj4806]
					yyv4808.CodecDecodeSelf(d)
				}

			}
		}

	} else {
		yyj4806 := 0
		for ; !r.CheckBreak(); yyj4806++ {

			if yyj4806 >= len(yyv4806) {
				yyv4806 = append(yyv4806, ComponentStatus{}) // var yyz4806 ComponentStatus
				yyc4806 = true
			}
			yyh4806.ElemContainerState(yyj4806)
			if yyj4806 < len(yyv4806) {
				if r.TryDecodeAsNil() {
					yyv4806[yyj4806] = ComponentStatus{}
				} else {
					yyv4809 := &yyv4806[yyj4806]
					yyv4809.CodecDecodeSelf(d)
				}

			} else {
				z.DecSwallow()
			}

		}
		if yyj4806 < len(yyv4806) {
			yyv4806 = yyv4806[:yyj4806]
			yyc4806 = true
		} else if yyj4806 == 0 && yyv4806 == nil {
			yyv4806 = []ComponentStatus{}
			yyc4806 = true
		}
	}
	yyh4806.End()
	if yyc4806 {
		*v = yyv4806
	}
}
